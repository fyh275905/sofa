/* Generated by Cython 0.24.0a0 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_24_0a0"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
  #define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__sofacython
#define __PYX_HAVE_API__sofacython
#include "boost/smart_ptr/shared_ptr.hpp"
#include "../../../../../framework/sofa/defaulttype/Vec.h"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "string.h"
#include <string>
#include "../../../../../framework/sofa/helper/vector.h"
#include "../../../../../framework/sofa/defaulttype/DataTypeInfo.h"
#include "../../../../../framework/sofa/core/objectmodel/BaseData.h"
#include "../../../../../framework/sofa/core/objectmodel/Base.h"
#include "boost/intrusive_ptr.hpp"
#include "../../../../../framework/sofa/core/objectmodel/BaseObjectDescription.h"
#include "../../../../../framework/sofa/core/objectmodel/BaseObject.h"
#include "../../../../../framework/sofa/core/objectmodel/BaseContext.h"
#include "../../../../../framework/sofa/core/ObjectFactory.h"
#include <vector>
#include "../../../../../framework/sofa/core/objectmodel/BaseNode.h"
#include "../../../../../modules/sofa/simulation/common/Node.h"
#include "../../../../../modules/sofa/simulation/common/Simulation.h"
#include "../../../../../framework/sofa/core/behavior/BaseMechanicalState.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "src/pyx/objectfactory.pyx",
  "src/pyx/vec3d.pyx",
  "src/pyx/base.pyx",
  "src/pyx/baseobjectdescription.pyx",
  "src/pyx/basedata.pyx",
  "src/pyx/baseobject.pyx",
  "src/pyx/basenode.pyx",
  "src/pyx/basecontext.pyx",
  "src/pyx/node.pyx",
  "src/pyx/simulation.pyx",
  "src/pyx/basemechanicalstate.pyx",
  "stringsource",
  "src/pyx/sofacython.pyx",
};

/*--- Type declarations ---*/
struct __pyx_obj_10sofacython_Vec3d;
struct __pyx_obj_10sofacython_Base;
struct __pyx_obj_10sofacython_BaseObjectDescription;
struct __pyx_obj_10sofacython_ObjectFactory;
struct __pyx_obj_10sofacython_BaseData;
struct __pyx_obj_10sofacython_BaseObject;
struct __pyx_obj_10sofacython_BaseNode;
struct __pyx_obj_10sofacython_BaseContext;
struct __pyx_obj_10sofacython_Node;
struct __pyx_obj_10sofacython_Simulation;
struct __pyx_obj_10sofacython_BaseMechanicalState;

/* "src/pyx/vec3d.pyx":6
 * from vec3d cimport Vec3d as _Vec3d
 * 
 * cdef class Vec3d:             # <<<<<<<<<<<<<<
 *     """ A 3D Vector containg double values.
 *         examples:
 */
struct __pyx_obj_10sofacython_Vec3d {
  PyObject_HEAD
  boost::shared_ptr<sofa::defaulttype::Vec3d>  inst;
};


/* "src/pyx/base.pyx":8
 * from sofavector cimport vector as sofavector
 * 
 * cdef class Base:             # <<<<<<<<<<<<<<
 *     """ Hold a sofa Base object providing access to object's name and datafield
 *         If other functionnalites are needed you can downcast this object to
 */
struct __pyx_obj_10sofacython_Base {
  PyObject_HEAD
  struct __pyx_vtabstruct_10sofacython_Base *__pyx_vtab;
  sofa::core::objectmodel::Base *realptr;
};


/* "src/pyx/baseobjectdescription.pyx":6
 * from baseobjectdescription cimport BaseObjectDescription as _BaseObjectDescription
 * 
 * cdef class BaseObjectDescription:             # <<<<<<<<<<<<<<
 *         cdef _BaseObjectDescription* baseobjectdescriptionptr
 * 
 */
struct __pyx_obj_10sofacython_BaseObjectDescription {
  PyObject_HEAD
  sofa::core::objectmodel::BaseObjectDescription *baseobjectdescriptionptr;
};


/* "src/pyx/objectfactory.pyx":9
 * from objectfactory cimport ObjectFactory as _ObjectFactory, CreateObject as _CreateObject
 * 
 * cdef class ObjectFactory:             # <<<<<<<<<<<<<<
 *         """An utilitary class allowing to create object attached to a specific location of the scene graph
 * 
 */
struct __pyx_obj_10sofacython_ObjectFactory {
  PyObject_HEAD
};


/* "src/pyx/basedata.pyx":6
 * from basedata cimport BaseData as _BaseData, AbstractTypeInfo as _AbstractTypeInfo
 * 
 * cdef class BaseData:             # <<<<<<<<<<<<<<
 *         """ A BaseData exposes the component data fields.
 * 
 */
struct __pyx_obj_10sofacython_BaseData {
  PyObject_HEAD
  sofa::core::objectmodel::BaseData *realptr;
};


/* "src/pyx/baseobject.pyx":10
 *         _BaseObject* dynamic_cast_baseobject_ptr "dynamic_cast< sofa::core::objectmodel::BaseObject* >" (_Base*) except NULL
 * 
 * cdef class BaseObject(Base):             # <<<<<<<<<<<<<<
 *         """All sofa components implementing specific simulation behaviors are named 'objects' and
 *            inherits from the BaseObject class.
 */
struct __pyx_obj_10sofacython_BaseObject {
  struct __pyx_obj_10sofacython_Base __pyx_base;
  sofa::core::objectmodel::BaseObject *baseobjectptr;
};


/* "src/pyx/basenode.pyx":10
 *         _BaseNode* dynamic_cast_basenode_ptr "dynamic_cast< sofa::core::objectmodel::BaseNode* >" (_Base*) except NULL
 * 
 * cdef class BaseNode(Base):             # <<<<<<<<<<<<<<
 *         """ A Node is a class defining the main scene data structure of a simulation.
 *             It defined hierarchical relations between elements. Each node can have parent and child nodes
 */
struct __pyx_obj_10sofacython_BaseNode {
  struct __pyx_obj_10sofacython_Base __pyx_base;
  sofa::core::objectmodel::BaseNode *basenodeptr;
};


/* "src/pyx/basecontext.pyx":6
 * from basecontext cimport BaseContext as _BaseContext
 * 
 * cdef class BaseContext(Base):             # <<<<<<<<<<<<<<
 *         """A Context contains values or pointers to variables and parameters shared
 *            by a group of objects, typically refering to the same simulated body.
 */
struct __pyx_obj_10sofacython_BaseContext {
  struct __pyx_obj_10sofacython_Base __pyx_base;
  sofa::core::objectmodel::BaseContext *basecontextptr;
};


/* "src/pyx/node.pyx":10
 *         _Node* dynamic_cast_basenode_ptr "dynamic_cast< sofa::core::objectmodel::Node* >" (_Base*) except NULL
 * 
 * cdef class Node(BaseNode):             # <<<<<<<<<<<<<<
 *         """ A Node is a class defining the main scene data structure of a simulation.
 *             It defined hierarchical relations between elements. Each node can have parent and child nodes
 */
struct __pyx_obj_10sofacython_Node {
  struct __pyx_obj_10sofacython_BaseNode __pyx_base;
  sofa::simulation::Node *nodeptr;
};


/* "src/pyx/simulation.pyx":4
 * from simulation cimport Simulation as _Simulation, GetRoot as _Simulation_GetRoot, theSimulation as _theSimulation
 * 
 * cdef class Simulation:             # <<<<<<<<<<<<<<
 *         """ Main controller of the scene.
 *             Defines how the scene is inited at the beginning, and updated at each time step.
 */
struct __pyx_obj_10sofacython_Simulation {
  PyObject_HEAD
};


/* "src/pyx/basemechanicalstate.pyx":8
 *         _BaseMechanicalState* dynamic_cast_basemechanicalobject "dynamic_cast< sofa::core::behavior::BaseMechanicalState* >" (_Base*) except NULL
 * 
 * cdef class BaseMechanicalState(BaseObject):             # <<<<<<<<<<<<<<
 *         """In Sofa a BaseMechanicalState is a component that stores the mechanical DOFs.
 *            The BaseMechanicalState inherits from BaseObject (and thus Base) and it is possible to downcast a
 */
struct __pyx_obj_10sofacython_BaseMechanicalState {
  struct __pyx_obj_10sofacython_BaseObject __pyx_base;
  sofa::core::behavior::BaseMechanicalState *mechanicalstateptr;
};



/* "src/pyx/base.pyx":8
 * from sofavector cimport vector as sofavector
 * 
 * cdef class Base:             # <<<<<<<<<<<<<<
 *     """ Hold a sofa Base object providing access to object's name and datafield
 *         If other functionnalites are needed you can downcast this object to
 */

struct __pyx_vtabstruct_10sofacython_Base {
  PyObject *(*createFrom)(sofa::core::objectmodel::Base *);
};
static struct __pyx_vtabstruct_10sofacython_Base *__pyx_vtabptr_10sofacython_Base;


/* "src/pyx/baseobject.pyx":10
 *         _BaseObject* dynamic_cast_baseobject_ptr "dynamic_cast< sofa::core::objectmodel::BaseObject* >" (_Base*) except NULL
 * 
 * cdef class BaseObject(Base):             # <<<<<<<<<<<<<<
 *         """All sofa components implementing specific simulation behaviors are named 'objects' and
 *            inherits from the BaseObject class.
 */

struct __pyx_vtabstruct_10sofacython_BaseObject {
  struct __pyx_vtabstruct_10sofacython_Base __pyx_base;
};
static struct __pyx_vtabstruct_10sofacython_BaseObject *__pyx_vtabptr_10sofacython_BaseObject;


/* "src/pyx/basenode.pyx":10
 *         _BaseNode* dynamic_cast_basenode_ptr "dynamic_cast< sofa::core::objectmodel::BaseNode* >" (_Base*) except NULL
 * 
 * cdef class BaseNode(Base):             # <<<<<<<<<<<<<<
 *         """ A Node is a class defining the main scene data structure of a simulation.
 *             It defined hierarchical relations between elements. Each node can have parent and child nodes
 */

struct __pyx_vtabstruct_10sofacython_BaseNode {
  struct __pyx_vtabstruct_10sofacython_Base __pyx_base;
};
static struct __pyx_vtabstruct_10sofacython_BaseNode *__pyx_vtabptr_10sofacython_BaseNode;


/* "src/pyx/basecontext.pyx":6
 * from basecontext cimport BaseContext as _BaseContext
 * 
 * cdef class BaseContext(Base):             # <<<<<<<<<<<<<<
 *         """A Context contains values or pointers to variables and parameters shared
 *            by a group of objects, typically refering to the same simulated body.
 */

struct __pyx_vtabstruct_10sofacython_BaseContext {
  struct __pyx_vtabstruct_10sofacython_Base __pyx_base;
};
static struct __pyx_vtabstruct_10sofacython_BaseContext *__pyx_vtabptr_10sofacython_BaseContext;


/* "src/pyx/node.pyx":10
 *         _Node* dynamic_cast_basenode_ptr "dynamic_cast< sofa::core::objectmodel::Node* >" (_Base*) except NULL
 * 
 * cdef class Node(BaseNode):             # <<<<<<<<<<<<<<
 *         """ A Node is a class defining the main scene data structure of a simulation.
 *             It defined hierarchical relations between elements. Each node can have parent and child nodes
 */

struct __pyx_vtabstruct_10sofacython_Node {
  struct __pyx_vtabstruct_10sofacython_BaseNode __pyx_base;
};
static struct __pyx_vtabstruct_10sofacython_Node *__pyx_vtabptr_10sofacython_Node;


/* "src/pyx/basemechanicalstate.pyx":8
 *         _BaseMechanicalState* dynamic_cast_basemechanicalobject "dynamic_cast< sofa::core::behavior::BaseMechanicalState* >" (_Base*) except NULL
 * 
 * cdef class BaseMechanicalState(BaseObject):             # <<<<<<<<<<<<<<
 *         """In Sofa a BaseMechanicalState is a component that stores the mechanical DOFs.
 *            The BaseMechanicalState inherits from BaseObject (and thus Base) and it is possible to downcast a
 */

struct __pyx_vtabstruct_10sofacython_BaseMechanicalState {
  struct __pyx_vtabstruct_10sofacython_BaseObject __pyx_base;
  sofa::core::behavior::BaseMechanicalState *(*getRawPointer)(struct __pyx_obj_10sofacython_BaseMechanicalState *);
};
static struct __pyx_vtabstruct_10sofacython_BaseMechanicalState *__pyx_vtabptr_10sofacython_BaseMechanicalState;

/* --- Runtime support code (head) --- */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_EqObjC(op1, op2, intval, inplace)\
    PyObject_RichCompare(op1, op2, Py_EQ)
    #endif

static CYTHON_INLINE int __Pyx_IterFinish(void);

static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** value1, PyObject** value2,
                                             int is_tuple, int has_known_size, int decref_tuple);

static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

static int __Pyx_SetVtable(PyObject *dict, void *vtable);

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

#include <new>

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_PY_LONG_LONG(PY_LONG_LONG value);

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_As_PY_LONG_LONG(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static int __Pyx_check_binary_version(void);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_10sofacython_4Base_createFrom(sofa::core::objectmodel::Base *__pyx_v_aBase); /* proto*/
static PyObject *__pyx_f_10sofacython_10BaseObject_createFrom(sofa::core::objectmodel::BaseObject *__pyx_v_aBaseObject); /* proto*/
static PyObject *__pyx_f_10sofacython_8BaseNode_createFrom(sofa::core::objectmodel::BaseNode *__pyx_v_aNode); /* proto*/
static PyObject *__pyx_f_10sofacython_11BaseContext_createFrom(sofa::core::objectmodel::BaseContext *__pyx_v_aContext); /* proto*/
static PyObject *__pyx_f_10sofacython_4Node_createFrom(sofa::simulation::Node *__pyx_v_aNode); /* proto*/
static PyObject *__pyx_f_10sofacython_19BaseMechanicalState_createFrom(sofa::core::behavior::BaseMechanicalState *__pyx_v_aptr); /* proto*/
static sofa::core::behavior::BaseMechanicalState *__pyx_f_10sofacython_19BaseMechanicalState_getRawPointer(struct __pyx_obj_10sofacython_BaseMechanicalState *__pyx_v_self); /* proto*/

/* Module declarations from 'libcpp.cast' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'smart_ptr' */

/* Module declarations from 'vec3d' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'sofavector' */

/* Module declarations from 'basedata' */

/* Module declarations from 'base' */

/* Module declarations from 'boost' */

/* Module declarations from 'baseobjectdescription' */

/* Module declarations from 'baseobject' */

/* Module declarations from 'basecontext' */

/* Module declarations from 'objectfactory' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'basenode' */

/* Module declarations from 'node' */

/* Module declarations from 'simulation' */

/* Module declarations from 'basemechanicalstate' */

/* Module declarations from 'sofacython' */
static PyTypeObject *__pyx_ptype_10sofacython_Vec3d = 0;
static PyTypeObject *__pyx_ptype_10sofacython_Base = 0;
static PyTypeObject *__pyx_ptype_10sofacython_BaseObjectDescription = 0;
static PyTypeObject *__pyx_ptype_10sofacython_ObjectFactory = 0;
static PyTypeObject *__pyx_ptype_10sofacython_BaseData = 0;
static PyTypeObject *__pyx_ptype_10sofacython_BaseObject = 0;
static PyTypeObject *__pyx_ptype_10sofacython_BaseNode = 0;
static PyTypeObject *__pyx_ptype_10sofacython_BaseContext = 0;
static PyTypeObject *__pyx_ptype_10sofacython_Node = 0;
static PyTypeObject *__pyx_ptype_10sofacython_Simulation = 0;
static PyTypeObject *__pyx_ptype_10sofacython_BaseMechanicalState = 0;
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
#define __Pyx_MODULE_NAME "sofacython"
int __pyx_module_is_main_sofacython = 0;

/* Implementation of 'sofacython' */
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_Exception;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_AttributeError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_NotImplemented;
static const char __pyx_k_p[] = "p";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_z[] = "z";
static const char __pyx_k__2[] = "](";
static const char __pyx_k__3[] = ")";
static const char __pyx_k__4[] = "'";
static const char __pyx_k_dt[] = "dt";
static const char __pyx_k_sx[] = "sx";
static const char __pyx_k_sy[] = "sy";
static const char __pyx_k_sz[] = "sz";
static const char __pyx_k_Key[] = "Key [";
static const char __pyx_k_src[] = "src";
static const char __pyx_k_Base[] = "Base[";
static const char __pyx_k_Node[] = "Node[";
static const char __pyx_k_copy[] = "__copy__";
static const char __pyx_k_in_0[] = "in_0";
static const char __pyx_k_in_1[] = "in_1";
static const char __pyx_k_in_2[] = "in_2";
static const char __pyx_k_init[] = "init";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_node[] = "node";
static const char __pyx_k_norm[] = "norm";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_Index[] = "Index [";
static const char __pyx_k_aDesc[] = "aDesc";
static const char __pyx_k_aName[] = "aName";
static const char __pyx_k_aType[] = "aType";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_reset[] = "reset";
static const char __pyx_k_aValue[] = "aValue";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_init_0[] = "_init_0";
static const char __pyx_k_init_1[] = "_init_1";
static const char __pyx_k_init_2[] = "_init_2";
static const char __pyx_k_animate[] = "animate";
static const char __pyx_k_getName[] = "getName";
static const char __pyx_k_getRoot[] = "getRoot";
static const char __pyx_k_init__1[] = "__init__1";
static const char __pyx_k_aContext[] = "aContext";
static const char __pyx_k_findData[] = "findData";
static const char __pyx_k_initNode[] = "initNode";
static const char __pyx_k_Exception[] = "Exception";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_iteritems[] = "iteritems";
static const char __pyx_k_mulscalar[] = "mulscalar";
static const char __pyx_k_normalize[] = "normalize";
static const char __pyx_k_BaseObject[] = "BaseObject[";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_elementmul[] = "elementmul";
static const char __pyx_k_getContext[] = "getContext";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_sofacython[] = "sofacython";
static const char __pyx_k_createObject[] = "createObject";
static const char __pyx_k_setAttribute[] = "setAttribute";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_2_2f_2_2f_2_2f[] = "({:2.2f}, {:2.2f}, {:2.2f})";
static const char __pyx_k_AttributeError[] = "AttributeError";
static const char __pyx_k_NotImplemented[] = "NotImplemented";
static const char __pyx_k_Division_by_zero[] = "Division by zero";
static const char __pyx_k_arg_i_wrong_type[] = "arg i wrong type";
static const char __pyx_k_has_no_attribute[] = "has no attribute '";
static const char __pyx_k_arg_sx_wrong_type[] = "arg sx wrong type";
static const char __pyx_k_arg_sy_wrong_type[] = "arg sy wrong type";
static const char __pyx_k_arg_sz_wrong_type[] = "arg sz wrong type";
static const char __pyx_k_Too_much_parameters[] = "Too much parameters";
static const char __pyx_k_arg_in_0_wrong_type[] = "arg in_0 wrong type";
static const char __pyx_k_arg_in_1_wrong_type[] = "arg in_1 wrong type";
static const char __pyx_k_arg_in_2_wrong_type[] = "arg in_2 wrong type";
static const char __pyx_k_seems_to_be_of_type[] = "] seems to be of type ";
static const char __pyx_k_can_not_handle_type_of_s[] = "can not handle type of %s";
static const char __pyx_k_Value_has_a_length_of_size[] = "Value has a length of size [";
static const char __pyx_k_setattr___has_no_attribute[] = "__setattr__()...has no attribute '";
static const char __pyx_k_is_invalid_as_it_should_lie_in[] = "] is invalid as it should lie in the [0,3] interval.";
static const char __pyx_k_size_should_be_of_integer_type[] = "size should be of integer type";
static const char __pyx_k_which_differ_from_the_expected[] = "] which differ from the expected size ";
static const char __pyx_k_Unable_to_get_a_BaseObject_from[] = "Unable to get a BaseObject from this Base pointer...maybe it is a BaseNode, BaseContext or something else";
static const char __pyx_k_home_dmarchal_projects_2015_DEF[] = "/home/dmarchal/projects/2015/DEFROST/04-code/sofa-new/sofa/applications/plugins/cython-binding/src/pyx/objectfactory.pyx";
static const char __pyx_k_is_to_big_for_this_array_of_siz[] = "] is to big for this array of size ";
static const char __pyx_k_Cannot_create_an_empty_mechanica[] = "Cannot create an empty mechanical state, please use the ObjectFactory.createObject('myobject', 'MechanicalObject')) ";
static const char __pyx_k_Expecting_the_key_to_be_an_inter[] = "Expecting the key to be an interger while the provided value [";
static const char __pyx_k_Index_is_too_big_for_this_vector[] = "Index is too big for this vector of size 3";
static const char __pyx_k_This_DataField_is_not_a_containe[] = "This DataField is not a container or it cannot be resized.";
static const char __pyx_k_Unable_to_create_a_BaseMechanica[] = "Unable to create a BaseMechanicalState from a the provided argument";
static const char __pyx_k_Unable_to_create_an_object_of_ty[] = "Unable to create an object of type: ";
static const char __pyx_k_arg_aName_has_a_wrong_type_strin[] = "arg aName has a wrong type. string is expected instead of ";
static const char __pyx_k_arg_aType_has_a_wrong_type_strin[] = "arg aType has a wrong type. string is expected instead of ";
static const char __pyx_k_arg_index_has_a_wrong_type_int_i[] = "arg index has a wrong type. int is expected instead of ";
static const char __pyx_k_arg_value_has_a_wrong_type_int_o[] = "arg value has a wrong type. int or float expected instead of ";
static const char __pyx_k_home_dmarchal_projects_2015_DEF_2[] = "/home/dmarchal/projects/2015/DEFROST/04-code/sofa-new/sofa/applications/plugins/cython-binding/src/pyx/simulation.pyx";
static const char __pyx_k_arg_value_has_a_wrong_type_int_o_2[] = "arg value has a wrong type. int or float or Vec3d expected instead of ";
static PyObject *__pyx_kp_s_2_2f_2_2f_2_2f;
static PyObject *__pyx_n_s_AttributeError;
static PyObject *__pyx_kp_s_Base;
static PyObject *__pyx_kp_s_BaseObject;
static PyObject *__pyx_kp_s_Cannot_create_an_empty_mechanica;
static PyObject *__pyx_kp_s_Division_by_zero;
static PyObject *__pyx_n_s_Exception;
static PyObject *__pyx_kp_s_Expecting_the_key_to_be_an_inter;
static PyObject *__pyx_kp_s_Index;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_Index_is_too_big_for_this_vector;
static PyObject *__pyx_kp_s_Key;
static PyObject *__pyx_kp_s_Node;
static PyObject *__pyx_n_s_NotImplemented;
static PyObject *__pyx_kp_s_This_DataField_is_not_a_containe;
static PyObject *__pyx_kp_s_Too_much_parameters;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unable_to_create_a_BaseMechanica;
static PyObject *__pyx_kp_s_Unable_to_create_an_object_of_ty;
static PyObject *__pyx_kp_s_Unable_to_get_a_BaseObject_from;
static PyObject *__pyx_kp_s_Value_has_a_length_of_size;
static PyObject *__pyx_kp_s__2;
static PyObject *__pyx_kp_s__3;
static PyObject *__pyx_kp_s__4;
static PyObject *__pyx_n_s_aContext;
static PyObject *__pyx_n_s_aDesc;
static PyObject *__pyx_n_s_aName;
static PyObject *__pyx_n_s_aType;
static PyObject *__pyx_n_s_aValue;
static PyObject *__pyx_n_s_animate;
static PyObject *__pyx_kp_s_arg_aName_has_a_wrong_type_strin;
static PyObject *__pyx_kp_s_arg_aType_has_a_wrong_type_strin;
static PyObject *__pyx_kp_s_arg_i_wrong_type;
static PyObject *__pyx_kp_s_arg_in_0_wrong_type;
static PyObject *__pyx_kp_s_arg_in_1_wrong_type;
static PyObject *__pyx_kp_s_arg_in_2_wrong_type;
static PyObject *__pyx_kp_s_arg_index_has_a_wrong_type_int_i;
static PyObject *__pyx_kp_s_arg_sx_wrong_type;
static PyObject *__pyx_kp_s_arg_sy_wrong_type;
static PyObject *__pyx_kp_s_arg_sz_wrong_type;
static PyObject *__pyx_kp_s_arg_value_has_a_wrong_type_int_o;
static PyObject *__pyx_kp_s_arg_value_has_a_wrong_type_int_o_2;
static PyObject *__pyx_kp_s_can_not_handle_type_of_s;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_createObject;
static PyObject *__pyx_n_s_dt;
static PyObject *__pyx_n_s_elementmul;
static PyObject *__pyx_n_s_findData;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_getContext;
static PyObject *__pyx_n_s_getName;
static PyObject *__pyx_n_s_getRoot;
static PyObject *__pyx_kp_s_has_no_attribute;
static PyObject *__pyx_kp_s_home_dmarchal_projects_2015_DEF;
static PyObject *__pyx_kp_s_home_dmarchal_projects_2015_DEF_2;
static PyObject *__pyx_n_s_in_0;
static PyObject *__pyx_n_s_in_1;
static PyObject *__pyx_n_s_in_2;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_initNode;
static PyObject *__pyx_n_s_init_0;
static PyObject *__pyx_n_s_init_1;
static PyObject *__pyx_n_s_init_2;
static PyObject *__pyx_n_s_init__1;
static PyObject *__pyx_kp_s_is_invalid_as_it_should_lie_in;
static PyObject *__pyx_kp_s_is_to_big_for_this_array_of_siz;
static PyObject *__pyx_n_s_iteritems;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_mulscalar;
static PyObject *__pyx_n_s_node;
static PyObject *__pyx_n_s_norm;
static PyObject *__pyx_n_s_normalize;
static PyObject *__pyx_n_s_p;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reset;
static PyObject *__pyx_kp_s_seems_to_be_of_type;
static PyObject *__pyx_n_s_setAttribute;
static PyObject *__pyx_kp_s_setattr___has_no_attribute;
static PyObject *__pyx_kp_s_size_should_be_of_integer_type;
static PyObject *__pyx_n_s_sofacython;
static PyObject *__pyx_n_s_src;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_n_s_sx;
static PyObject *__pyx_n_s_sy;
static PyObject *__pyx_n_s_sz;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_kp_s_which_differ_from_the_expected;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_z;
static void __pyx_pf_10sofacython_5Vec3d___dealloc__(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_5Vec3d_2set(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self, double __pyx_v_in_0, double __pyx_v_in_1, double __pyx_v_in_2); /* proto */
static PyObject *__pyx_pf_10sofacython_5Vec3d_4__add__(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self, struct __pyx_obj_10sofacython_Vec3d *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_10sofacython_5Vec3d_6__sub__(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self, struct __pyx_obj_10sofacython_Vec3d *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_10sofacython_5Vec3d_8normalize(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_5Vec3d_10normalized(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_5Vec3d_12mulscalar(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
#if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
static PyObject *__pyx_pf_10sofacython_5Vec3d_14__div__(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
#endif
static PyObject *__pyx_pf_10sofacython_5Vec3d_16elementmul(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self, struct __pyx_obj_10sofacython_Vec3d *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_10sofacython_5Vec3d_18__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_10sofacython_5Vec3d_20norm(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_5Vec3d_22__copy__(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_5Vec3d_24__deepcopy__(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_memo); /* proto */
static PyObject *__pyx_pf_10sofacython_5Vec3d_26_init_0(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_5Vec3d_28_init_1(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self, struct __pyx_obj_10sofacython_Vec3d *__pyx_v_in_0); /* proto */
static PyObject *__pyx_pf_10sofacython_5Vec3d_30_init_2(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self, double __pyx_v_in_0, double __pyx_v_in_1, double __pyx_v_in_2); /* proto */
static int __pyx_pf_10sofacython_5Vec3d_32__init__(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self, PyObject *__pyx_v_args); /* proto */
static int __pyx_pf_10sofacython_5Vec3d_34__setitem__(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_10sofacython_5Vec3d_36__getitem__(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self, PyObject *__pyx_v_in_0); /* proto */
static Py_ssize_t __pyx_pf_10sofacython_5Vec3d_38__len__(CYTHON_UNUSED struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_5Vec3d_40y(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_5Vec3d_42x(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_5Vec3d_44z(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_5Vec3d_46xy(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_5Vec3d_48xyz(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_5Vec3d_50__str__(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_5Vec3d_52distanceTo(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self, struct __pyx_obj_10sofacython_Vec3d *__pyx_v_aPoint); /* proto */
static PyObject *__pyx_pf_10sofacython_4Base_findData(struct __pyx_obj_10sofacython_Base *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_10sofacython_4Base_2getName(struct __pyx_obj_10sofacython_Base *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_4Base_4__str__(struct __pyx_obj_10sofacython_Base *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_4Base_6getTypeName(struct __pyx_obj_10sofacython_Base *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_4Base_8getClassName(struct __pyx_obj_10sofacython_Base *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_4Base_10getTemplateName(struct __pyx_obj_10sofacython_Base *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_4Base_12getDataNames(struct __pyx_obj_10sofacython_Base *__pyx_v_self); /* proto */
static int __pyx_pf_10sofacython_4Base_14__init__(struct __pyx_obj_10sofacython_Base *__pyx_v_self, struct __pyx_obj_10sofacython_Base *__pyx_v_src); /* proto */
static PyObject *__pyx_pf_10sofacython_4Base_16__getattr__(struct __pyx_obj_10sofacython_Base *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static int __pyx_pf_10sofacython_4Base_18__setattr__(struct __pyx_obj_10sofacython_Base *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_10sofacython_4Base_20__richcmp__(struct __pyx_obj_10sofacython_Base *__pyx_v_self, struct __pyx_obj_10sofacython_Base *__pyx_v_other, PyObject *__pyx_v_op); /* proto */
static void __pyx_pf_10sofacython_21BaseObjectDescription___dealloc__(struct __pyx_obj_10sofacython_BaseObjectDescription *__pyx_v_self); /* proto */
static int __pyx_pf_10sofacython_21BaseObjectDescription_2__init__(struct __pyx_obj_10sofacython_BaseObjectDescription *__pyx_v_self, PyObject *__pyx_v_aName, PyObject *__pyx_v_aType); /* proto */
static PyObject *__pyx_pf_10sofacython_21BaseObjectDescription_4getName(struct __pyx_obj_10sofacython_BaseObjectDescription *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_21BaseObjectDescription_6setAttribute(struct __pyx_obj_10sofacython_BaseObjectDescription *__pyx_v_self, PyObject *__pyx_v_aName, PyObject *__pyx_v_aValue); /* proto */
static PyObject *__pyx_pf_10sofacython_13ObjectFactory_createObject(struct __pyx_obj_10sofacython_BaseContext *__pyx_v_aContext, struct __pyx_obj_10sofacython_BaseObjectDescription *__pyx_v_aDesc); /* proto */
static PyObject *__pyx_pf_10sofacython_8BaseData_getName(struct __pyx_obj_10sofacython_BaseData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_8BaseData_2getValueString(struct __pyx_obj_10sofacython_BaseData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_8BaseData_4getValueTypeString(struct __pyx_obj_10sofacython_BaseData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_8BaseData_6dim(struct __pyx_obj_10sofacython_BaseData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_8BaseData_8setSize(struct __pyx_obj_10sofacython_BaseData *__pyx_v_self, PyObject *__pyx_v_size); /* proto */
static PyObject *__pyx_pf_10sofacython_8BaseData_10append(struct __pyx_obj_10sofacython_BaseData *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_10sofacython_8BaseData_12setPersistent(struct __pyx_obj_10sofacython_BaseData *__pyx_v_self, bool __pyx_v_b); /* proto */
static PyObject *__pyx_pf_10sofacython_8BaseData_14isPersistent(struct __pyx_obj_10sofacython_BaseData *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_10sofacython_8BaseData_16__len__(struct __pyx_obj_10sofacython_BaseData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_8BaseData_18__getitem__(struct __pyx_obj_10sofacython_BaseData *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static int __pyx_pf_10sofacython_8BaseData_20__setitem__(struct __pyx_obj_10sofacython_BaseData *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_10sofacython_8BaseData_22__str__(struct __pyx_obj_10sofacython_BaseData *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_10BaseObject_init(struct __pyx_obj_10sofacython_BaseObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_10BaseObject_2bwdInit(struct __pyx_obj_10sofacython_BaseObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_10BaseObject_4reinit(struct __pyx_obj_10sofacython_BaseObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_10BaseObject_6reset(struct __pyx_obj_10sofacython_BaseObject *__pyx_v_self); /* proto */
static int __pyx_pf_10sofacython_10BaseObject_8__init__(struct __pyx_obj_10sofacython_BaseObject *__pyx_v_self, struct __pyx_obj_10sofacython_Base *__pyx_v_src); /* proto */
static PyObject *__pyx_pf_10sofacython_10BaseObject_10__str__(struct __pyx_obj_10sofacython_BaseObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_8BaseNode_getRoot(struct __pyx_obj_10sofacython_BaseNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_4Node_getContext(struct __pyx_obj_10sofacython_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_4Node_2getRoot(struct __pyx_obj_10sofacython_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_4Node_4getTreeNode(struct __pyx_obj_10sofacython_Node *__pyx_v_self, PyObject *__pyx_v_aName); /* proto */
static PyObject *__pyx_pf_10sofacython_4Node_6getChild(struct __pyx_obj_10sofacython_Node *__pyx_v_self, PyObject *__pyx_v_aName); /* proto */
static PyObject *__pyx_pf_10sofacython_4Node_8getObject(struct __pyx_obj_10sofacython_Node *__pyx_v_self, PyObject *__pyx_v_aName); /* proto */
static PyObject *__pyx_pf_10sofacython_4Node_10createChild(struct __pyx_obj_10sofacython_Node *__pyx_v_self, PyObject *__pyx_v_aName); /* proto */
static PyObject *__pyx_pf_10sofacython_4Node_12createObject(struct __pyx_obj_10sofacython_Node *__pyx_v_self, PyObject *__pyx_v_aType, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_10sofacython_4Node_14__str__(struct __pyx_obj_10sofacython_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_10Simulation_getRoot(); /* proto */
static PyObject *__pyx_pf_10sofacython_10Simulation_2init(struct __pyx_obj_10sofacython_Node *__pyx_v_node); /* proto */
static PyObject *__pyx_pf_10sofacython_10Simulation_4initNode(struct __pyx_obj_10sofacython_Node *__pyx_v_node); /* proto */
static PyObject *__pyx_pf_10sofacython_10Simulation_6animate(struct __pyx_obj_10sofacython_Node *__pyx_v_node, float __pyx_v_dt); /* proto */
static PyObject *__pyx_pf_10sofacython_10Simulation_8reset(struct __pyx_obj_10sofacython_Node *__pyx_v_node); /* proto */
static int __pyx_pf_10sofacython_19BaseMechanicalState___init__(struct __pyx_obj_10sofacython_BaseMechanicalState *__pyx_v_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_10sofacython_19BaseMechanicalState_2getPX(struct __pyx_obj_10sofacython_BaseMechanicalState *__pyx_v_self, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_10sofacython_19BaseMechanicalState_4getPY(struct __pyx_obj_10sofacython_BaseMechanicalState *__pyx_v_self, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_10sofacython_19BaseMechanicalState_6getPZ(struct __pyx_obj_10sofacython_BaseMechanicalState *__pyx_v_self, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_10sofacython_19BaseMechanicalState_8applyScale(struct __pyx_obj_10sofacython_BaseMechanicalState *__pyx_v_self, double __pyx_v_sx, double __pyx_v_sy, double __pyx_v_sz); /* proto */
static PyObject *__pyx_pf_10sofacython_19BaseMechanicalState_10applyTranslation(struct __pyx_obj_10sofacython_BaseMechanicalState *__pyx_v_self, double __pyx_v_sx, double __pyx_v_sy, double __pyx_v_sz); /* proto */
static PyObject *__pyx_pf_10sofacython_19BaseMechanicalState_12applyRotation(struct __pyx_obj_10sofacython_BaseMechanicalState *__pyx_v_self, double __pyx_v_sx, double __pyx_v_sy, double __pyx_v_sz); /* proto */
static PyObject *__pyx_pf_10sofacython_19BaseMechanicalState_14resize(struct __pyx_obj_10sofacython_BaseMechanicalState *__pyx_v_self, size_t __pyx_v_aNewSize); /* proto */
static Py_ssize_t __pyx_pf_10sofacython_19BaseMechanicalState_16__len__(struct __pyx_obj_10sofacython_BaseMechanicalState *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10sofacython_19BaseMechanicalState_18__init__1(struct __pyx_obj_10sofacython_BaseMechanicalState *__pyx_v_self, struct __pyx_obj_10sofacython_Base *__pyx_v_aBase); /* proto */
static PyObject *__pyx_tp_new_10sofacython_Vec3d(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10sofacython_Base(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10sofacython_BaseObjectDescription(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10sofacython_ObjectFactory(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10sofacython_BaseData(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10sofacython_BaseObject(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10sofacython_BaseNode(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10sofacython_BaseContext(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10sofacython_Node(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10sofacython_Simulation(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10sofacython_BaseMechanicalState(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_codeobj__12;
static PyObject *__pyx_codeobj__13;
static PyObject *__pyx_codeobj__15;
static PyObject *__pyx_codeobj__17;
static PyObject *__pyx_codeobj__19;
static PyObject *__pyx_codeobj__21;

/* "src/pyx/vec3d.pyx":33
 *     cdef shared_ptr[_Vec3d] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

/* Python wrapper */
static void __pyx_pw_10sofacython_5Vec3d_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_10sofacython_5Vec3d_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_10sofacython_5Vec3d___dealloc__(((struct __pyx_obj_10sofacython_Vec3d *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_10sofacython_5Vec3d___dealloc__(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "src/pyx/vec3d.pyx":34
 * 
 *     def __dealloc__(self):
 *          self.inst.reset()             # <<<<<<<<<<<<<<
 * 
 *     def set(self, double in_0 , double in_1 , double in_2 ):
 */
  __pyx_v_self->inst.reset();

  /* "src/pyx/vec3d.pyx":33
 *     cdef shared_ptr[_Vec3d] inst
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *          self.inst.reset()
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "src/pyx/vec3d.pyx":36
 *          self.inst.reset()
 * 
 *     def set(self, double in_0 , double in_1 , double in_2 ):             # <<<<<<<<<<<<<<
 *         assert isinstance(in_0, float), 'arg in_0 wrong type'
 *         assert isinstance(in_1, float), 'arg in_1 wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_5Vec3d_3set(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10sofacython_5Vec3d_3set(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_in_0;
  double __pyx_v_in_1;
  double __pyx_v_in_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_0,&__pyx_n_s_in_1,&__pyx_n_s_in_2,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set", 1, 3, 3, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set", 1, 3, 3, 2); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_in_0 = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_in_0 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_in_1 = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_in_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_in_2 = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_in_2 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sofacython.Vec3d.set", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10sofacython_5Vec3d_2set(((struct __pyx_obj_10sofacython_Vec3d *)__pyx_v_self), __pyx_v_in_0, __pyx_v_in_1, __pyx_v_in_2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_5Vec3d_2set(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self, double __pyx_v_in_0, double __pyx_v_in_1, double __pyx_v_in_2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set", 0);

  /* "src/pyx/vec3d.pyx":37
 * 
 *     def set(self, double in_0 , double in_1 , double in_2 ):
 *         assert isinstance(in_0, float), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(in_1, float), 'arg in_1 wrong type'
 *         assert isinstance(in_2, float), 'arg in_2 wrong type'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_in_0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_0_wrong_type);
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "src/pyx/vec3d.pyx":38
 *     def set(self, double in_0 , double in_1 , double in_2 ):
 *         assert isinstance(in_0, float), 'arg in_0 wrong type'
 *         assert isinstance(in_1, float), 'arg in_1 wrong type'             # <<<<<<<<<<<<<<
 *         assert isinstance(in_2, float), 'arg in_2 wrong type'
 *         self.inst.get().set((<double>in_0), (<double>in_1), (<double>in_2))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_in_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_1_wrong_type);
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "src/pyx/vec3d.pyx":39
 *         assert isinstance(in_0, float), 'arg in_0 wrong type'
 *         assert isinstance(in_1, float), 'arg in_1 wrong type'
 *         assert isinstance(in_2, float), 'arg in_2 wrong type'             # <<<<<<<<<<<<<<
 *         self.inst.get().set((<double>in_0), (<double>in_1), (<double>in_2))
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_in_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_2_wrong_type);
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "src/pyx/vec3d.pyx":40
 *         assert isinstance(in_1, float), 'arg in_1 wrong type'
 *         assert isinstance(in_2, float), 'arg in_2 wrong type'
 *         self.inst.get().set((<double>in_0), (<double>in_1), (<double>in_2))             # <<<<<<<<<<<<<<
 * 
 *     def __add__(Vec3d self, Vec3d other not None):
 */
  try {
    __pyx_v_self->inst.get()->set(((double)__pyx_v_in_0), ((double)__pyx_v_in_1), ((double)__pyx_v_in_2));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "src/pyx/vec3d.pyx":36
 *          self.inst.reset()
 * 
 *     def set(self, double in_0 , double in_1 , double in_2 ):             # <<<<<<<<<<<<<<
 *         assert isinstance(in_0, float), 'arg in_0 wrong type'
 *         assert isinstance(in_1, float), 'arg in_1 wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.Vec3d.set", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/vec3d.pyx":42
 *         self.inst.get().set((<double>in_0), (<double>in_1), (<double>in_2))
 * 
 *     def __add__(Vec3d self, Vec3d other not None):             # <<<<<<<<<<<<<<
 *         cdef _Vec3d  * this = self.inst.get()
 *         cdef _Vec3d * that = other.inst.get()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_5Vec3d_5__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_10sofacython_5Vec3d_5__add__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__add__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_10sofacython_Vec3d, 1, "self", 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_10sofacython_Vec3d, 0, "other", 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_10sofacython_5Vec3d_4__add__(((struct __pyx_obj_10sofacython_Vec3d *)__pyx_v_self), ((struct __pyx_obj_10sofacython_Vec3d *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_5Vec3d_4__add__(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self, struct __pyx_obj_10sofacython_Vec3d *__pyx_v_other) {
  sofa::defaulttype::Vec3d *__pyx_v_this;
  sofa::defaulttype::Vec3d *__pyx_v_that;
  struct __pyx_obj_10sofacython_Vec3d *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  sofa::defaulttype::Vec3d *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__add__", 0);

  /* "src/pyx/vec3d.pyx":43
 * 
 *     def __add__(Vec3d self, Vec3d other not None):
 *         cdef _Vec3d  * this = self.inst.get()             # <<<<<<<<<<<<<<
 *         cdef _Vec3d * that = other.inst.get()
 *         cdef Vec3d result = Vec3d.__new__(Vec3d)
 */
  __pyx_v_this = __pyx_v_self->inst.get();

  /* "src/pyx/vec3d.pyx":44
 *     def __add__(Vec3d self, Vec3d other not None):
 *         cdef _Vec3d  * this = self.inst.get()
 *         cdef _Vec3d * that = other.inst.get()             # <<<<<<<<<<<<<<
 *         cdef Vec3d result = Vec3d.__new__(Vec3d)
 *         result.inst = shared_ptr[_Vec3d](new _Vec3d(deref(this) + deref(that)))
 */
  __pyx_v_that = __pyx_v_other->inst.get();

  /* "src/pyx/vec3d.pyx":45
 *         cdef _Vec3d  * this = self.inst.get()
 *         cdef _Vec3d * that = other.inst.get()
 *         cdef Vec3d result = Vec3d.__new__(Vec3d)             # <<<<<<<<<<<<<<
 *         result.inst = shared_ptr[_Vec3d](new _Vec3d(deref(this) + deref(that)))
 *         return result
 */
  __pyx_t_1 = __pyx_tp_new_10sofacython_Vec3d(((PyTypeObject *)__pyx_ptype_10sofacython_Vec3d), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10sofacython_Vec3d)))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_result = ((struct __pyx_obj_10sofacython_Vec3d *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pyx/vec3d.pyx":46
 *         cdef _Vec3d * that = other.inst.get()
 *         cdef Vec3d result = Vec3d.__new__(Vec3d)
 *         result.inst = shared_ptr[_Vec3d](new _Vec3d(deref(this) + deref(that)))             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_2 = new sofa::defaulttype::Vec3d(((*__pyx_v_this) + (*__pyx_v_that)));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_result->inst = boost::shared_ptr<sofa::defaulttype::Vec3d> (__pyx_t_2);

  /* "src/pyx/vec3d.pyx":47
 *         cdef Vec3d result = Vec3d.__new__(Vec3d)
 *         result.inst = shared_ptr[_Vec3d](new _Vec3d(deref(this) + deref(that)))
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def __sub__(Vec3d self, Vec3d other not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "src/pyx/vec3d.pyx":42
 *         self.inst.get().set((<double>in_0), (<double>in_1), (<double>in_2))
 * 
 *     def __add__(Vec3d self, Vec3d other not None):             # <<<<<<<<<<<<<<
 *         cdef _Vec3d  * this = self.inst.get()
 *         cdef _Vec3d * that = other.inst.get()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.Vec3d.__add__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/vec3d.pyx":49
 *         return result
 * 
 *     def __sub__(Vec3d self, Vec3d other not None):             # <<<<<<<<<<<<<<
 *         cdef _Vec3d  * this = self.inst.get()
 *         cdef _Vec3d * that = other.inst.get()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_5Vec3d_7__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_10sofacython_5Vec3d_7__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__sub__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_10sofacython_Vec3d, 1, "self", 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_10sofacython_Vec3d, 0, "other", 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_10sofacython_5Vec3d_6__sub__(((struct __pyx_obj_10sofacython_Vec3d *)__pyx_v_self), ((struct __pyx_obj_10sofacython_Vec3d *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_5Vec3d_6__sub__(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self, struct __pyx_obj_10sofacython_Vec3d *__pyx_v_other) {
  sofa::defaulttype::Vec3d *__pyx_v_this;
  sofa::defaulttype::Vec3d *__pyx_v_that;
  struct __pyx_obj_10sofacython_Vec3d *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  sofa::defaulttype::Vec3d *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__sub__", 0);

  /* "src/pyx/vec3d.pyx":50
 * 
 *     def __sub__(Vec3d self, Vec3d other not None):
 *         cdef _Vec3d  * this = self.inst.get()             # <<<<<<<<<<<<<<
 *         cdef _Vec3d * that = other.inst.get()
 *         cdef Vec3d result = Vec3d.__new__(Vec3d)
 */
  __pyx_v_this = __pyx_v_self->inst.get();

  /* "src/pyx/vec3d.pyx":51
 *     def __sub__(Vec3d self, Vec3d other not None):
 *         cdef _Vec3d  * this = self.inst.get()
 *         cdef _Vec3d * that = other.inst.get()             # <<<<<<<<<<<<<<
 *         cdef Vec3d result = Vec3d.__new__(Vec3d)
 *         result.inst = shared_ptr[_Vec3d](new _Vec3d(deref(this) - deref(that)))
 */
  __pyx_v_that = __pyx_v_other->inst.get();

  /* "src/pyx/vec3d.pyx":52
 *         cdef _Vec3d  * this = self.inst.get()
 *         cdef _Vec3d * that = other.inst.get()
 *         cdef Vec3d result = Vec3d.__new__(Vec3d)             # <<<<<<<<<<<<<<
 *         result.inst = shared_ptr[_Vec3d](new _Vec3d(deref(this) - deref(that)))
 *         return result
 */
  __pyx_t_1 = __pyx_tp_new_10sofacython_Vec3d(((PyTypeObject *)__pyx_ptype_10sofacython_Vec3d), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10sofacython_Vec3d)))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_result = ((struct __pyx_obj_10sofacython_Vec3d *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pyx/vec3d.pyx":53
 *         cdef _Vec3d * that = other.inst.get()
 *         cdef Vec3d result = Vec3d.__new__(Vec3d)
 *         result.inst = shared_ptr[_Vec3d](new _Vec3d(deref(this) - deref(that)))             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  try {
    __pyx_t_2 = new sofa::defaulttype::Vec3d(((*__pyx_v_this) - (*__pyx_v_that)));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_result->inst = boost::shared_ptr<sofa::defaulttype::Vec3d> (__pyx_t_2);

  /* "src/pyx/vec3d.pyx":54
 *         cdef Vec3d result = Vec3d.__new__(Vec3d)
 *         result.inst = shared_ptr[_Vec3d](new _Vec3d(deref(this) - deref(that)))
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def normalize(Vec3d self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "src/pyx/vec3d.pyx":49
 *         return result
 * 
 *     def __sub__(Vec3d self, Vec3d other not None):             # <<<<<<<<<<<<<<
 *         cdef _Vec3d  * this = self.inst.get()
 *         cdef _Vec3d * that = other.inst.get()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.Vec3d.__sub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/vec3d.pyx":56
 *         return result
 * 
 *     def normalize(Vec3d self):             # <<<<<<<<<<<<<<
 *         return self.inst.get().normalize()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_5Vec3d_9normalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10sofacython_5Vec3d_9normalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_5Vec3d_8normalize(((struct __pyx_obj_10sofacython_Vec3d *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_5Vec3d_8normalize(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("normalize", 0);

  /* "src/pyx/vec3d.pyx":57
 * 
 *     def normalize(Vec3d self):
 *         return self.inst.get().normalize()             # <<<<<<<<<<<<<<
 * 
 *     def normalized(Vec3d self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->inst.get()->normalize()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyx/vec3d.pyx":56
 *         return result
 * 
 *     def normalize(Vec3d self):             # <<<<<<<<<<<<<<
 *         return self.inst.get().normalize()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.Vec3d.normalize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/vec3d.pyx":59
 *         return self.inst.get().normalize()
 * 
 *     def normalized(Vec3d self):             # <<<<<<<<<<<<<<
 *         cdef Vec3d cp = self.__copy__()
 *         if cp.normalize():
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_5Vec3d_11normalized(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10sofacython_5Vec3d_11normalized(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalized (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_5Vec3d_10normalized(((struct __pyx_obj_10sofacython_Vec3d *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_5Vec3d_10normalized(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self) {
  struct __pyx_obj_10sofacython_Vec3d *__pyx_v_cp = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("normalized", 0);

  /* "src/pyx/vec3d.pyx":60
 * 
 *     def normalized(Vec3d self):
 *         cdef Vec3d cp = self.__copy__()             # <<<<<<<<<<<<<<
 *         if cp.normalize():
 *                 return cp
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_copy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10sofacython_Vec3d))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_cp = ((struct __pyx_obj_10sofacython_Vec3d *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pyx/vec3d.pyx":61
 *     def normalized(Vec3d self):
 *         cdef Vec3d cp = self.__copy__()
 *         if cp.normalize():             # <<<<<<<<<<<<<<
 *                 return cp
 *         return None
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_cp), __pyx_n_s_normalize); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "src/pyx/vec3d.pyx":62
 *         cdef Vec3d cp = self.__copy__()
 *         if cp.normalize():
 *                 return cp             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_cp));
    __pyx_r = ((PyObject *)__pyx_v_cp);
    goto __pyx_L0;

    /* "src/pyx/vec3d.pyx":61
 *     def normalized(Vec3d self):
 *         cdef Vec3d cp = self.__copy__()
 *         if cp.normalize():             # <<<<<<<<<<<<<<
 *                 return cp
 *         return None
 */
  }

  /* "src/pyx/vec3d.pyx":63
 *         if cp.normalize():
 *                 return cp
 *         return None             # <<<<<<<<<<<<<<
 * 
 *     def mulscalar(Vec3d self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  /* "src/pyx/vec3d.pyx":59
 *         return self.inst.get().normalize()
 * 
 *     def normalized(Vec3d self):             # <<<<<<<<<<<<<<
 *         cdef Vec3d cp = self.__copy__()
 *         if cp.normalize():
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("sofacython.Vec3d.normalized", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_cp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/vec3d.pyx":65
 *         return None
 * 
 *     def mulscalar(Vec3d self, value):             # <<<<<<<<<<<<<<
 *         assert isinstance(value, (float, int)), 'arg value has a wrong type. int or float expected instead of '+str(type(value))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_5Vec3d_13mulscalar(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_10sofacython_5Vec3d_13mulscalar(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mulscalar (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_5Vec3d_12mulscalar(((struct __pyx_obj_10sofacython_Vec3d *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_5Vec3d_12mulscalar(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self, PyObject *__pyx_v_value) {
  struct __pyx_obj_10sofacython_Vec3d *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  double __pyx_t_7;
  double __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mulscalar", 0);

  /* "src/pyx/vec3d.pyx":66
 * 
 *     def mulscalar(Vec3d self, value):
 *         assert isinstance(value, (float, int)), 'arg value has a wrong type. int or float expected instead of '+str(type(value))             # <<<<<<<<<<<<<<
 * 
 *         cdef Vec3d result = Vec3d()
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyFloat_Check(__pyx_v_value); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyInt_Check(__pyx_v_value); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_value)));
      __Pyx_GIVEREF(((PyObject *)Py_TYPE(__pyx_v_value)));
      PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(__pyx_v_value)));
      __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Add(__pyx_kp_s_arg_value_has_a_wrong_type_int_o, __pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyTuple_Pack(1, __pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      PyErr_SetObject(PyExc_AssertionError, __pyx_t_5);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "src/pyx/vec3d.pyx":68
 *         assert isinstance(value, (float, int)), 'arg value has a wrong type. int or float expected instead of '+str(type(value))
 * 
 *         cdef Vec3d result = Vec3d()             # <<<<<<<<<<<<<<
 *         result.inst.get().set(self.inst.get().x(), self.inst.get().y(), self.inst.get().z())
 *         result.inst.get().eqmulscalar(<double>value)
 */
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_10sofacython_Vec3d), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_result = ((struct __pyx_obj_10sofacython_Vec3d *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "src/pyx/vec3d.pyx":69
 * 
 *         cdef Vec3d result = Vec3d()
 *         result.inst.get().set(self.inst.get().x(), self.inst.get().y(), self.inst.get().z())             # <<<<<<<<<<<<<<
 *         result.inst.get().eqmulscalar(<double>value)
 *         return result
 */
  try {
    __pyx_t_6 = __pyx_v_self->inst.get()->x();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  try {
    __pyx_t_7 = __pyx_v_self->inst.get()->y();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  try {
    __pyx_t_8 = __pyx_v_self->inst.get()->z();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  try {
    __pyx_v_result->inst.get()->set(__pyx_t_6, __pyx_t_7, __pyx_t_8);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "src/pyx/vec3d.pyx":70
 *         cdef Vec3d result = Vec3d()
 *         result.inst.get().set(self.inst.get().x(), self.inst.get().y(), self.inst.get().z())
 *         result.inst.get().eqmulscalar(<double>value)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_result->inst.get()->eqmulscalar(((double)__pyx_t_8));

  /* "src/pyx/vec3d.pyx":71
 *         result.inst.get().set(self.inst.get().x(), self.inst.get().y(), self.inst.get().z())
 *         result.inst.get().eqmulscalar(<double>value)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     def __div__(Vec3d self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "src/pyx/vec3d.pyx":65
 *         return None
 * 
 *     def mulscalar(Vec3d self, value):             # <<<<<<<<<<<<<<
 *         assert isinstance(value, (float, int)), 'arg value has a wrong type. int or float expected instead of '+str(type(value))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("sofacython.Vec3d.mulscalar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/vec3d.pyx":73
 *         return result
 * 
 *     def __div__(Vec3d self, value):             # <<<<<<<<<<<<<<
 *         assert isinstance(value, (float, int)), 'arg value has a wrong type. int or float expected instead of '+str(type(value))
 *         assert <double>value != 0.0, 'Division by zero'
 */

/* Python wrapper */
#if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
static PyObject *__pyx_pw_10sofacython_5Vec3d_15__div__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_10sofacython_5Vec3d_15__div__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__div__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_10sofacython_Vec3d, 1, "self", 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_10sofacython_5Vec3d_14__div__(((struct __pyx_obj_10sofacython_Vec3d *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY)*/

#if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
static PyObject *__pyx_pf_10sofacython_5Vec3d_14__div__(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__div__", 0);

  /* "src/pyx/vec3d.pyx":74
 * 
 *     def __div__(Vec3d self, value):
 *         assert isinstance(value, (float, int)), 'arg value has a wrong type. int or float expected instead of '+str(type(value))             # <<<<<<<<<<<<<<
 *         assert <double>value != 0.0, 'Division by zero'
 *         return self.mulscalar(1.0/<double>value)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyFloat_Check(__pyx_v_value); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyInt_Check(__pyx_v_value); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_value)));
      __Pyx_GIVEREF(((PyObject *)Py_TYPE(__pyx_v_value)));
      PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(__pyx_v_value)));
      __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Add(__pyx_kp_s_arg_value_has_a_wrong_type_int_o, __pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyTuple_Pack(1, __pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      PyErr_SetObject(PyExc_AssertionError, __pyx_t_5);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "src/pyx/vec3d.pyx":75
 *     def __div__(Vec3d self, value):
 *         assert isinstance(value, (float, int)), 'arg value has a wrong type. int or float expected instead of '+str(type(value))
 *         assert <double>value != 0.0, 'Division by zero'             # <<<<<<<<<<<<<<
 *         return self.mulscalar(1.0/<double>value)
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (unlikely(!((((double)__pyx_t_6) != 0.0) != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Division_by_zero);
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "src/pyx/vec3d.pyx":76
 *         assert isinstance(value, (float, int)), 'arg value has a wrong type. int or float expected instead of '+str(type(value))
 *         assert <double>value != 0.0, 'Division by zero'
 *         return self.mulscalar(1.0/<double>value)             # <<<<<<<<<<<<<<
 * 
 *     def elementmul(self, Vec3d other not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_mulscalar); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(((double)__pyx_t_6) == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_7 = PyFloat_FromDouble((1.0 / ((double)__pyx_t_6))); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_8) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_7); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "src/pyx/vec3d.pyx":73
 *         return result
 * 
 *     def __div__(Vec3d self, value):             # <<<<<<<<<<<<<<
 *         assert isinstance(value, (float, int)), 'arg value has a wrong type. int or float expected instead of '+str(type(value))
 *         assert <double>value != 0.0, 'Division by zero'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("sofacython.Vec3d.__div__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY)*/

/* "src/pyx/vec3d.pyx":78
 *         return self.mulscalar(1.0/<double>value)
 * 
 *     def elementmul(self, Vec3d other not None):             # <<<<<<<<<<<<<<
 *         cdef _Vec3d* a = self.inst.get()
 *         cdef _Vec3d* b = other.inst.get()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_5Vec3d_17elementmul(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_10sofacython_5Vec3d_17elementmul(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("elementmul (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_10sofacython_Vec3d, 0, "other", 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_10sofacython_5Vec3d_16elementmul(((struct __pyx_obj_10sofacython_Vec3d *)__pyx_v_self), ((struct __pyx_obj_10sofacython_Vec3d *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_5Vec3d_16elementmul(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self, struct __pyx_obj_10sofacython_Vec3d *__pyx_v_other) {
  sofa::defaulttype::Vec3d *__pyx_v_a;
  sofa::defaulttype::Vec3d *__pyx_v_b;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("elementmul", 0);

  /* "src/pyx/vec3d.pyx":79
 * 
 *     def elementmul(self, Vec3d other not None):
 *         cdef _Vec3d* a = self.inst.get()             # <<<<<<<<<<<<<<
 *         cdef _Vec3d* b = other.inst.get()
 * 
 */
  __pyx_v_a = __pyx_v_self->inst.get();

  /* "src/pyx/vec3d.pyx":80
 *     def elementmul(self, Vec3d other not None):
 *         cdef _Vec3d* a = self.inst.get()
 *         cdef _Vec3d* b = other.inst.get()             # <<<<<<<<<<<<<<
 * 
 *         return Vec3d(a.x()*b.x(), a.y()*b.y(), a.z()*b.z())
 */
  __pyx_v_b = __pyx_v_other->inst.get();

  /* "src/pyx/vec3d.pyx":82
 *         cdef _Vec3d* b = other.inst.get()
 * 
 *         return Vec3d(a.x()*b.x(), a.y()*b.y(), a.z()*b.z())             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_a->x();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  try {
    __pyx_t_2 = __pyx_v_b->x();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_3 = PyFloat_FromDouble((__pyx_t_1 * __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  try {
    __pyx_t_2 = __pyx_v_a->y();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  try {
    __pyx_t_1 = __pyx_v_b->y();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_4 = PyFloat_FromDouble((__pyx_t_2 * __pyx_t_1)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  try {
    __pyx_t_1 = __pyx_v_a->z();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  try {
    __pyx_t_2 = __pyx_v_b->z();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_5 = PyFloat_FromDouble((__pyx_t_1 * __pyx_t_2)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_10sofacython_Vec3d), __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "src/pyx/vec3d.pyx":78
 *         return self.mulscalar(1.0/<double>value)
 * 
 *     def elementmul(self, Vec3d other not None):             # <<<<<<<<<<<<<<
 *         cdef _Vec3d* a = self.inst.get()
 *         cdef _Vec3d* b = other.inst.get()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("sofacython.Vec3d.elementmul", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/vec3d.pyx":84
 *         return Vec3d(a.x()*b.x(), a.y()*b.y(), a.z()*b.z())
 * 
 *     def __mul__(self, value):             # <<<<<<<<<<<<<<
 *         if isinstance(value, (float, int)):
 *                 return self.mulscalar(value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_5Vec3d_19__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static PyObject *__pyx_pw_10sofacython_5Vec3d_19__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_5Vec3d_18__mul__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_5Vec3d_18__mul__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "src/pyx/vec3d.pyx":85
 * 
 *     def __mul__(self, value):
 *         if isinstance(value, (float, int)):             # <<<<<<<<<<<<<<
 *                 return self.mulscalar(value)
 *         elif isinstance(value, Vec3d):
 */
  __pyx_t_2 = PyFloat_Check(__pyx_v_value); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyInt_Check(__pyx_v_value); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "src/pyx/vec3d.pyx":86
 *     def __mul__(self, value):
 *         if isinstance(value, (float, int)):
 *                 return self.mulscalar(value)             # <<<<<<<<<<<<<<
 *         elif isinstance(value, Vec3d):
 *                 return self.elementmul(value)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_mulscalar); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_value); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_value);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "src/pyx/vec3d.pyx":85
 * 
 *     def __mul__(self, value):
 *         if isinstance(value, (float, int)):             # <<<<<<<<<<<<<<
 *                 return self.mulscalar(value)
 *         elif isinstance(value, Vec3d):
 */
  }

  /* "src/pyx/vec3d.pyx":87
 *         if isinstance(value, (float, int)):
 *                 return self.mulscalar(value)
 *         elif isinstance(value, Vec3d):             # <<<<<<<<<<<<<<
 *                 return self.elementmul(value)
 * 
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_10sofacython_Vec3d); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "src/pyx/vec3d.pyx":88
 *                 return self.mulscalar(value)
 *         elif isinstance(value, Vec3d):
 *                 return self.elementmul(value)             # <<<<<<<<<<<<<<
 * 
 *         raise TypeError("arg value has a wrong type. int or float or Vec3d expected instead of "+str(type(value)))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_elementmul); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_value); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_value);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "src/pyx/vec3d.pyx":87
 *         if isinstance(value, (float, int)):
 *                 return self.mulscalar(value)
 *         elif isinstance(value, Vec3d):             # <<<<<<<<<<<<<<
 *                 return self.elementmul(value)
 * 
 */
  }

  /* "src/pyx/vec3d.pyx":90
 *                 return self.elementmul(value)
 * 
 *         raise TypeError("arg value has a wrong type. int or float or Vec3d expected instead of "+str(type(value)))             # <<<<<<<<<<<<<<
 * 
 *     def norm(self):
 */
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_value)));
  __Pyx_GIVEREF(((PyObject *)Py_TYPE(__pyx_v_value)));
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(__pyx_v_value)));
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_kp_s_arg_value_has_a_wrong_type_int_o_2, __pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  {__pyx_filename = __pyx_f[1]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "src/pyx/vec3d.pyx":84
 *         return Vec3d(a.x()*b.x(), a.y()*b.y(), a.z()*b.z())
 * 
 *     def __mul__(self, value):             # <<<<<<<<<<<<<<
 *         if isinstance(value, (float, int)):
 *                 return self.mulscalar(value)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("sofacython.Vec3d.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/vec3d.pyx":92
 *         raise TypeError("arg value has a wrong type. int or float or Vec3d expected instead of "+str(type(value)))
 * 
 *     def norm(self):             # <<<<<<<<<<<<<<
 *         return self.inst.get().norm()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_5Vec3d_21norm(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10sofacython_5Vec3d_21norm(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("norm (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_5Vec3d_20norm(((struct __pyx_obj_10sofacython_Vec3d *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_5Vec3d_20norm(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("norm", 0);

  /* "src/pyx/vec3d.pyx":93
 * 
 *     def norm(self):
 *         return self.inst.get().norm()             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->inst.get()->norm()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyx/vec3d.pyx":92
 *         raise TypeError("arg value has a wrong type. int or float or Vec3d expected instead of "+str(type(value)))
 * 
 *     def norm(self):             # <<<<<<<<<<<<<<
 *         return self.inst.get().norm()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.Vec3d.norm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/vec3d.pyx":95
 *         return self.inst.get().norm()
 * 
 *     def __copy__(self):             # <<<<<<<<<<<<<<
 *        cdef Vec3d rv = Vec3d.__new__(Vec3d)
 *        rv.inst = shared_ptr[_Vec3d](new _Vec3d(deref(self.inst.get())))
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_5Vec3d_23__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10sofacython_5Vec3d_23__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_5Vec3d_22__copy__(((struct __pyx_obj_10sofacython_Vec3d *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_5Vec3d_22__copy__(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self) {
  struct __pyx_obj_10sofacython_Vec3d *__pyx_v_rv = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  sofa::defaulttype::Vec3d *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "src/pyx/vec3d.pyx":96
 * 
 *     def __copy__(self):
 *        cdef Vec3d rv = Vec3d.__new__(Vec3d)             # <<<<<<<<<<<<<<
 *        rv.inst = shared_ptr[_Vec3d](new _Vec3d(deref(self.inst.get())))
 *        return rv
 */
  __pyx_t_1 = __pyx_tp_new_10sofacython_Vec3d(((PyTypeObject *)__pyx_ptype_10sofacython_Vec3d), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10sofacython_Vec3d)))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_rv = ((struct __pyx_obj_10sofacython_Vec3d *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pyx/vec3d.pyx":97
 *     def __copy__(self):
 *        cdef Vec3d rv = Vec3d.__new__(Vec3d)
 *        rv.inst = shared_ptr[_Vec3d](new _Vec3d(deref(self.inst.get())))             # <<<<<<<<<<<<<<
 *        return rv
 * 
 */
  try {
    __pyx_t_2 = new sofa::defaulttype::Vec3d((*__pyx_v_self->inst.get()));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_rv->inst = boost::shared_ptr<sofa::defaulttype::Vec3d> (__pyx_t_2);

  /* "src/pyx/vec3d.pyx":98
 *        cdef Vec3d rv = Vec3d.__new__(Vec3d)
 *        rv.inst = shared_ptr[_Vec3d](new _Vec3d(deref(self.inst.get())))
 *        return rv             # <<<<<<<<<<<<<<
 * 
 *     def __deepcopy__(self, memo):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_rv));
  __pyx_r = ((PyObject *)__pyx_v_rv);
  goto __pyx_L0;

  /* "src/pyx/vec3d.pyx":95
 *         return self.inst.get().norm()
 * 
 *     def __copy__(self):             # <<<<<<<<<<<<<<
 *        cdef Vec3d rv = Vec3d.__new__(Vec3d)
 *        rv.inst = shared_ptr[_Vec3d](new _Vec3d(deref(self.inst.get())))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.Vec3d.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rv);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/vec3d.pyx":100
 *        return rv
 * 
 *     def __deepcopy__(self, memo):             # <<<<<<<<<<<<<<
 *        cdef Vec3d rv = Vec3d.__new__(Vec3d)
 *        rv.inst = shared_ptr[_Vec3d](new _Vec3d(deref(self.inst.get())))
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_5Vec3d_25__deepcopy__(PyObject *__pyx_v_self, PyObject *__pyx_v_memo); /*proto*/
static PyObject *__pyx_pw_10sofacython_5Vec3d_25__deepcopy__(PyObject *__pyx_v_self, PyObject *__pyx_v_memo) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__deepcopy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_5Vec3d_24__deepcopy__(((struct __pyx_obj_10sofacython_Vec3d *)__pyx_v_self), ((PyObject *)__pyx_v_memo));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_5Vec3d_24__deepcopy__(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_memo) {
  struct __pyx_obj_10sofacython_Vec3d *__pyx_v_rv = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  sofa::defaulttype::Vec3d *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__deepcopy__", 0);

  /* "src/pyx/vec3d.pyx":101
 * 
 *     def __deepcopy__(self, memo):
 *        cdef Vec3d rv = Vec3d.__new__(Vec3d)             # <<<<<<<<<<<<<<
 *        rv.inst = shared_ptr[_Vec3d](new _Vec3d(deref(self.inst.get())))
 *        return rv
 */
  __pyx_t_1 = __pyx_tp_new_10sofacython_Vec3d(((PyTypeObject *)__pyx_ptype_10sofacython_Vec3d), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10sofacython_Vec3d)))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_rv = ((struct __pyx_obj_10sofacython_Vec3d *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pyx/vec3d.pyx":102
 *     def __deepcopy__(self, memo):
 *        cdef Vec3d rv = Vec3d.__new__(Vec3d)
 *        rv.inst = shared_ptr[_Vec3d](new _Vec3d(deref(self.inst.get())))             # <<<<<<<<<<<<<<
 *        return rv
 * 
 */
  try {
    __pyx_t_2 = new sofa::defaulttype::Vec3d((*__pyx_v_self->inst.get()));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_rv->inst = boost::shared_ptr<sofa::defaulttype::Vec3d> (__pyx_t_2);

  /* "src/pyx/vec3d.pyx":103
 *        cdef Vec3d rv = Vec3d.__new__(Vec3d)
 *        rv.inst = shared_ptr[_Vec3d](new _Vec3d(deref(self.inst.get())))
 *        return rv             # <<<<<<<<<<<<<<
 * 
 *     def _init_0(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_rv));
  __pyx_r = ((PyObject *)__pyx_v_rv);
  goto __pyx_L0;

  /* "src/pyx/vec3d.pyx":100
 *        return rv
 * 
 *     def __deepcopy__(self, memo):             # <<<<<<<<<<<<<<
 *        cdef Vec3d rv = Vec3d.__new__(Vec3d)
 *        rv.inst = shared_ptr[_Vec3d](new _Vec3d(deref(self.inst.get())))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.Vec3d.__deepcopy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_rv);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/vec3d.pyx":105
 *        return rv
 * 
 *     def _init_0(self):             # <<<<<<<<<<<<<<
 *         self.inst = shared_ptr[_Vec3d](new _Vec3d())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_5Vec3d_27_init_0(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10sofacython_5Vec3d_27_init_0(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_0 (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_5Vec3d_26_init_0(((struct __pyx_obj_10sofacython_Vec3d *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_5Vec3d_26_init_0(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  sofa::defaulttype::Vec3d *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_init_0", 0);

  /* "src/pyx/vec3d.pyx":106
 * 
 *     def _init_0(self):
 *         self.inst = shared_ptr[_Vec3d](new _Vec3d())             # <<<<<<<<<<<<<<
 * 
 *     def _init_1(self, Vec3d in_0 ):
 */
  try {
    __pyx_t_1 = new sofa::defaulttype::Vec3d();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_self->inst = boost::shared_ptr<sofa::defaulttype::Vec3d> (__pyx_t_1);

  /* "src/pyx/vec3d.pyx":105
 *        return rv
 * 
 *     def _init_0(self):             # <<<<<<<<<<<<<<
 *         self.inst = shared_ptr[_Vec3d](new _Vec3d())
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("sofacython.Vec3d._init_0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/vec3d.pyx":108
 *         self.inst = shared_ptr[_Vec3d](new _Vec3d())
 * 
 *     def _init_1(self, Vec3d in_0 ):             # <<<<<<<<<<<<<<
 *         self.inst = shared_ptr[_Vec3d](new _Vec3d((deref(in_0.inst.get()))))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_5Vec3d_29_init_1(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0); /*proto*/
static PyObject *__pyx_pw_10sofacython_5Vec3d_29_init_1(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_1 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_0), __pyx_ptype_10sofacython_Vec3d, 1, "in_0", 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_10sofacython_5Vec3d_28_init_1(((struct __pyx_obj_10sofacython_Vec3d *)__pyx_v_self), ((struct __pyx_obj_10sofacython_Vec3d *)__pyx_v_in_0));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_5Vec3d_28_init_1(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self, struct __pyx_obj_10sofacython_Vec3d *__pyx_v_in_0) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  sofa::defaulttype::Vec3d *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_init_1", 0);

  /* "src/pyx/vec3d.pyx":109
 * 
 *     def _init_1(self, Vec3d in_0 ):
 *         self.inst = shared_ptr[_Vec3d](new _Vec3d((deref(in_0.inst.get()))))             # <<<<<<<<<<<<<<
 * 
 *     def _init_2(self, double in_0 , double in_1 , double in_2 ):
 */
  try {
    __pyx_t_1 = new sofa::defaulttype::Vec3d((*__pyx_v_in_0->inst.get()));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_self->inst = boost::shared_ptr<sofa::defaulttype::Vec3d> (__pyx_t_1);

  /* "src/pyx/vec3d.pyx":108
 *         self.inst = shared_ptr[_Vec3d](new _Vec3d())
 * 
 *     def _init_1(self, Vec3d in_0 ):             # <<<<<<<<<<<<<<
 *         self.inst = shared_ptr[_Vec3d](new _Vec3d((deref(in_0.inst.get()))))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("sofacython.Vec3d._init_1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/vec3d.pyx":111
 *         self.inst = shared_ptr[_Vec3d](new _Vec3d((deref(in_0.inst.get()))))
 * 
 *     def _init_2(self, double in_0 , double in_1 , double in_2 ):             # <<<<<<<<<<<<<<
 *         self.inst = shared_ptr[_Vec3d](new _Vec3d((<double>in_0), (<double>in_1), (<double>in_2)))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_5Vec3d_31_init_2(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10sofacython_5Vec3d_31_init_2(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_in_0;
  double __pyx_v_in_1;
  double __pyx_v_in_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_2 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_in_0,&__pyx_n_s_in_1,&__pyx_n_s_in_2,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_init_2", 1, 3, 3, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_in_2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_init_2", 1, 3, 3, 2); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_init_2") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_in_0 = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_in_0 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_in_1 = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_in_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_in_2 = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_in_2 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_init_2", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sofacython.Vec3d._init_2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10sofacython_5Vec3d_30_init_2(((struct __pyx_obj_10sofacython_Vec3d *)__pyx_v_self), __pyx_v_in_0, __pyx_v_in_1, __pyx_v_in_2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_5Vec3d_30_init_2(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self, double __pyx_v_in_0, double __pyx_v_in_1, double __pyx_v_in_2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  sofa::defaulttype::Vec3d *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_init_2", 0);

  /* "src/pyx/vec3d.pyx":112
 * 
 *     def _init_2(self, double in_0 , double in_1 , double in_2 ):
 *         self.inst = shared_ptr[_Vec3d](new _Vec3d((<double>in_0), (<double>in_1), (<double>in_2)))             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args):
 */
  try {
    __pyx_t_1 = new sofa::defaulttype::Vec3d(((double)__pyx_v_in_0), ((double)__pyx_v_in_1), ((double)__pyx_v_in_2));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_self->inst = boost::shared_ptr<sofa::defaulttype::Vec3d> (__pyx_t_1);

  /* "src/pyx/vec3d.pyx":111
 *         self.inst = shared_ptr[_Vec3d](new _Vec3d((deref(in_0.inst.get()))))
 * 
 *     def _init_2(self, double in_0 , double in_1 , double in_2 ):             # <<<<<<<<<<<<<<
 *         self.inst = shared_ptr[_Vec3d](new _Vec3d((<double>in_0), (<double>in_1), (<double>in_2)))
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("sofacython.Vec3d._init_2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/vec3d.pyx":114
 *         self.inst = shared_ptr[_Vec3d](new _Vec3d((<double>in_0), (<double>in_1), (<double>in_2)))
 * 
 *     def __init__(self, *args):             # <<<<<<<<<<<<<<
 *         if not args:
 *              self._init_0(*args)
 */

/* Python wrapper */
static int __pyx_pw_10sofacython_5Vec3d_33__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10sofacython_5Vec3d_33__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_10sofacython_5Vec3d_32__init__(((struct __pyx_obj_10sofacython_Vec3d *)__pyx_v_self), __pyx_v_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10sofacython_5Vec3d_32__init__(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self, PyObject *__pyx_v_args) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "src/pyx/vec3d.pyx":115
 * 
 *     def __init__(self, *args):
 *         if not args:             # <<<<<<<<<<<<<<
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], Vec3d)):
 */
  __pyx_t_1 = (__pyx_v_args != Py_None) && (PyTuple_GET_SIZE(__pyx_v_args) != 0);
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "src/pyx/vec3d.pyx":116
 *     def __init__(self, *args):
 *         if not args:
 *              self._init_0(*args)             # <<<<<<<<<<<<<<
 *         elif (len(args)==1) and (isinstance(args[0], Vec3d)):
 *              self._init_1(*args)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_v_args, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "src/pyx/vec3d.pyx":115
 * 
 *     def __init__(self, *args):
 *         if not args:             # <<<<<<<<<<<<<<
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], Vec3d)):
 */
    goto __pyx_L3;
  }

  /* "src/pyx/vec3d.pyx":117
 *         if not args:
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], Vec3d)):             # <<<<<<<<<<<<<<
 *              self._init_1(*args)
 *         elif (len(args)==1) and (isinstance(args[0], list)):
 */
  __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = ((__pyx_t_5 == 1) != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_t_4, __pyx_ptype_10sofacython_Vec3d); 
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = (__pyx_t_1 != 0);
  __pyx_t_2 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "src/pyx/vec3d.pyx":118
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], Vec3d)):
 *              self._init_1(*args)             # <<<<<<<<<<<<<<
 *         elif (len(args)==1) and (isinstance(args[0], list)):
 *              self._init_2(float(args[0][0]), float(args[0][1]), float(args[0][2]))
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_v_args, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "src/pyx/vec3d.pyx":117
 *         if not args:
 *              self._init_0(*args)
 *         elif (len(args)==1) and (isinstance(args[0], Vec3d)):             # <<<<<<<<<<<<<<
 *              self._init_1(*args)
 *         elif (len(args)==1) and (isinstance(args[0], list)):
 */
    goto __pyx_L3;
  }

  /* "src/pyx/vec3d.pyx":119
 *         elif (len(args)==1) and (isinstance(args[0], Vec3d)):
 *              self._init_1(*args)
 *         elif (len(args)==1) and (isinstance(args[0], list)):             # <<<<<<<<<<<<<<
 *              self._init_2(float(args[0][0]), float(args[0][1]), float(args[0][2]))
 *         elif (len(args)==3) and (isinstance(args[0], (float,int))) and (isinstance(args[1], (float,int))) and (isinstance(args[2], (float,int))):
 */
  __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = ((__pyx_t_5 == 1) != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = PyList_Check(__pyx_t_3); 
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = (__pyx_t_6 != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_2) {

    /* "src/pyx/vec3d.pyx":120
 *              self._init_1(*args)
 *         elif (len(args)==1) and (isinstance(args[0], list)):
 *              self._init_2(float(args[0][0]), float(args[0][1]), float(args[0][2]))             # <<<<<<<<<<<<<<
 *         elif (len(args)==3) and (isinstance(args[0], (float,int))) and (isinstance(args[1], (float,int))) and (isinstance(args[2], (float,int))):
 *              self._init_2(*args)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_7, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyNumber_Float(__pyx_t_8); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_8, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyNumber_Float(__pyx_t_9); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_9, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyNumber_Float(__pyx_t_10); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_5 = 1;
      }
    }
    __pyx_t_11 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    if (__pyx_t_10) {
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10); __pyx_t_10 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_5, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_5, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_11, 2+__pyx_t_5, __pyx_t_9);
    __pyx_t_7 = 0;
    __pyx_t_8 = 0;
    __pyx_t_9 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_11, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "src/pyx/vec3d.pyx":119
 *         elif (len(args)==1) and (isinstance(args[0], Vec3d)):
 *              self._init_1(*args)
 *         elif (len(args)==1) and (isinstance(args[0], list)):             # <<<<<<<<<<<<<<
 *              self._init_2(float(args[0][0]), float(args[0][1]), float(args[0][2]))
 *         elif (len(args)==3) and (isinstance(args[0], (float,int))) and (isinstance(args[1], (float,int))) and (isinstance(args[2], (float,int))):
 */
    goto __pyx_L3;
  }

  /* "src/pyx/vec3d.pyx":121
 *         elif (len(args)==1) and (isinstance(args[0], list)):
 *              self._init_2(float(args[0][0]), float(args[0][1]), float(args[0][2]))
 *         elif (len(args)==3) and (isinstance(args[0], (float,int))) and (isinstance(args[1], (float,int))) and (isinstance(args[2], (float,int))):             # <<<<<<<<<<<<<<
 *              self._init_2(*args)
 *         else:
 */
  __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = ((__pyx_t_5 == 3) != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = PyFloat_Check(__pyx_t_3); 
  __pyx_t_12 = (__pyx_t_6 != 0);
  if (!__pyx_t_12) {
  } else {
    __pyx_t_1 = __pyx_t_12;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_12 = PyInt_Check(__pyx_t_3); 
  __pyx_t_6 = (__pyx_t_12 != 0);
  __pyx_t_1 = __pyx_t_6;
  __pyx_L11_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyFloat_Check(__pyx_t_3); 
  __pyx_t_12 = (__pyx_t_1 != 0);
  if (!__pyx_t_12) {
  } else {
    __pyx_t_6 = __pyx_t_12;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_12 = PyInt_Check(__pyx_t_3); 
  __pyx_t_1 = (__pyx_t_12 != 0);
  __pyx_t_6 = __pyx_t_1;
  __pyx_L14_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = (__pyx_t_6 != 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = PyFloat_Check(__pyx_t_3); 
  __pyx_t_12 = (__pyx_t_6 != 0);
  if (!__pyx_t_12) {
  } else {
    __pyx_t_1 = __pyx_t_12;
    goto __pyx_L16_bool_binop_done;
  }
  __pyx_t_12 = PyInt_Check(__pyx_t_3); 
  __pyx_t_6 = (__pyx_t_12 != 0);
  __pyx_t_1 = __pyx_t_6;
  __pyx_L16_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = (__pyx_t_1 != 0);
  __pyx_t_2 = __pyx_t_6;
  __pyx_L8_bool_binop_done:;
  if (__pyx_t_2) {

    /* "src/pyx/vec3d.pyx":122
 *              self._init_2(float(args[0][0]), float(args[0][1]), float(args[0][2]))
 *         elif (len(args)==3) and (isinstance(args[0], (float,int))) and (isinstance(args[1], (float,int))) and (isinstance(args[2], (float,int))):
 *              self._init_2(*args)             # <<<<<<<<<<<<<<
 *         else:
 *                raise Exception('can not handle type of %s' % (args,))
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_v_args, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "src/pyx/vec3d.pyx":121
 *         elif (len(args)==1) and (isinstance(args[0], list)):
 *              self._init_2(float(args[0][0]), float(args[0][1]), float(args[0][2]))
 *         elif (len(args)==3) and (isinstance(args[0], (float,int))) and (isinstance(args[1], (float,int))) and (isinstance(args[2], (float,int))):             # <<<<<<<<<<<<<<
 *              self._init_2(*args)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "src/pyx/vec3d.pyx":124
 *              self._init_2(*args)
 *         else:
 *                raise Exception('can not handle type of %s' % (args,))             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, index, value):
 */
  /*else*/ {
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_args);
    __Pyx_GIVEREF(__pyx_v_args);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_args);
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_can_not_handle_type_of_s, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "src/pyx/vec3d.pyx":114
 *         self.inst = shared_ptr[_Vec3d](new _Vec3d((<double>in_0), (<double>in_1), (<double>in_2)))
 * 
 *     def __init__(self, *args):             # <<<<<<<<<<<<<<
 *         if not args:
 *              self._init_0(*args)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("sofacython.Vec3d.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/vec3d.pyx":126
 *                raise Exception('can not handle type of %s' % (args,))
 * 
 *     def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *         assert isinstance(index, (int,long)), 'arg index has a wrong type. int is expected instead of '+str(type(index))
 *         assert isinstance(value, (float, int)), 'arg value has a wrong type. int or float expected instead of '+str(type(value))
 */

/* Python wrapper */
static int __pyx_pw_10sofacython_5Vec3d_35__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10sofacython_5Vec3d_35__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_5Vec3d_34__setitem__(((struct __pyx_obj_10sofacython_Vec3d *)__pyx_v_self), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10sofacython_5Vec3d_34__setitem__(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "src/pyx/vec3d.pyx":127
 * 
 *     def __setitem__(self, index, value):
 *         assert isinstance(index, (int,long)), 'arg index has a wrong type. int is expected instead of '+str(type(index))             # <<<<<<<<<<<<<<
 *         assert isinstance(value, (float, int)), 'arg value has a wrong type. int or float expected instead of '+str(type(value))
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_index); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_index); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_index)));
      __Pyx_GIVEREF(((PyObject *)Py_TYPE(__pyx_v_index)));
      PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)Py_TYPE(__pyx_v_index)));
      __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Add(__pyx_kp_s_arg_index_has_a_wrong_type_int_i, __pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyTuple_Pack(1, __pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      PyErr_SetObject(PyExc_AssertionError, __pyx_t_5);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "src/pyx/vec3d.pyx":128
 *     def __setitem__(self, index, value):
 *         assert isinstance(index, (int,long)), 'arg index has a wrong type. int is expected instead of '+str(type(index))
 *         assert isinstance(value, (float, int)), 'arg value has a wrong type. int or float expected instead of '+str(type(value))             # <<<<<<<<<<<<<<
 * 
 *         if index >= 3 or index < 0:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyFloat_Check(__pyx_v_value); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = PyInt_Check(__pyx_v_value); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L5_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_value)));
      __Pyx_GIVEREF(((PyObject *)Py_TYPE(__pyx_v_value)));
      PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)Py_TYPE(__pyx_v_value)));
      __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyNumber_Add(__pyx_kp_s_arg_value_has_a_wrong_type_int_o, __pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyTuple_Pack(1, __pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      PyErr_SetObject(PyExc_AssertionError, __pyx_t_4);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "src/pyx/vec3d.pyx":130
 *         assert isinstance(value, (float, int)), 'arg value has a wrong type. int or float expected instead of '+str(type(value))
 * 
 *         if index >= 3 or index < 0:             # <<<<<<<<<<<<<<
 *                 raise IndexError("Index ["+str(index)+"] is invalid as it should lie in the [0,3] interval.")
 * 
 */
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_index, __pyx_int_3, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_index, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L8_bool_binop_done:;
  if (__pyx_t_1) {

    /* "src/pyx/vec3d.pyx":131
 * 
 *         if index >= 3 or index < 0:
 *                 raise IndexError("Index ["+str(index)+"] is invalid as it should lie in the [0,3] interval.")             # <<<<<<<<<<<<<<
 * 
 *         deref(self.inst.get())[(<int>index)] = (<double>value)
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_index);
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_kp_s_Index, __pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_is_invalid_as_it_should_lie_in); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "src/pyx/vec3d.pyx":130
 *         assert isinstance(value, (float, int)), 'arg value has a wrong type. int or float expected instead of '+str(type(value))
 * 
 *         if index >= 3 or index < 0:             # <<<<<<<<<<<<<<
 *                 raise IndexError("Index ["+str(index)+"] is invalid as it should lie in the [0,3] interval.")
 * 
 */
  }

  /* "src/pyx/vec3d.pyx":133
 *                 raise IndexError("Index ["+str(index)+"] is invalid as it should lie in the [0,3] interval.")
 * 
 *         deref(self.inst.get())[(<int>index)] = (<double>value)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self,  in_0 ):
 */
  __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_index); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    ((*__pyx_v_self->inst.get())[((int)__pyx_t_7)]) = ((double)__pyx_t_6);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "src/pyx/vec3d.pyx":126
 *                raise Exception('can not handle type of %s' % (args,))
 * 
 *     def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *         assert isinstance(index, (int,long)), 'arg index has a wrong type. int is expected instead of '+str(type(index))
 *         assert isinstance(value, (float, int)), 'arg value has a wrong type. int or float expected instead of '+str(type(value))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("sofacython.Vec3d.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/vec3d.pyx":135
 *         deref(self.inst.get())[(<int>index)] = (<double>value)
 * 
 *     def __getitem__(self,  in_0 ):             # <<<<<<<<<<<<<<
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 *         if in_0 >= 3 or in_0 < 0:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_5Vec3d_37__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0); /*proto*/
static PyObject *__pyx_pw_10sofacython_5Vec3d_37__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_in_0) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_5Vec3d_36__getitem__(((struct __pyx_obj_10sofacython_Vec3d *)__pyx_v_self), ((PyObject *)__pyx_v_in_0));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_5Vec3d_36__getitem__(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self, PyObject *__pyx_v_in_0) {
  CYTHON_UNUSED long __pyx_v__idx;
  double __pyx_v__r;
  double __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "src/pyx/vec3d.pyx":136
 * 
 *     def __getitem__(self,  in_0 ):
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'             # <<<<<<<<<<<<<<
 *         if in_0 >= 3 or in_0 < 0:
 *                 raise Exception("Index is too big for this vector of size 3")
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_in_0); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_in_0); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_in_0_wrong_type);
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "src/pyx/vec3d.pyx":137
 *     def __getitem__(self,  in_0 ):
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 *         if in_0 >= 3 or in_0 < 0:             # <<<<<<<<<<<<<<
 *                 raise Exception("Index is too big for this vector of size 3")
 * 
 */
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_in_0, __pyx_int_3, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_in_0, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_1) {

    /* "src/pyx/vec3d.pyx":138
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 *         if in_0 >= 3 or in_0 < 0:
 *                 raise Exception("Index is too big for this vector of size 3")             # <<<<<<<<<<<<<<
 * 
 *         cdef long _idx = (<int>in_0)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "src/pyx/vec3d.pyx":137
 *     def __getitem__(self,  in_0 ):
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 *         if in_0 >= 3 or in_0 < 0:             # <<<<<<<<<<<<<<
 *                 raise Exception("Index is too big for this vector of size 3")
 * 
 */
  }

  /* "src/pyx/vec3d.pyx":140
 *                 raise Exception("Index is too big for this vector of size 3")
 * 
 *         cdef long _idx = (<int>in_0)             # <<<<<<<<<<<<<<
 *         cdef double _r = deref(self.inst.get())[(<int>in_0)]
 *         py_result = <double>_r
 */
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_in_0); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v__idx = ((int)__pyx_t_5);

  /* "src/pyx/vec3d.pyx":141
 * 
 *         cdef long _idx = (<int>in_0)
 *         cdef double _r = deref(self.inst.get())[(<int>in_0)]             # <<<<<<<<<<<<<<
 *         py_result = <double>_r
 *         return py_result
 */
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_in_0); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_t_6 = (*__pyx_v_self->inst.get())[((int)__pyx_t_5)];
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_6;

  /* "src/pyx/vec3d.pyx":142
 *         cdef long _idx = (<int>in_0)
 *         cdef double _r = deref(self.inst.get())[(<int>in_0)]
 *         py_result = <double>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((double)__pyx_v__r);

  /* "src/pyx/vec3d.pyx":143
 *         cdef double _r = deref(self.inst.get())[(<int>in_0)]
 *         py_result = <double>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_py_result); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "src/pyx/vec3d.pyx":135
 *         deref(self.inst.get())[(<int>index)] = (<double>value)
 * 
 *     def __getitem__(self,  in_0 ):             # <<<<<<<<<<<<<<
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 *         if in_0 >= 3 or in_0 < 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("sofacython.Vec3d.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/vec3d.pyx":145
 *         return py_result
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return 3
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_10sofacython_5Vec3d_39__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_10sofacython_5Vec3d_39__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_5Vec3d_38__len__(((struct __pyx_obj_10sofacython_Vec3d *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_10sofacython_5Vec3d_38__len__(CYTHON_UNUSED struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "src/pyx/vec3d.pyx":146
 * 
 *     def __len__(self):
 *         return 3             # <<<<<<<<<<<<<<
 * 
 *     def y(self):
 */
  __pyx_r = 3;
  goto __pyx_L0;

  /* "src/pyx/vec3d.pyx":145
 *         return py_result
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return 3
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/vec3d.pyx":148
 *         return 3
 * 
 *     def y(self):             # <<<<<<<<<<<<<<
 *         cdef double _r = self.inst.get().y()
 *         py_result = <double>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_5Vec3d_41y(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10sofacython_5Vec3d_41y(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("y (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_5Vec3d_40y(((struct __pyx_obj_10sofacython_Vec3d *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_5Vec3d_40y(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self) {
  double __pyx_v__r;
  double __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("y", 0);

  /* "src/pyx/vec3d.pyx":149
 * 
 *     def y(self):
 *         cdef double _r = self.inst.get().y()             # <<<<<<<<<<<<<<
 *         py_result = <double>_r
 *         return py_result
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->y();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_1;

  /* "src/pyx/vec3d.pyx":150
 *     def y(self):
 *         cdef double _r = self.inst.get().y()
 *         py_result = <double>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((double)__pyx_v__r);

  /* "src/pyx/vec3d.pyx":151
 *         cdef double _r = self.inst.get().y()
 *         py_result = <double>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def x(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pyx/vec3d.pyx":148
 *         return 3
 * 
 *     def y(self):             # <<<<<<<<<<<<<<
 *         cdef double _r = self.inst.get().y()
 *         py_result = <double>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("sofacython.Vec3d.y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/vec3d.pyx":153
 *         return py_result
 * 
 *     def x(self):             # <<<<<<<<<<<<<<
 *         cdef double _r = self.inst.get().x()
 *         py_result = <double>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_5Vec3d_43x(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10sofacython_5Vec3d_43x(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("x (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_5Vec3d_42x(((struct __pyx_obj_10sofacython_Vec3d *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_5Vec3d_42x(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self) {
  double __pyx_v__r;
  double __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("x", 0);

  /* "src/pyx/vec3d.pyx":154
 * 
 *     def x(self):
 *         cdef double _r = self.inst.get().x()             # <<<<<<<<<<<<<<
 *         py_result = <double>_r
 *         return py_result
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->x();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_1;

  /* "src/pyx/vec3d.pyx":155
 *     def x(self):
 *         cdef double _r = self.inst.get().x()
 *         py_result = <double>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((double)__pyx_v__r);

  /* "src/pyx/vec3d.pyx":156
 *         cdef double _r = self.inst.get().x()
 *         py_result = <double>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def z(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pyx/vec3d.pyx":153
 *         return py_result
 * 
 *     def x(self):             # <<<<<<<<<<<<<<
 *         cdef double _r = self.inst.get().x()
 *         py_result = <double>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("sofacython.Vec3d.x", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/vec3d.pyx":158
 *         return py_result
 * 
 *     def z(self):             # <<<<<<<<<<<<<<
 *         cdef double _r = self.inst.get().z()
 *         py_result = <double>_r
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_5Vec3d_45z(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10sofacython_5Vec3d_45z(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("z (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_5Vec3d_44z(((struct __pyx_obj_10sofacython_Vec3d *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_5Vec3d_44z(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self) {
  double __pyx_v__r;
  double __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("z", 0);

  /* "src/pyx/vec3d.pyx":159
 * 
 *     def z(self):
 *         cdef double _r = self.inst.get().z()             # <<<<<<<<<<<<<<
 *         py_result = <double>_r
 *         return py_result
 */
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->z();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v__r = __pyx_t_1;

  /* "src/pyx/vec3d.pyx":160
 *     def z(self):
 *         cdef double _r = self.inst.get().z()
 *         py_result = <double>_r             # <<<<<<<<<<<<<<
 *         return py_result
 * 
 */
  __pyx_v_py_result = ((double)__pyx_v__r);

  /* "src/pyx/vec3d.pyx":161
 *         cdef double _r = self.inst.get().z()
 *         py_result = <double>_r
 *         return py_result             # <<<<<<<<<<<<<<
 * 
 *     def xy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_py_result); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pyx/vec3d.pyx":158
 *         return py_result
 * 
 *     def z(self):             # <<<<<<<<<<<<<<
 *         cdef double _r = self.inst.get().z()
 *         py_result = <double>_r
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("sofacython.Vec3d.z", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/vec3d.pyx":163
 *         return py_result
 * 
 *     def xy(self):             # <<<<<<<<<<<<<<
 *         return [<double>self.inst.get().x(), <double>self.inst.get().y()]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_5Vec3d_47xy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10sofacython_5Vec3d_47xy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("xy (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_5Vec3d_46xy(((struct __pyx_obj_10sofacython_Vec3d *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_5Vec3d_46xy(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("xy", 0);

  /* "src/pyx/vec3d.pyx":164
 * 
 *     def xy(self):
 *         return [<double>self.inst.get().x(), <double>self.inst.get().y()]             # <<<<<<<<<<<<<<
 * 
 *     def xyz(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->x();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = PyFloat_FromDouble(((double)__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->y();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_3 = PyFloat_FromDouble(((double)__pyx_t_1)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyList_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "src/pyx/vec3d.pyx":163
 *         return py_result
 * 
 *     def xy(self):             # <<<<<<<<<<<<<<
 *         return [<double>self.inst.get().x(), <double>self.inst.get().y()]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("sofacython.Vec3d.xy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/vec3d.pyx":166
 *         return [<double>self.inst.get().x(), <double>self.inst.get().y()]
 * 
 *     def xyz(self):             # <<<<<<<<<<<<<<
 *         return [<double>self.inst.get().x(), <double>self.inst.get().y(), <double>self.inst.get().z()]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_5Vec3d_49xyz(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10sofacython_5Vec3d_49xyz(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("xyz (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_5Vec3d_48xyz(((struct __pyx_obj_10sofacython_Vec3d *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_5Vec3d_48xyz(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("xyz", 0);

  /* "src/pyx/vec3d.pyx":167
 * 
 *     def xyz(self):
 *         return [<double>self.inst.get().x(), <double>self.inst.get().y(), <double>self.inst.get().z()]             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->x();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_2 = PyFloat_FromDouble(((double)__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->y();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_3 = PyFloat_FromDouble(((double)__pyx_t_1)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  try {
    __pyx_t_1 = __pyx_v_self->inst.get()->z();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_4 = PyFloat_FromDouble(((double)__pyx_t_1)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "src/pyx/vec3d.pyx":166
 *         return [<double>self.inst.get().x(), <double>self.inst.get().y()]
 * 
 *     def xyz(self):             # <<<<<<<<<<<<<<
 *         return [<double>self.inst.get().x(), <double>self.inst.get().y(), <double>self.inst.get().z()]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("sofacython.Vec3d.xyz", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/vec3d.pyx":169
 *         return [<double>self.inst.get().x(), <double>self.inst.get().y(), <double>self.inst.get().z()]
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "({:2.2f}, {:2.2f}, {:2.2f})".format(self.x(),self.y(), self.z())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_5Vec3d_51__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10sofacython_5Vec3d_51__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_5Vec3d_50__str__(((struct __pyx_obj_10sofacython_Vec3d *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_5Vec3d_50__str__(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "src/pyx/vec3d.pyx":170
 * 
 *     def __str__(self):
 *         return "({:2.2f}, {:2.2f}, {:2.2f})".format(self.x(),self.y(), self.z())             # <<<<<<<<<<<<<<
 * 
 *     def distanceTo(self, Vec3d aPoint):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_2_2f_2_2f_2_2f, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_x); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_y); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (__pyx_t_6) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_z); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_8 = 1;
    }
  }
  __pyx_t_7 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  if (__pyx_t_6) {
    __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
  }
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_8, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_8, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_8, __pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyx/vec3d.pyx":169
 *         return [<double>self.inst.get().x(), <double>self.inst.get().y(), <double>self.inst.get().z()]
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "({:2.2f}, {:2.2f}, {:2.2f})".format(self.x(),self.y(), self.z())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("sofacython.Vec3d.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/vec3d.pyx":172
 *         return "({:2.2f}, {:2.2f}, {:2.2f})".format(self.x(),self.y(), self.z())
 * 
 *     def distanceTo(self, Vec3d aPoint):             # <<<<<<<<<<<<<<
 *         return (self-aPoint).norm()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_5Vec3d_53distanceTo(PyObject *__pyx_v_self, PyObject *__pyx_v_aPoint); /*proto*/
static PyObject *__pyx_pw_10sofacython_5Vec3d_53distanceTo(PyObject *__pyx_v_self, PyObject *__pyx_v_aPoint) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distanceTo (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_aPoint), __pyx_ptype_10sofacython_Vec3d, 1, "aPoint", 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_10sofacython_5Vec3d_52distanceTo(((struct __pyx_obj_10sofacython_Vec3d *)__pyx_v_self), ((struct __pyx_obj_10sofacython_Vec3d *)__pyx_v_aPoint));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_5Vec3d_52distanceTo(struct __pyx_obj_10sofacython_Vec3d *__pyx_v_self, struct __pyx_obj_10sofacython_Vec3d *__pyx_v_aPoint) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distanceTo", 0);

  /* "src/pyx/vec3d.pyx":173
 * 
 *     def distanceTo(self, Vec3d aPoint):
 *         return (self-aPoint).norm()             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyNumber_Subtract(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_aPoint)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_norm); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyx/vec3d.pyx":172
 *         return "({:2.2f}, {:2.2f}, {:2.2f})".format(self.x(),self.y(), self.z())
 * 
 *     def distanceTo(self, Vec3d aPoint):             # <<<<<<<<<<<<<<
 *         return (self-aPoint).norm()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("sofacython.Vec3d.distanceTo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/base.pyx":20
 *     cdef _Base* realptr
 * 
 *     def findData(self, name):             # <<<<<<<<<<<<<<
 *                 """ Searchs and returns for a data field given its name
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_4Base_1findData(PyObject *__pyx_v_self, PyObject *__pyx_v_name); /*proto*/
static char __pyx_doc_10sofacython_4Base_findData[] = " Searchs and returns for a data field given its name\n                        \n                    example:\n                        obj.findData(\"template\")    \n                ";
static PyObject *__pyx_pw_10sofacython_4Base_1findData(PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("findData (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_4Base_findData(((struct __pyx_obj_10sofacython_Base *)__pyx_v_self), ((PyObject *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_4Base_findData(struct __pyx_obj_10sofacython_Base *__pyx_v_self, PyObject *__pyx_v_name) {
  sofa::core::objectmodel::BaseData *__pyx_v_data;
  struct __pyx_obj_10sofacython_BaseData *__pyx_v_py_data = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("findData", 0);

  /* "src/pyx/base.pyx":26
 *                         obj.findData("template")
 *                 """
 *                 cdef _BaseData* data = self.realptr.findData(name)             # <<<<<<<<<<<<<<
 *                 if data==NULL:
 *                         return None
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_name); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_data = __pyx_v_self->realptr->findData(__pyx_t_1);

  /* "src/pyx/base.pyx":27
 *                 """
 *                 cdef _BaseData* data = self.realptr.findData(name)
 *                 if data==NULL:             # <<<<<<<<<<<<<<
 *                         return None
 *                 py_data = BaseData()
 */
  __pyx_t_2 = ((__pyx_v_data == NULL) != 0);
  if (__pyx_t_2) {

    /* "src/pyx/base.pyx":28
 *                 cdef _BaseData* data = self.realptr.findData(name)
 *                 if data==NULL:
 *                         return None             # <<<<<<<<<<<<<<
 *                 py_data = BaseData()
 *                 py_data.realptr = data
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "src/pyx/base.pyx":27
 *                 """
 *                 cdef _BaseData* data = self.realptr.findData(name)
 *                 if data==NULL:             # <<<<<<<<<<<<<<
 *                         return None
 *                 py_data = BaseData()
 */
  }

  /* "src/pyx/base.pyx":29
 *                 if data==NULL:
 *                         return None
 *                 py_data = BaseData()             # <<<<<<<<<<<<<<
 *                 py_data.realptr = data
 *                 return py_data
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_10sofacython_BaseData), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_py_data = ((struct __pyx_obj_10sofacython_BaseData *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "src/pyx/base.pyx":30
 *                         return None
 *                 py_data = BaseData()
 *                 py_data.realptr = data             # <<<<<<<<<<<<<<
 *                 return py_data
 * 
 */
  __pyx_v_py_data->realptr = __pyx_v_data;

  /* "src/pyx/base.pyx":31
 *                 py_data = BaseData()
 *                 py_data.realptr = data
 *                 return py_data             # <<<<<<<<<<<<<<
 * 
 *     def getName(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_data));
  __pyx_r = ((PyObject *)__pyx_v_py_data);
  goto __pyx_L0;

  /* "src/pyx/base.pyx":20
 *     cdef _Base* realptr
 * 
 *     def findData(self, name):             # <<<<<<<<<<<<<<
 *                 """ Searchs and returns for a data field given its name
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("sofacython.Base.findData", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/base.pyx":33
 *                 return py_data
 * 
 *     def getName(self):             # <<<<<<<<<<<<<<
 *                 """ Return the name of this object """
 *                 cdef libcpp_string _r = (self.realptr).getName()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_4Base_3getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10sofacython_4Base_2getName[] = " Return the name of this object ";
static PyObject *__pyx_pw_10sofacython_4Base_3getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getName (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_4Base_2getName(((struct __pyx_obj_10sofacython_Base *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_4Base_2getName(struct __pyx_obj_10sofacython_Base *__pyx_v_self) {
  std::string __pyx_v__r;
  std::string __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getName", 0);

  /* "src/pyx/base.pyx":35
 *     def getName(self):
 *                 """ Return the name of this object """
 *                 cdef libcpp_string _r = (self.realptr).getName()             # <<<<<<<<<<<<<<
 *                 py_result = <libcpp_string>_r
 *                 return py_result
 */
  __pyx_v__r = __pyx_v_self->realptr->getName();

  /* "src/pyx/base.pyx":36
 *                 """ Return the name of this object """
 *                 cdef libcpp_string _r = (self.realptr).getName()
 *                 py_result = <libcpp_string>_r             # <<<<<<<<<<<<<<
 *                 return py_result
 * 
 */
  __pyx_v_py_result = ((std::string)__pyx_v__r);

  /* "src/pyx/base.pyx":37
 *                 cdef libcpp_string _r = (self.realptr).getName()
 *                 py_result = <libcpp_string>_r
 *                 return py_result             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_py_result); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyx/base.pyx":33
 *                 return py_data
 * 
 *     def getName(self):             # <<<<<<<<<<<<<<
 *                 """ Return the name of this object """
 *                 cdef libcpp_string _r = (self.realptr).getName()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.Base.getName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/base.pyx":39
 *                 return py_result
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *                 return "Base["+self.realptr.getClassName()+"]("+self.realptr.getName()+")"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_4Base_5__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10sofacython_4Base_5__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_4Base_4__str__(((struct __pyx_obj_10sofacython_Base *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_4Base_4__str__(struct __pyx_obj_10sofacython_Base *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "src/pyx/base.pyx":40
 * 
 *     def __str__(self):
 *                 return "Base["+self.realptr.getClassName()+"]("+self.realptr.getName()+")"             # <<<<<<<<<<<<<<
 * 
 *     def getTypeName(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->realptr->getClassName()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_kp_s_Base, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_kp_s__2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->realptr->getName()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_kp_s__3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pyx/base.pyx":39
 *                 return py_result
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *                 return "Base["+self.realptr.getClassName()+"]("+self.realptr.getName()+")"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("sofacython.Base.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/base.pyx":42
 *                 return "Base["+self.realptr.getClassName()+"]("+self.realptr.getName()+")"
 * 
 *     def getTypeName(self):             # <<<<<<<<<<<<<<
 *         return <libcpp_string>self.realptr.getTypeName()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_4Base_7getTypeName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10sofacython_4Base_7getTypeName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getTypeName (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_4Base_6getTypeName(((struct __pyx_obj_10sofacython_Base *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_4Base_6getTypeName(struct __pyx_obj_10sofacython_Base *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getTypeName", 0);

  /* "src/pyx/base.pyx":43
 * 
 *     def getTypeName(self):
 *         return <libcpp_string>self.realptr.getTypeName()             # <<<<<<<<<<<<<<
 * 
 *     def getClassName(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(((std::string)__pyx_v_self->realptr->getTypeName())); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyx/base.pyx":42
 *                 return "Base["+self.realptr.getClassName()+"]("+self.realptr.getName()+")"
 * 
 *     def getTypeName(self):             # <<<<<<<<<<<<<<
 *         return <libcpp_string>self.realptr.getTypeName()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.Base.getTypeName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/base.pyx":45
 *         return <libcpp_string>self.realptr.getTypeName()
 * 
 *     def getClassName(self):             # <<<<<<<<<<<<<<
 *         """ Returns the sofa component's name"""
 *         return <libcpp_string>self.realptr.getClassName()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_4Base_9getClassName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10sofacython_4Base_8getClassName[] = " Returns the sofa component's name";
static PyObject *__pyx_pw_10sofacython_4Base_9getClassName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getClassName (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_4Base_8getClassName(((struct __pyx_obj_10sofacython_Base *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_4Base_8getClassName(struct __pyx_obj_10sofacython_Base *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getClassName", 0);

  /* "src/pyx/base.pyx":47
 *     def getClassName(self):
 *         """ Returns the sofa component's name"""
 *         return <libcpp_string>self.realptr.getClassName()             # <<<<<<<<<<<<<<
 * 
 *     def getTemplateName(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(((std::string)__pyx_v_self->realptr->getClassName())); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyx/base.pyx":45
 *         return <libcpp_string>self.realptr.getTypeName()
 * 
 *     def getClassName(self):             # <<<<<<<<<<<<<<
 *         """ Returns the sofa component's name"""
 *         return <libcpp_string>self.realptr.getClassName()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.Base.getClassName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/base.pyx":49
 *         return <libcpp_string>self.realptr.getClassName()
 * 
 *     def getTemplateName(self):             # <<<<<<<<<<<<<<
 *         return <libcpp_string>self.realptr.getTemplateName()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_4Base_11getTemplateName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10sofacython_4Base_11getTemplateName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getTemplateName (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_4Base_10getTemplateName(((struct __pyx_obj_10sofacython_Base *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_4Base_10getTemplateName(struct __pyx_obj_10sofacython_Base *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getTemplateName", 0);

  /* "src/pyx/base.pyx":50
 * 
 *     def getTemplateName(self):
 *         return <libcpp_string>self.realptr.getTemplateName()             # <<<<<<<<<<<<<<
 * 
 *     def getDataNames(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(((std::string)__pyx_v_self->realptr->getTemplateName())); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyx/base.pyx":49
 *         return <libcpp_string>self.realptr.getClassName()
 * 
 *     def getTemplateName(self):             # <<<<<<<<<<<<<<
 *         return <libcpp_string>self.realptr.getTemplateName()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.Base.getTemplateName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/base.pyx":52
 *         return <libcpp_string>self.realptr.getTemplateName()
 * 
 *     def getDataNames(self):             # <<<<<<<<<<<<<<
 *                 """ Returns a list with the name of all the data field """
 *                 cdef sofavector[_BaseData*] v = (self.realptr.getDataFields())
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_4Base_13getDataNames(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10sofacython_4Base_12getDataNames[] = " Returns a list with the name of all the data field ";
static PyObject *__pyx_pw_10sofacython_4Base_13getDataNames(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDataNames (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_4Base_12getDataNames(((struct __pyx_obj_10sofacython_Base *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_4Base_12getDataNames(struct __pyx_obj_10sofacython_Base *__pyx_v_self) {
  sofa::helper::vector<sofa::core::objectmodel::BaseData *>  __pyx_v_v;
  PyObject *__pyx_v_p = NULL;
  sofa::core::objectmodel::BaseData *__pyx_v_bd;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  sofa::helper::vector<sofa::core::objectmodel::BaseData *> ::iterator __pyx_t_2;
  sofa::core::objectmodel::BaseData *__pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDataNames", 0);

  /* "src/pyx/base.pyx":54
 *     def getDataNames(self):
 *                 """ Returns a list with the name of all the data field """
 *                 cdef sofavector[_BaseData*] v = (self.realptr.getDataFields())             # <<<<<<<<<<<<<<
 *                 p = []
 *                 for bd in v:
 */
  __pyx_v_v = __pyx_v_self->realptr->getDataFields();

  /* "src/pyx/base.pyx":55
 *                 """ Returns a list with the name of all the data field """
 *                 cdef sofavector[_BaseData*] v = (self.realptr.getDataFields())
 *                 p = []             # <<<<<<<<<<<<<<
 *                 for bd in v:
 *                         p.append(bd.getName())
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_p = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pyx/base.pyx":56
 *                 cdef sofavector[_BaseData*] v = (self.realptr.getDataFields())
 *                 p = []
 *                 for bd in v:             # <<<<<<<<<<<<<<
 *                         p.append(bd.getName())
 *                 return p
 */
  __pyx_t_2 = __pyx_v_v.begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_v_v.end())) break;
    __pyx_t_3 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_bd = __pyx_t_3;

    /* "src/pyx/base.pyx":57
 *                 p = []
 *                 for bd in v:
 *                         p.append(bd.getName())             # <<<<<<<<<<<<<<
 *                 return p
 * 
 */
    __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_bd->getName()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_p, __pyx_t_1); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "src/pyx/base.pyx":56
 *                 cdef sofavector[_BaseData*] v = (self.realptr.getDataFields())
 *                 p = []
 *                 for bd in v:             # <<<<<<<<<<<<<<
 *                         p.append(bd.getName())
 *                 return p
 */
  }

  /* "src/pyx/base.pyx":58
 *                 for bd in v:
 *                         p.append(bd.getName())
 *                 return p             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_p);
  __pyx_r = __pyx_v_p;
  goto __pyx_L0;

  /* "src/pyx/base.pyx":52
 *         return <libcpp_string>self.realptr.getTemplateName()
 * 
 *     def getDataNames(self):             # <<<<<<<<<<<<<<
 *                 """ Returns a list with the name of all the data field """
 *                 cdef sofavector[_BaseData*] v = (self.realptr.getDataFields())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.Base.getDataNames", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/base.pyx":61
 * 
 *     @staticmethod
 *     cdef createFrom(_Base* aBase):             # <<<<<<<<<<<<<<
 *                 cdef Base py_obj = Base.__new__(Base)
 *                 py_obj.realptr = aBase
 */

static PyObject *__pyx_f_10sofacython_4Base_createFrom(sofa::core::objectmodel::Base *__pyx_v_aBase) {
  struct __pyx_obj_10sofacython_Base *__pyx_v_py_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("createFrom", 0);

  /* "src/pyx/base.pyx":62
 *     @staticmethod
 *     cdef createFrom(_Base* aBase):
 *                 cdef Base py_obj = Base.__new__(Base)             # <<<<<<<<<<<<<<
 *                 py_obj.realptr = aBase
 *                 return py_obj
 */
  __pyx_t_1 = __pyx_tp_new_10sofacython_Base(((PyTypeObject *)__pyx_ptype_10sofacython_Base), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10sofacython_Base)))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_py_obj = ((struct __pyx_obj_10sofacython_Base *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pyx/base.pyx":63
 *     cdef createFrom(_Base* aBase):
 *                 cdef Base py_obj = Base.__new__(Base)
 *                 py_obj.realptr = aBase             # <<<<<<<<<<<<<<
 *                 return py_obj
 * 
 */
  __pyx_v_py_obj->realptr = __pyx_v_aBase;

  /* "src/pyx/base.pyx":64
 *                 cdef Base py_obj = Base.__new__(Base)
 *                 py_obj.realptr = aBase
 *                 return py_obj             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, Base src not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_obj));
  __pyx_r = ((PyObject *)__pyx_v_py_obj);
  goto __pyx_L0;

  /* "src/pyx/base.pyx":61
 * 
 *     @staticmethod
 *     cdef createFrom(_Base* aBase):             # <<<<<<<<<<<<<<
 *                 cdef Base py_obj = Base.__new__(Base)
 *                 py_obj.realptr = aBase
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.Base.createFrom", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/base.pyx":66
 *                 return py_obj
 * 
 *     def __init__(self, Base src not None):             # <<<<<<<<<<<<<<
 *         self.realptr = src.realptr
 * 
 */

/* Python wrapper */
static int __pyx_pw_10sofacython_4Base_15__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10sofacython_4Base_15__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_10sofacython_Base *__pyx_v_src = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_src,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_src)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_src = ((struct __pyx_obj_10sofacython_Base *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sofacython.Base.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_src), __pyx_ptype_10sofacython_Base, 0, "src", 0))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_10sofacython_4Base_14__init__(((struct __pyx_obj_10sofacython_Base *)__pyx_v_self), __pyx_v_src);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10sofacython_4Base_14__init__(struct __pyx_obj_10sofacython_Base *__pyx_v_self, struct __pyx_obj_10sofacython_Base *__pyx_v_src) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  sofa::core::objectmodel::Base *__pyx_t_1;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "src/pyx/base.pyx":67
 * 
 *     def __init__(self, Base src not None):
 *         self.realptr = src.realptr             # <<<<<<<<<<<<<<
 * 
 *     def __getattr__(self, item):
 */
  __pyx_t_1 = __pyx_v_src->realptr;
  __pyx_v_self->realptr = __pyx_t_1;

  /* "src/pyx/base.pyx":66
 *                 return py_obj
 * 
 *     def __init__(self, Base src not None):             # <<<<<<<<<<<<<<
 *         self.realptr = src.realptr
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/base.pyx":69
 *         self.realptr = src.realptr
 * 
 *     def __getattr__(self, item):             # <<<<<<<<<<<<<<
 *                 r = self.findData(item)
 *                 if r != None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_4Base_17__getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static PyObject *__pyx_pw_10sofacython_4Base_17__getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_4Base_16__getattr__(((struct __pyx_obj_10sofacython_Base *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_4Base_16__getattr__(struct __pyx_obj_10sofacython_Base *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getattr__", 0);

  /* "src/pyx/base.pyx":70
 * 
 *     def __getattr__(self, item):
 *                 r = self.findData(item)             # <<<<<<<<<<<<<<
 *                 if r != None:
 *                         return r
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_findData); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_item); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_v_item);
    __Pyx_GIVEREF(__pyx_v_item);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_item);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_r = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/pyx/base.pyx":71
 *     def __getattr__(self, item):
 *                 r = self.findData(item)
 *                 if r != None:             # <<<<<<<<<<<<<<
 *                         return r
 *                 raise AttributeError("has no attribute '"+item+"'")
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_r, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "src/pyx/base.pyx":72
 *                 r = self.findData(item)
 *                 if r != None:
 *                         return r             # <<<<<<<<<<<<<<
 *                 raise AttributeError("has no attribute '"+item+"'")
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_r);
    __pyx_r = __pyx_v_r;
    goto __pyx_L0;

    /* "src/pyx/base.pyx":71
 *     def __getattr__(self, item):
 *                 r = self.findData(item)
 *                 if r != None:             # <<<<<<<<<<<<<<
 *                         return r
 *                 raise AttributeError("has no attribute '"+item+"'")
 */
  }

  /* "src/pyx/base.pyx":73
 *                 if r != None:
 *                         return r
 *                 raise AttributeError("has no attribute '"+item+"'")             # <<<<<<<<<<<<<<
 * 
 *     def __setattr__(self, item, values):
 */
  __pyx_t_1 = PyNumber_Add(__pyx_kp_s_has_no_attribute, __pyx_v_item); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s__4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_AttributeError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  {__pyx_filename = __pyx_f[2]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "src/pyx/base.pyx":69
 *         self.realptr = src.realptr
 * 
 *     def __getattr__(self, item):             # <<<<<<<<<<<<<<
 *                 r = self.findData(item)
 *                 if r != None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("sofacython.Base.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/base.pyx":75
 *                 raise AttributeError("has no attribute '"+item+"'")
 * 
 *     def __setattr__(self, item, values):             # <<<<<<<<<<<<<<
 *                 r = self.findData(item)
 *                 if r:
 */

/* Python wrapper */
static int __pyx_pw_10sofacython_4Base_19__setattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_values); /*proto*/
static int __pyx_pw_10sofacython_4Base_19__setattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_values) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setattr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_4Base_18__setattr__(((struct __pyx_obj_10sofacython_Base *)__pyx_v_self), ((PyObject *)__pyx_v_item), ((PyObject *)__pyx_v_values));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10sofacython_4Base_18__setattr__(struct __pyx_obj_10sofacython_Base *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_values) {
  PyObject *__pyx_v_r = NULL;
  Py_ssize_t __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setattr__", 0);

  /* "src/pyx/base.pyx":76
 * 
 *     def __setattr__(self, item, values):
 *                 r = self.findData(item)             # <<<<<<<<<<<<<<
 *                 if r:
 *                         for i in range(0, min(len(r), len(values))):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_findData); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_item); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_v_item);
    __Pyx_GIVEREF(__pyx_v_item);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_item);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_r = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/pyx/base.pyx":77
 *     def __setattr__(self, item, values):
 *                 r = self.findData(item)
 *                 if r:             # <<<<<<<<<<<<<<
 *                         for i in range(0, min(len(r), len(values))):
 *                                 r[i] = values[i]
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_r); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_5) {

    /* "src/pyx/base.pyx":78
 *                 r = self.findData(item)
 *                 if r:
 *                         for i in range(0, min(len(r), len(values))):             # <<<<<<<<<<<<<<
 *                                 r[i] = values[i]
 *                 else:
 */
    __pyx_t_6 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_7 = PyObject_Length(__pyx_v_r); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (((__pyx_t_6 < __pyx_t_7) != 0)) {
      __pyx_t_8 = __pyx_t_6;
    } else {
      __pyx_t_8 = __pyx_t_7;
    }
    __pyx_t_6 = __pyx_t_8;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_6; __pyx_t_8+=1) {
      __pyx_v_i = __pyx_t_8;

      /* "src/pyx/base.pyx":79
 *                 if r:
 *                         for i in range(0, min(len(r), len(values))):
 *                                 r[i] = values[i]             # <<<<<<<<<<<<<<
 *                 else:
 *                         raise AttributeError("__setattr__()...has no attribute '"+item+"'")
 */
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_values, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      if (unlikely(__Pyx_SetItemInt(__pyx_v_r, __pyx_v_i, __pyx_t_1, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }

    /* "src/pyx/base.pyx":77
 *     def __setattr__(self, item, values):
 *                 r = self.findData(item)
 *                 if r:             # <<<<<<<<<<<<<<
 *                         for i in range(0, min(len(r), len(values))):
 *                                 r[i] = values[i]
 */
    goto __pyx_L3;
  }

  /* "src/pyx/base.pyx":81
 *                                 r[i] = values[i]
 *                 else:
 *                         raise AttributeError("__setattr__()...has no attribute '"+item+"'")             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(Base self not None,  Base other, op):
 */
  /*else*/ {
    __pyx_t_1 = PyNumber_Add(__pyx_kp_s_setattr___has_no_attribute, __pyx_v_item); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s__4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_AttributeError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "src/pyx/base.pyx":75
 *                 raise AttributeError("has no attribute '"+item+"'")
 * 
 *     def __setattr__(self, item, values):             # <<<<<<<<<<<<<<
 *                 r = self.findData(item)
 *                 if r:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("sofacython.Base.__setattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/base.pyx":83
 *                         raise AttributeError("__setattr__()...has no attribute '"+item+"'")
 * 
 *     def __richcmp__(Base self not None,  Base other, op):             # <<<<<<<<<<<<<<
 *         if op == 2:
 *                 return self.realptr == other.realptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_4Base_21__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_op); /*proto*/
static PyObject *__pyx_pw_10sofacython_4Base_21__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_op) {
  PyObject *__pyx_v_op = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_v_op = __Pyx_PyInt_From_int(__pyx_arg_op); if (unlikely(!__pyx_v_op)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __Pyx_GOTREF(__pyx_v_op);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("sofacython.Base.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_10sofacython_Base, 0, "self", 0))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_10sofacython_Base, 1, "other", 0))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_10sofacython_4Base_20__richcmp__(((struct __pyx_obj_10sofacython_Base *)__pyx_v_self), ((struct __pyx_obj_10sofacython_Base *)__pyx_v_other), ((PyObject *)__pyx_v_op));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_op);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_4Base_20__richcmp__(struct __pyx_obj_10sofacython_Base *__pyx_v_self, struct __pyx_obj_10sofacython_Base *__pyx_v_other, PyObject *__pyx_v_op) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "src/pyx/base.pyx":84
 * 
 *     def __richcmp__(Base self not None,  Base other, op):
 *         if op == 2:             # <<<<<<<<<<<<<<
 *                 return self.realptr == other.realptr
 *         if op == 3:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_op, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "src/pyx/base.pyx":85
 *     def __richcmp__(Base self not None,  Base other, op):
 *         if op == 2:
 *                 return self.realptr == other.realptr             # <<<<<<<<<<<<<<
 *         if op == 3:
 *                 return self.realptr != other.realptr
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->realptr == __pyx_v_other->realptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "src/pyx/base.pyx":84
 * 
 *     def __richcmp__(Base self not None,  Base other, op):
 *         if op == 2:             # <<<<<<<<<<<<<<
 *                 return self.realptr == other.realptr
 *         if op == 3:
 */
  }

  /* "src/pyx/base.pyx":86
 *         if op == 2:
 *                 return self.realptr == other.realptr
 *         if op == 3:             # <<<<<<<<<<<<<<
 *                 return self.realptr != other.realptr
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_op, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "src/pyx/base.pyx":87
 *                 return self.realptr == other.realptr
 *         if op == 3:
 *                 return self.realptr != other.realptr             # <<<<<<<<<<<<<<
 * 
 *         return NotImplemented()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->realptr != __pyx_v_other->realptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "src/pyx/base.pyx":86
 *         if op == 2:
 *                 return self.realptr == other.realptr
 *         if op == 3:             # <<<<<<<<<<<<<<
 *                 return self.realptr != other.realptr
 * 
 */
  }

  /* "src/pyx/base.pyx":89
 *                 return self.realptr != other.realptr
 * 
 *         return NotImplemented()             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_builtin_NotImplemented); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyx/base.pyx":83
 *                         raise AttributeError("__setattr__()...has no attribute '"+item+"'")
 * 
 *     def __richcmp__(Base self not None,  Base other, op):             # <<<<<<<<<<<<<<
 *         if op == 2:
 *                 return self.realptr == other.realptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.Base.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/baseobjectdescription.pyx":9
 *         cdef _BaseObjectDescription* baseobjectdescriptionptr
 * 
 *         def __dealloc__(self):             # <<<<<<<<<<<<<<
 *                 del self.baseobjectdescriptionptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_10sofacython_21BaseObjectDescription_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_10sofacython_21BaseObjectDescription_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_10sofacython_21BaseObjectDescription___dealloc__(((struct __pyx_obj_10sofacython_BaseObjectDescription *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_10sofacython_21BaseObjectDescription___dealloc__(struct __pyx_obj_10sofacython_BaseObjectDescription *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "src/pyx/baseobjectdescription.pyx":10
 * 
 *         def __dealloc__(self):
 *                 del self.baseobjectdescriptionptr             # <<<<<<<<<<<<<<
 * 
 *         def __init__(self, aName, aType):
 */
  delete __pyx_v_self->baseobjectdescriptionptr;

  /* "src/pyx/baseobjectdescription.pyx":9
 *         cdef _BaseObjectDescription* baseobjectdescriptionptr
 * 
 *         def __dealloc__(self):             # <<<<<<<<<<<<<<
 *                 del self.baseobjectdescriptionptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "src/pyx/baseobjectdescription.pyx":12
 *                 del self.baseobjectdescriptionptr
 * 
 *         def __init__(self, aName, aType):             # <<<<<<<<<<<<<<
 *                  assert isinstance(aName, (str)), 'arg aName has a wrong type. string is expected instead of '+str(type(aName))
 *                  assert isinstance(aType, (str)), 'arg aType has a wrong type. string is expected instead of '+str(type(aName))
 */

/* Python wrapper */
static int __pyx_pw_10sofacython_21BaseObjectDescription_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10sofacython_21BaseObjectDescription_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_aName = 0;
  PyObject *__pyx_v_aType = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_aName,&__pyx_n_s_aType,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_aName)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_aType)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_aName = values[0];
    __pyx_v_aType = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sofacython.BaseObjectDescription.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10sofacython_21BaseObjectDescription_2__init__(((struct __pyx_obj_10sofacython_BaseObjectDescription *)__pyx_v_self), __pyx_v_aName, __pyx_v_aType);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10sofacython_21BaseObjectDescription_2__init__(struct __pyx_obj_10sofacython_BaseObjectDescription *__pyx_v_self, PyObject *__pyx_v_aName, PyObject *__pyx_v_aType) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  char *__pyx_t_5;
  sofa::core::objectmodel::BaseObjectDescription *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "src/pyx/baseobjectdescription.pyx":13
 * 
 *         def __init__(self, aName, aType):
 *                  assert isinstance(aName, (str)), 'arg aName has a wrong type. string is expected instead of '+str(type(aName))             # <<<<<<<<<<<<<<
 *                  assert isinstance(aType, (str)), 'arg aType has a wrong type. string is expected instead of '+str(type(aName))
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyString_Check(__pyx_v_aName); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_aName)));
      __Pyx_GIVEREF(((PyObject *)Py_TYPE(__pyx_v_aName)));
      PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(__pyx_v_aName)));
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_kp_s_arg_aName_has_a_wrong_type_strin, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_Pack(1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      PyErr_SetObject(PyExc_AssertionError, __pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "src/pyx/baseobjectdescription.pyx":14
 *         def __init__(self, aName, aType):
 *                  assert isinstance(aName, (str)), 'arg aName has a wrong type. string is expected instead of '+str(type(aName))
 *                  assert isinstance(aType, (str)), 'arg aType has a wrong type. string is expected instead of '+str(type(aName))             # <<<<<<<<<<<<<<
 * 
 *                  self.baseobjectdescriptionptr = new _BaseObjectDescription(aName, aType)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyString_Check(__pyx_v_aType); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_aName)));
      __Pyx_GIVEREF(((PyObject *)Py_TYPE(__pyx_v_aName)));
      PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)Py_TYPE(__pyx_v_aName)));
      __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_Add(__pyx_kp_s_arg_aType_has_a_wrong_type_strin, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyTuple_Pack(1, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      PyErr_SetObject(PyExc_AssertionError, __pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "src/pyx/baseobjectdescription.pyx":16
 *                  assert isinstance(aType, (str)), 'arg aType has a wrong type. string is expected instead of '+str(type(aName))
 * 
 *                  self.baseobjectdescriptionptr = new _BaseObjectDescription(aName, aType)             # <<<<<<<<<<<<<<
 * 
 *         def getName(self):
 */
  __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_v_aName); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_v_aType); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  try {
    __pyx_t_6 = new sofa::core::objectmodel::BaseObjectDescription(__pyx_t_4, __pyx_t_5);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_self->baseobjectdescriptionptr = __pyx_t_6;

  /* "src/pyx/baseobjectdescription.pyx":12
 *                 del self.baseobjectdescriptionptr
 * 
 *         def __init__(self, aName, aType):             # <<<<<<<<<<<<<<
 *                  assert isinstance(aName, (str)), 'arg aName has a wrong type. string is expected instead of '+str(type(aName))
 *                  assert isinstance(aType, (str)), 'arg aType has a wrong type. string is expected instead of '+str(type(aName))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("sofacython.BaseObjectDescription.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/baseobjectdescription.pyx":18
 *                  self.baseobjectdescriptionptr = new _BaseObjectDescription(aName, aType)
 * 
 *         def getName(self):             # <<<<<<<<<<<<<<
 *                 return self.baseobjectdescriptionptr.getName()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_21BaseObjectDescription_5getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10sofacython_21BaseObjectDescription_5getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getName (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_21BaseObjectDescription_4getName(((struct __pyx_obj_10sofacython_BaseObjectDescription *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_21BaseObjectDescription_4getName(struct __pyx_obj_10sofacython_BaseObjectDescription *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getName", 0);

  /* "src/pyx/baseobjectdescription.pyx":19
 * 
 *         def getName(self):
 *                 return self.baseobjectdescriptionptr.getName()             # <<<<<<<<<<<<<<
 * 
 *         def setAttribute(self, aName, aValue):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->baseobjectdescriptionptr->getName()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyx/baseobjectdescription.pyx":18
 *                  self.baseobjectdescriptionptr = new _BaseObjectDescription(aName, aType)
 * 
 *         def getName(self):             # <<<<<<<<<<<<<<
 *                 return self.baseobjectdescriptionptr.getName()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.BaseObjectDescription.getName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/baseobjectdescription.pyx":21
 *                 return self.baseobjectdescriptionptr.getName()
 * 
 *         def setAttribute(self, aName, aValue):             # <<<<<<<<<<<<<<
 *                 self.baseobjectdescriptionptr.setAttribute(<libcpp_string>aName, aValue)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_21BaseObjectDescription_7setAttribute(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10sofacython_21BaseObjectDescription_7setAttribute(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_aName = 0;
  PyObject *__pyx_v_aValue = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setAttribute (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_aName,&__pyx_n_s_aValue,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_aName)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_aValue)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setAttribute", 1, 2, 2, 1); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setAttribute") < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_aName = values[0];
    __pyx_v_aValue = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setAttribute", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sofacython.BaseObjectDescription.setAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10sofacython_21BaseObjectDescription_6setAttribute(((struct __pyx_obj_10sofacython_BaseObjectDescription *)__pyx_v_self), __pyx_v_aName, __pyx_v_aValue);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_21BaseObjectDescription_6setAttribute(struct __pyx_obj_10sofacython_BaseObjectDescription *__pyx_v_self, PyObject *__pyx_v_aName, PyObject *__pyx_v_aValue) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  char *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setAttribute", 0);

  /* "src/pyx/baseobjectdescription.pyx":22
 * 
 *         def setAttribute(self, aName, aValue):
 *                 self.baseobjectdescriptionptr.setAttribute(<libcpp_string>aName, aValue)             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_aName); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_v_aValue); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->baseobjectdescriptionptr->setAttribute(((std::string)__pyx_t_1), __pyx_t_2);

  /* "src/pyx/baseobjectdescription.pyx":21
 *                 return self.baseobjectdescriptionptr.getName()
 * 
 *         def setAttribute(self, aName, aValue):             # <<<<<<<<<<<<<<
 *                 self.baseobjectdescriptionptr.setAttribute(<libcpp_string>aName, aValue)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("sofacython.BaseObjectDescription.setAttribute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/objectfactory.pyx":20
 * 
 *         @staticmethod
 *         def createObject(BaseContext aContext not None, BaseObjectDescription aDesc not None ):             # <<<<<<<<<<<<<<
 *                 cdef _BaseObjectSPtr p = _CreateObject(aContext.basecontextptr, aDesc.baseobjectdescriptionptr)
 *                 if p.get() == NULL :
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_13ObjectFactory_1createObject(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_10sofacython_13ObjectFactory_1createObject = {"createObject", (PyCFunction)__pyx_pw_10sofacython_13ObjectFactory_1createObject, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10sofacython_13ObjectFactory_1createObject(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_10sofacython_BaseContext *__pyx_v_aContext = 0;
  struct __pyx_obj_10sofacython_BaseObjectDescription *__pyx_v_aDesc = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("createObject (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_aContext,&__pyx_n_s_aDesc,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_aContext)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_aDesc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("createObject", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "createObject") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_aContext = ((struct __pyx_obj_10sofacython_BaseContext *)values[0]);
    __pyx_v_aDesc = ((struct __pyx_obj_10sofacython_BaseObjectDescription *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("createObject", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sofacython.ObjectFactory.createObject", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_aContext), __pyx_ptype_10sofacython_BaseContext, 0, "aContext", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_aDesc), __pyx_ptype_10sofacython_BaseObjectDescription, 0, "aDesc", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_10sofacython_13ObjectFactory_createObject(__pyx_v_aContext, __pyx_v_aDesc);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_13ObjectFactory_createObject(struct __pyx_obj_10sofacython_BaseContext *__pyx_v_aContext, struct __pyx_obj_10sofacython_BaseObjectDescription *__pyx_v_aDesc) {
  sofa::core::objectmodel::BaseObject::SPtr __pyx_v_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("createObject", 0);

  /* "src/pyx/objectfactory.pyx":21
 *         @staticmethod
 *         def createObject(BaseContext aContext not None, BaseObjectDescription aDesc not None ):
 *                 cdef _BaseObjectSPtr p = _CreateObject(aContext.basecontextptr, aDesc.baseobjectdescriptionptr)             # <<<<<<<<<<<<<<
 *                 if p.get() == NULL :
 *                         raise Exception("Unable to create an object of type: "+str(aDesc.getName()))
 */
  __pyx_v_p = sofa::core::ObjectFactory::CreateObject(__pyx_v_aContext->basecontextptr, __pyx_v_aDesc->baseobjectdescriptionptr);

  /* "src/pyx/objectfactory.pyx":22
 *         def createObject(BaseContext aContext not None, BaseObjectDescription aDesc not None ):
 *                 cdef _BaseObjectSPtr p = _CreateObject(aContext.basecontextptr, aDesc.baseobjectdescriptionptr)
 *                 if p.get() == NULL :             # <<<<<<<<<<<<<<
 *                         raise Exception("Unable to create an object of type: "+str(aDesc.getName()))
 *                 return BaseObject.createFrom(p.get())
 */
  __pyx_t_1 = ((__pyx_v_p.get() == NULL) != 0);
  if (__pyx_t_1) {

    /* "src/pyx/objectfactory.pyx":23
 *                 cdef _BaseObjectSPtr p = _CreateObject(aContext.basecontextptr, aDesc.baseobjectdescriptionptr)
 *                 if p.get() == NULL :
 *                         raise Exception("Unable to create an object of type: "+str(aDesc.getName()))             # <<<<<<<<<<<<<<
 *                 return BaseObject.createFrom(p.get())
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_aDesc), __pyx_n_s_getName); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (__pyx_t_4) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_kp_s_Unable_to_create_an_object_of_ty, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "src/pyx/objectfactory.pyx":22
 *         def createObject(BaseContext aContext not None, BaseObjectDescription aDesc not None ):
 *                 cdef _BaseObjectSPtr p = _CreateObject(aContext.basecontextptr, aDesc.baseobjectdescriptionptr)
 *                 if p.get() == NULL :             # <<<<<<<<<<<<<<
 *                         raise Exception("Unable to create an object of type: "+str(aDesc.getName()))
 *                 return BaseObject.createFrom(p.get())
 */
  }

  /* "src/pyx/objectfactory.pyx":24
 *                 if p.get() == NULL :
 *                         raise Exception("Unable to create an object of type: "+str(aDesc.getName()))
 *                 return BaseObject.createFrom(p.get())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_f_10sofacython_10BaseObject_createFrom(__pyx_v_p.get()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "src/pyx/objectfactory.pyx":20
 * 
 *         @staticmethod
 *         def createObject(BaseContext aContext not None, BaseObjectDescription aDesc not None ):             # <<<<<<<<<<<<<<
 *                 cdef _BaseObjectSPtr p = _CreateObject(aContext.basecontextptr, aDesc.baseobjectdescriptionptr)
 *                 if p.get() == NULL :
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("sofacython.ObjectFactory.createObject", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/basedata.pyx":23
 *         cdef _BaseData* realptr
 * 
 *         def getName(self):             # <<<<<<<<<<<<<<
 *                 return self.realptr.getName()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_8BaseData_1getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10sofacython_8BaseData_1getName(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getName (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_8BaseData_getName(((struct __pyx_obj_10sofacython_BaseData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_8BaseData_getName(struct __pyx_obj_10sofacython_BaseData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getName", 0);

  /* "src/pyx/basedata.pyx":24
 * 
 *         def getName(self):
 *                 return self.realptr.getName()             # <<<<<<<<<<<<<<
 * 
 *         def getValueString(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->realptr->getName()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyx/basedata.pyx":23
 *         cdef _BaseData* realptr
 * 
 *         def getName(self):             # <<<<<<<<<<<<<<
 *                 return self.realptr.getName()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.BaseData.getName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/basedata.pyx":26
 *                 return self.realptr.getName()
 * 
 *         def getValueString(self):             # <<<<<<<<<<<<<<
 *                 """ Return the value contained in this data field converted to a string description
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_8BaseData_3getValueString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10sofacython_8BaseData_2getValueString[] = " Return the value contained in this data field converted to a string description  \n                \n                    Example: \n                        print(\"Gravity is: \"+Simulation.getRoot().findData(\"gravity\").getValueString())\n                        #\302\240Gravity is: 0, 0, 0\n                ";
static PyObject *__pyx_pw_10sofacython_8BaseData_3getValueString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValueString (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_8BaseData_2getValueString(((struct __pyx_obj_10sofacython_BaseData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_8BaseData_2getValueString(struct __pyx_obj_10sofacython_BaseData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValueString", 0);

  /* "src/pyx/basedata.pyx":33
 *                         #Gravity is: 0, 0, 0
 *                 """
 *                 return self.realptr.getValueString()             # <<<<<<<<<<<<<<
 * 
 *         def getValueTypeString(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->realptr->getValueString()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyx/basedata.pyx":26
 *                 return self.realptr.getName()
 * 
 *         def getValueString(self):             # <<<<<<<<<<<<<<
 *                 """ Return the value contained in this data field converted to a string description
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.BaseData.getValueString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/basedata.pyx":35
 *                 return self.realptr.getValueString()
 * 
 *         def getValueTypeString(self):             # <<<<<<<<<<<<<<
 *                 """ Return the data type of this datafield
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_8BaseData_5getValueTypeString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10sofacython_8BaseData_4getValueTypeString[] = " Return the data type of this datafield\n                \n                    Example: \n                        print(\"Gravity is: \"+Simulation.getRoot().findData(\"gravity\").getValueTypeString())\n                        #\302\240=> vec3d\n                ";
static PyObject *__pyx_pw_10sofacython_8BaseData_5getValueTypeString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValueTypeString (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_8BaseData_4getValueTypeString(((struct __pyx_obj_10sofacython_BaseData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_8BaseData_4getValueTypeString(struct __pyx_obj_10sofacython_BaseData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValueTypeString", 0);

  /* "src/pyx/basedata.pyx":42
 *                         #=> vec3d
 *                 """
 *                 return self.realptr.getValueTypeString()             # <<<<<<<<<<<<<<
 * 
 *         def dim(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->realptr->getValueTypeString()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyx/basedata.pyx":35
 *                 return self.realptr.getValueString()
 * 
 *         def getValueTypeString(self):             # <<<<<<<<<<<<<<
 *                 """ Return the data type of this datafield
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.BaseData.getValueTypeString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/basedata.pyx":44
 *                 return self.realptr.getValueTypeString()
 * 
 *         def dim(self):             # <<<<<<<<<<<<<<
 *                 """ Returns a tuple containing the dimensions of the data field
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_8BaseData_7dim(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10sofacython_8BaseData_6dim[] = " Returns a tuple containing the dimensions of the data field\n                \n                    Example: \n                        print(\"Gravity dimension is: \"+Simulation.getRoot().findData(\"gravity\").dim())\n                        #\302\240Gravity dimension is (1,3) \n                        #\302\240This means there is one value of size 3 (ie one vec3). \n                ";
static PyObject *__pyx_pw_10sofacython_8BaseData_7dim(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dim (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_8BaseData_6dim(((struct __pyx_obj_10sofacython_BaseData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_8BaseData_6dim(struct __pyx_obj_10sofacython_BaseData *__pyx_v_self) {
  sofa::defaulttype::AbstractTypeInfo const *__pyx_v_nfo;
  void const *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dim", 0);

  /* "src/pyx/basedata.pyx":52
 *                         #This means there is one value of size 3 (ie one vec3).
 *                 """
 *                 cdef const _AbstractTypeInfo* nfo=self.realptr.getValueTypeInfo()             # <<<<<<<<<<<<<<
 *                 cdef const void* ptr = self.realptr.getValueVoidPtr()
 *                 return (nfo.size(ptr)/nfo.size(), nfo.size())
 */
  __pyx_v_nfo = __pyx_v_self->realptr->getValueTypeInfo();

  /* "src/pyx/basedata.pyx":53
 *                 """
 *                 cdef const _AbstractTypeInfo* nfo=self.realptr.getValueTypeInfo()
 *                 cdef const void* ptr = self.realptr.getValueVoidPtr()             # <<<<<<<<<<<<<<
 *                 return (nfo.size(ptr)/nfo.size(), nfo.size())
 * 
 */
  __pyx_v_ptr = __pyx_v_self->realptr->getValueVoidPtr();

  /* "src/pyx/basedata.pyx":54
 *                 cdef const _AbstractTypeInfo* nfo=self.realptr.getValueTypeInfo()
 *                 cdef const void* ptr = self.realptr.getValueVoidPtr()
 *                 return (nfo.size(ptr)/nfo.size(), nfo.size())             # <<<<<<<<<<<<<<
 * 
 *         def setSize(self, size):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_nfo->size(__pyx_v_ptr);
  __pyx_t_2 = __pyx_v_nfo->size();
  if (unlikely(__pyx_t_2 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((__pyx_t_1 / __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_FromSize_t(__pyx_v_nfo->size()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "src/pyx/basedata.pyx":44
 *                 return self.realptr.getValueTypeString()
 * 
 *         def dim(self):             # <<<<<<<<<<<<<<
 *                 """ Returns a tuple containing the dimensions of the data field
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("sofacython.BaseData.dim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/basedata.pyx":56
 *                 return (nfo.size(ptr)/nfo.size(), nfo.size())
 * 
 *         def setSize(self, size):             # <<<<<<<<<<<<<<
 *                 """ change the number of element in this data field"""
 *                 assert isinstance(size, (int)), 'size should be of integer type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_8BaseData_9setSize(PyObject *__pyx_v_self, PyObject *__pyx_v_size); /*proto*/
static char __pyx_doc_10sofacython_8BaseData_8setSize[] = " change the number of element in this data field";
static PyObject *__pyx_pw_10sofacython_8BaseData_9setSize(PyObject *__pyx_v_self, PyObject *__pyx_v_size) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setSize (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_8BaseData_8setSize(((struct __pyx_obj_10sofacython_BaseData *)__pyx_v_self), ((PyObject *)__pyx_v_size));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_8BaseData_8setSize(struct __pyx_obj_10sofacython_BaseData *__pyx_v_self, PyObject *__pyx_v_size) {
  sofa::defaulttype::AbstractTypeInfo const *__pyx_v_nfo;
  void *__pyx_v_ptr;
  PyObject *__pyx_v_rowwidth = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setSize", 0);

  /* "src/pyx/basedata.pyx":58
 *         def setSize(self, size):
 *                 """ change the number of element in this data field"""
 *                 assert isinstance(size, (int)), 'size should be of integer type'             # <<<<<<<<<<<<<<
 *                 cdef const _AbstractTypeInfo* nfo=self.realptr.getValueTypeInfo()
 *                 cdef void* ptr = self.realptr.beginEditVoidPtr()
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyInt_Check(__pyx_v_size); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_size_should_be_of_integer_type);
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "src/pyx/basedata.pyx":59
 *                 """ change the number of element in this data field"""
 *                 assert isinstance(size, (int)), 'size should be of integer type'
 *                 cdef const _AbstractTypeInfo* nfo=self.realptr.getValueTypeInfo()             # <<<<<<<<<<<<<<
 *                 cdef void* ptr = self.realptr.beginEditVoidPtr()
 *                 cdef rowwidth = nfo.size()
 */
  __pyx_v_nfo = __pyx_v_self->realptr->getValueTypeInfo();

  /* "src/pyx/basedata.pyx":60
 *                 assert isinstance(size, (int)), 'size should be of integer type'
 *                 cdef const _AbstractTypeInfo* nfo=self.realptr.getValueTypeInfo()
 *                 cdef void* ptr = self.realptr.beginEditVoidPtr()             # <<<<<<<<<<<<<<
 *                 cdef rowwidth = nfo.size()
 *                 nfo.setSize(ptr, rowwidth*size)
 */
  __pyx_v_ptr = __pyx_v_self->realptr->beginEditVoidPtr();

  /* "src/pyx/basedata.pyx":61
 *                 cdef const _AbstractTypeInfo* nfo=self.realptr.getValueTypeInfo()
 *                 cdef void* ptr = self.realptr.beginEditVoidPtr()
 *                 cdef rowwidth = nfo.size()             # <<<<<<<<<<<<<<
 *                 nfo.setSize(ptr, rowwidth*size)
 *                 self.realptr.endEditVoidPtr()
 */
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_nfo->size()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_rowwidth = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "src/pyx/basedata.pyx":62
 *                 cdef void* ptr = self.realptr.beginEditVoidPtr()
 *                 cdef rowwidth = nfo.size()
 *                 nfo.setSize(ptr, rowwidth*size)             # <<<<<<<<<<<<<<
 *                 self.realptr.endEditVoidPtr()
 *                 return len(self)
 */
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_rowwidth, __pyx_v_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_nfo->setSize(__pyx_v_ptr, __pyx_t_3);

  /* "src/pyx/basedata.pyx":63
 *                 cdef rowwidth = nfo.size()
 *                 nfo.setSize(ptr, rowwidth*size)
 *                 self.realptr.endEditVoidPtr()             # <<<<<<<<<<<<<<
 *                 return len(self)
 * 
 */
  __pyx_v_self->realptr->endEditVoidPtr();

  /* "src/pyx/basedata.pyx":64
 *                 nfo.setSize(ptr, rowwidth*size)
 *                 self.realptr.endEditVoidPtr()
 *                 return len(self)             # <<<<<<<<<<<<<<
 * 
 *         def append(self, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyObject_Length(((PyObject *)__pyx_v_self)); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pyx/basedata.pyx":56
 *                 return (nfo.size(ptr)/nfo.size(), nfo.size())
 * 
 *         def setSize(self, size):             # <<<<<<<<<<<<<<
 *                 """ change the number of element in this data field"""
 *                 assert isinstance(size, (int)), 'size should be of integer type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("sofacython.BaseData.setSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_rowwidth);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/basedata.pyx":66
 *                 return len(self)
 * 
 *         def append(self, value):             # <<<<<<<<<<<<<<
 *                 """ Add a new value to the data field """
 *                 cdef const _AbstractTypeInfo* nfo=self.realptr.getValueTypeInfo()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_8BaseData_11append(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static char __pyx_doc_10sofacython_8BaseData_10append[] = " Add a new value to the data field ";
static PyObject *__pyx_pw_10sofacython_8BaseData_11append(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("append (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_8BaseData_10append(((struct __pyx_obj_10sofacython_BaseData *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_8BaseData_10append(struct __pyx_obj_10sofacython_BaseData *__pyx_v_self, PyObject *__pyx_v_value) {
  sofa::defaulttype::AbstractTypeInfo const *__pyx_v_nfo;
  void *__pyx_v_ptr;
  PyObject *__pyx_v_rowwidth = 0;
  CYTHON_UNUSED PyObject *__pyx_v_numrow = 0;
  PyObject *__pyx_v_oldsize = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  size_t __pyx_t_5;
  double __pyx_t_6;
  PY_LONG_LONG __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("append", 0);

  /* "src/pyx/basedata.pyx":68
 *         def append(self, value):
 *                 """ Add a new value to the data field """
 *                 cdef const _AbstractTypeInfo* nfo=self.realptr.getValueTypeInfo()             # <<<<<<<<<<<<<<
 *                 cdef void* ptr = self.realptr.beginEditVoidPtr()
 * 
 */
  __pyx_v_nfo = __pyx_v_self->realptr->getValueTypeInfo();

  /* "src/pyx/basedata.pyx":69
 *                 """ Add a new value to the data field """
 *                 cdef const _AbstractTypeInfo* nfo=self.realptr.getValueTypeInfo()
 *                 cdef void* ptr = self.realptr.beginEditVoidPtr()             # <<<<<<<<<<<<<<
 * 
 *                 cdef rowwidth = nfo.size()
 */
  __pyx_v_ptr = __pyx_v_self->realptr->beginEditVoidPtr();

  /* "src/pyx/basedata.pyx":71
 *                 cdef void* ptr = self.realptr.beginEditVoidPtr()
 * 
 *                 cdef rowwidth = nfo.size()             # <<<<<<<<<<<<<<
 *                 cdef numrow = nfo.size(ptr) / rowwidth
 *                 oldsize = nfo.size(ptr)
 */
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_nfo->size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_rowwidth = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/pyx/basedata.pyx":72
 * 
 *                 cdef rowwidth = nfo.size()
 *                 cdef numrow = nfo.size(ptr) / rowwidth             # <<<<<<<<<<<<<<
 *                 oldsize = nfo.size(ptr)
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_nfo->size(__pyx_v_ptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_v_rowwidth); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_numrow = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "src/pyx/basedata.pyx":73
 *                 cdef rowwidth = nfo.size()
 *                 cdef numrow = nfo.size(ptr) / rowwidth
 *                 oldsize = nfo.size(ptr)             # <<<<<<<<<<<<<<
 * 
 *                 if nfo.Container() and not nfo.FixedSize():
 */
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_nfo->size(__pyx_v_ptr)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_oldsize = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "src/pyx/basedata.pyx":75
 *                 oldsize = nfo.size(ptr)
 * 
 *                 if nfo.Container() and not nfo.FixedSize():             # <<<<<<<<<<<<<<
 *                         nfo.setSize(ptr, nfo.size(ptr)+nfo.size())
 * 
 */
  __pyx_t_4 = (__pyx_v_nfo->Container() != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = ((!(__pyx_v_nfo->FixedSize() != 0)) != 0);
  __pyx_t_3 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "src/pyx/basedata.pyx":76
 * 
 *                 if nfo.Container() and not nfo.FixedSize():
 *                         nfo.setSize(ptr, nfo.size(ptr)+nfo.size())             # <<<<<<<<<<<<<<
 * 
 *                         if rowwidth == 1:
 */
    __pyx_v_nfo->setSize(__pyx_v_ptr, (__pyx_v_nfo->size(__pyx_v_ptr) + __pyx_v_nfo->size()));

    /* "src/pyx/basedata.pyx":78
 *                         nfo.setSize(ptr, nfo.size(ptr)+nfo.size())
 * 
 *                         if rowwidth == 1:             # <<<<<<<<<<<<<<
 *                                 if nfo.Scalar():
 *                                         nfo.setScalarValue(ptr, oldsize, value)
 */
    __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_rowwidth, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_3) {

      /* "src/pyx/basedata.pyx":79
 * 
 *                         if rowwidth == 1:
 *                                 if nfo.Scalar():             # <<<<<<<<<<<<<<
 *                                         nfo.setScalarValue(ptr, oldsize, value)
 *                                 if nfo.Integer():
 */
      __pyx_t_3 = (__pyx_v_nfo->Scalar() != 0);
      if (__pyx_t_3) {

        /* "src/pyx/basedata.pyx":80
 *                         if rowwidth == 1:
 *                                 if nfo.Scalar():
 *                                         nfo.setScalarValue(ptr, oldsize, value)             # <<<<<<<<<<<<<<
 *                                 if nfo.Integer():
 *                                         nfo.setIntegerValue(ptr, oldsize, value)
 */
        __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_oldsize); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_v_nfo->setScalarValue(__pyx_v_ptr, __pyx_t_5, __pyx_t_6);

        /* "src/pyx/basedata.pyx":79
 * 
 *                         if rowwidth == 1:
 *                                 if nfo.Scalar():             # <<<<<<<<<<<<<<
 *                                         nfo.setScalarValue(ptr, oldsize, value)
 *                                 if nfo.Integer():
 */
      }

      /* "src/pyx/basedata.pyx":81
 *                                 if nfo.Scalar():
 *                                         nfo.setScalarValue(ptr, oldsize, value)
 *                                 if nfo.Integer():             # <<<<<<<<<<<<<<
 *                                         nfo.setIntegerValue(ptr, oldsize, value)
 *                         else:
 */
      __pyx_t_3 = (__pyx_v_nfo->Integer() != 0);
      if (__pyx_t_3) {

        /* "src/pyx/basedata.pyx":82
 *                                         nfo.setScalarValue(ptr, oldsize, value)
 *                                 if nfo.Integer():
 *                                         nfo.setIntegerValue(ptr, oldsize, value)             # <<<<<<<<<<<<<<
 *                         else:
 *                                 for i in range(0, rowwidth):
 */
        __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_v_oldsize); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_7 = __Pyx_PyInt_As_PY_LONG_LONG(__pyx_v_value); if (unlikely((__pyx_t_7 == (PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_v_nfo->setIntegerValue(__pyx_v_ptr, __pyx_t_5, __pyx_t_7);

        /* "src/pyx/basedata.pyx":81
 *                                 if nfo.Scalar():
 *                                         nfo.setScalarValue(ptr, oldsize, value)
 *                                 if nfo.Integer():             # <<<<<<<<<<<<<<
 *                                         nfo.setIntegerValue(ptr, oldsize, value)
 *                         else:
 */
      }

      /* "src/pyx/basedata.pyx":78
 *                         nfo.setSize(ptr, nfo.size(ptr)+nfo.size())
 * 
 *                         if rowwidth == 1:             # <<<<<<<<<<<<<<
 *                                 if nfo.Scalar():
 *                                         nfo.setScalarValue(ptr, oldsize, value)
 */
      goto __pyx_L6;
    }

    /* "src/pyx/basedata.pyx":84
 *                                         nfo.setIntegerValue(ptr, oldsize, value)
 *                         else:
 *                                 for i in range(0, rowwidth):             # <<<<<<<<<<<<<<
 *                                         if nfo.Scalar():
 *                                                 nfo.setScalarValue(ptr, oldsize+i, value[i])
 */
    /*else*/ {
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_int_0);
      __Pyx_INCREF(__pyx_v_rowwidth);
      __Pyx_GIVEREF(__pyx_v_rowwidth);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_rowwidth);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
        __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_8 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_9 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      for (;;) {
        if (likely(!__pyx_t_9)) {
          if (likely(PyList_CheckExact(__pyx_t_2))) {
            if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_1); __pyx_t_8++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #else
            __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_1);
            #endif
          } else {
            if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_1); __pyx_t_8++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            #else
            __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(__pyx_t_1);
            #endif
          }
        } else {
          __pyx_t_1 = __pyx_t_9(__pyx_t_2);
          if (unlikely(!__pyx_t_1)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else {__pyx_filename = __pyx_f[4]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_1);
        }
        __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "src/pyx/basedata.pyx":85
 *                         else:
 *                                 for i in range(0, rowwidth):
 *                                         if nfo.Scalar():             # <<<<<<<<<<<<<<
 *                                                 nfo.setScalarValue(ptr, oldsize+i, value[i])
 *                                         if nfo.Integer():
 */
        __pyx_t_3 = (__pyx_v_nfo->Scalar() != 0);
        if (__pyx_t_3) {

          /* "src/pyx/basedata.pyx":86
 *                                 for i in range(0, rowwidth):
 *                                         if nfo.Scalar():
 *                                                 nfo.setScalarValue(ptr, oldsize+i, value[i])             # <<<<<<<<<<<<<<
 *                                         if nfo.Integer():
 *                                                 nfo.setIntegerValue(ptr, oldsize+i, value[i])
 */
          __pyx_t_1 = PyNumber_Add(__pyx_v_oldsize, __pyx_v_i); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = PyObject_GetItem(__pyx_v_value, __pyx_v_i); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_v_nfo->setScalarValue(__pyx_v_ptr, __pyx_t_5, __pyx_t_6);

          /* "src/pyx/basedata.pyx":85
 *                         else:
 *                                 for i in range(0, rowwidth):
 *                                         if nfo.Scalar():             # <<<<<<<<<<<<<<
 *                                                 nfo.setScalarValue(ptr, oldsize+i, value[i])
 *                                         if nfo.Integer():
 */
        }

        /* "src/pyx/basedata.pyx":87
 *                                         if nfo.Scalar():
 *                                                 nfo.setScalarValue(ptr, oldsize+i, value[i])
 *                                         if nfo.Integer():             # <<<<<<<<<<<<<<
 *                                                 nfo.setIntegerValue(ptr, oldsize+i, value[i])
 * 
 */
        __pyx_t_3 = (__pyx_v_nfo->Integer() != 0);
        if (__pyx_t_3) {

          /* "src/pyx/basedata.pyx":88
 *                                                 nfo.setScalarValue(ptr, oldsize+i, value[i])
 *                                         if nfo.Integer():
 *                                                 nfo.setIntegerValue(ptr, oldsize+i, value[i])             # <<<<<<<<<<<<<<
 * 
 *                         self.realptr.endEditVoidPtr()
 */
          __pyx_t_1 = PyNumber_Add(__pyx_v_oldsize, __pyx_v_i); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_5 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_5 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = PyObject_GetItem(__pyx_v_value, __pyx_v_i); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_7 = __Pyx_PyInt_As_PY_LONG_LONG(__pyx_t_1); if (unlikely((__pyx_t_7 == (PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_v_nfo->setIntegerValue(__pyx_v_ptr, __pyx_t_5, __pyx_t_7);

          /* "src/pyx/basedata.pyx":87
 *                                         if nfo.Scalar():
 *                                                 nfo.setScalarValue(ptr, oldsize+i, value[i])
 *                                         if nfo.Integer():             # <<<<<<<<<<<<<<
 *                                                 nfo.setIntegerValue(ptr, oldsize+i, value[i])
 * 
 */
        }

        /* "src/pyx/basedata.pyx":84
 *                                         nfo.setIntegerValue(ptr, oldsize, value)
 *                         else:
 *                                 for i in range(0, rowwidth):             # <<<<<<<<<<<<<<
 *                                         if nfo.Scalar():
 *                                                 nfo.setScalarValue(ptr, oldsize+i, value[i])
 */
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L6:;

    /* "src/pyx/basedata.pyx":90
 *                                                 nfo.setIntegerValue(ptr, oldsize+i, value[i])
 * 
 *                         self.realptr.endEditVoidPtr()             # <<<<<<<<<<<<<<
 *                         return
 *                 self.realptr.endEditVoidPtr()
 */
    __pyx_v_self->realptr->endEditVoidPtr();

    /* "src/pyx/basedata.pyx":91
 * 
 *                         self.realptr.endEditVoidPtr()
 *                         return             # <<<<<<<<<<<<<<
 *                 self.realptr.endEditVoidPtr()
 *                 raise TypeError("This DataField is not a container or it cannot be resized.")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "src/pyx/basedata.pyx":75
 *                 oldsize = nfo.size(ptr)
 * 
 *                 if nfo.Container() and not nfo.FixedSize():             # <<<<<<<<<<<<<<
 *                         nfo.setSize(ptr, nfo.size(ptr)+nfo.size())
 * 
 */
  }

  /* "src/pyx/basedata.pyx":92
 *                         self.realptr.endEditVoidPtr()
 *                         return
 *                 self.realptr.endEditVoidPtr()             # <<<<<<<<<<<<<<
 *                 raise TypeError("This DataField is not a container or it cannot be resized.")
 * 
 */
  __pyx_v_self->realptr->endEditVoidPtr();

  /* "src/pyx/basedata.pyx":93
 *                         return
 *                 self.realptr.endEditVoidPtr()
 *                 raise TypeError("This DataField is not a container or it cannot be resized.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  {__pyx_filename = __pyx_f[4]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "src/pyx/basedata.pyx":66
 *                 return len(self)
 * 
 *         def append(self, value):             # <<<<<<<<<<<<<<
 *                 """ Add a new value to the data field """
 *                 cdef const _AbstractTypeInfo* nfo=self.realptr.getValueTypeInfo()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("sofacython.BaseData.append", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_rowwidth);
  __Pyx_XDECREF(__pyx_v_numrow);
  __Pyx_XDECREF(__pyx_v_oldsize);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/basedata.pyx":97
 * 
 * 
 *         def setPersistent(self, bool b):             # <<<<<<<<<<<<<<
 *                 """ By default BaseData are not serialized. You can use this function
 *                     to indicate the contrary.
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_8BaseData_13setPersistent(PyObject *__pyx_v_self, PyObject *__pyx_arg_b); /*proto*/
static char __pyx_doc_10sofacython_8BaseData_12setPersistent[] = " By default BaseData are not serialized. You can use this function\n                    to indicate the contrary.  \n                     \n                    This may be usefull if you are implementing editting/modelling features\n                    using the script and want the changed made to the scene to be saved.          \n                ";
static PyObject *__pyx_pw_10sofacython_8BaseData_13setPersistent(PyObject *__pyx_v_self, PyObject *__pyx_arg_b) {
  bool __pyx_v_b;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setPersistent (wrapper)", 0);
  assert(__pyx_arg_b); {
    __pyx_v_b = __Pyx_PyObject_IsTrue(__pyx_arg_b); if (unlikely((__pyx_v_b == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("sofacython.BaseData.setPersistent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10sofacython_8BaseData_12setPersistent(((struct __pyx_obj_10sofacython_BaseData *)__pyx_v_self), ((bool)__pyx_v_b));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_8BaseData_12setPersistent(struct __pyx_obj_10sofacython_BaseData *__pyx_v_self, bool __pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setPersistent", 0);

  /* "src/pyx/basedata.pyx":104
 *                     using the script and want the changed made to the scene to be saved.
 *                 """
 *                 self.realptr.setPersistent(<bool>b)             # <<<<<<<<<<<<<<
 * 
 *         def isPersistent(self):
 */
  __pyx_v_self->realptr->setPersistent(((bool)__pyx_v_b));

  /* "src/pyx/basedata.pyx":97
 * 
 * 
 *         def setPersistent(self, bool b):             # <<<<<<<<<<<<<<
 *                 """ By default BaseData are not serialized. You can use this function
 *                     to indicate the contrary.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/basedata.pyx":106
 *                 self.realptr.setPersistent(<bool>b)
 * 
 *         def isPersistent(self):             # <<<<<<<<<<<<<<
 *                 """ By default BaseData are not serialized. You can use the setPersistent function
 *                     to indicate the contrary and the getPersistent() one to get the current state.
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_8BaseData_15isPersistent(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10sofacython_8BaseData_14isPersistent[] = " By default BaseData are not serialized. You can use the setPersistent function\n                    to indicate the contrary and the getPersistent() one to get the current state.\n                    \n                    Example: \n                       if node.getObject(\"ThisObject\").isPersistent() : \n                                print(\"This DataField will not be serialized\")  \n                    This may be usefull if you are implementing editting/modelling features\n                    using the script and want the changed made to the scene to be saved.          \n                ";
static PyObject *__pyx_pw_10sofacython_8BaseData_15isPersistent(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isPersistent (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_8BaseData_14isPersistent(((struct __pyx_obj_10sofacython_BaseData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_8BaseData_14isPersistent(struct __pyx_obj_10sofacython_BaseData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isPersistent", 0);

  /* "src/pyx/basedata.pyx":116
 *                     using the script and want the changed made to the scene to be saved.
 *                 """
 *                 return self.realptr.isPersistent()             # <<<<<<<<<<<<<<
 * 
 *         def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->realptr->isPersistent()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyx/basedata.pyx":106
 *                 self.realptr.setPersistent(<bool>b)
 * 
 *         def isPersistent(self):             # <<<<<<<<<<<<<<
 *                 """ By default BaseData are not serialized. You can use the setPersistent function
 *                     to indicate the contrary and the getPersistent() one to get the current state.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.BaseData.isPersistent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/basedata.pyx":118
 *                 return self.realptr.isPersistent()
 * 
 *         def __len__(self):             # <<<<<<<<<<<<<<
 *                 cdef const _AbstractTypeInfo* nfo=self.realptr.getValueTypeInfo()
 *                 cdef const void* ptr = self.realptr.getValueVoidPtr()
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_10sofacython_8BaseData_17__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_10sofacython_8BaseData_17__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_8BaseData_16__len__(((struct __pyx_obj_10sofacython_BaseData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_10sofacython_8BaseData_16__len__(struct __pyx_obj_10sofacython_BaseData *__pyx_v_self) {
  sofa::defaulttype::AbstractTypeInfo const *__pyx_v_nfo;
  void const *__pyx_v_ptr;
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  size_t __pyx_t_1;
  size_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "src/pyx/basedata.pyx":119
 * 
 *         def __len__(self):
 *                 cdef const _AbstractTypeInfo* nfo=self.realptr.getValueTypeInfo()             # <<<<<<<<<<<<<<
 *                 cdef const void* ptr = self.realptr.getValueVoidPtr()
 *                 return nfo.size(ptr)/nfo.size()
 */
  __pyx_v_nfo = __pyx_v_self->realptr->getValueTypeInfo();

  /* "src/pyx/basedata.pyx":120
 *         def __len__(self):
 *                 cdef const _AbstractTypeInfo* nfo=self.realptr.getValueTypeInfo()
 *                 cdef const void* ptr = self.realptr.getValueVoidPtr()             # <<<<<<<<<<<<<<
 *                 return nfo.size(ptr)/nfo.size()
 * 
 */
  __pyx_v_ptr = __pyx_v_self->realptr->getValueVoidPtr();

  /* "src/pyx/basedata.pyx":121
 *                 cdef const _AbstractTypeInfo* nfo=self.realptr.getValueTypeInfo()
 *                 cdef const void* ptr = self.realptr.getValueVoidPtr()
 *                 return nfo.size(ptr)/nfo.size()             # <<<<<<<<<<<<<<
 * 
 *         def __getitem__(self, key):
 */
  __pyx_t_1 = __pyx_v_nfo->size(__pyx_v_ptr);
  __pyx_t_2 = __pyx_v_nfo->size();
  if (unlikely(__pyx_t_2 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_r = (__pyx_t_1 / __pyx_t_2);
  goto __pyx_L0;

  /* "src/pyx/basedata.pyx":118
 *                 return self.realptr.isPersistent()
 * 
 *         def __len__(self):             # <<<<<<<<<<<<<<
 *                 cdef const _AbstractTypeInfo* nfo=self.realptr.getValueTypeInfo()
 *                 cdef const void* ptr = self.realptr.getValueVoidPtr()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("sofacython.BaseData.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/basedata.pyx":123
 *                 return nfo.size(ptr)/nfo.size()
 * 
 *         def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *                 cdef const _AbstractTypeInfo* nfo=self.realptr.getValueTypeInfo()
 *                 cdef const void* ptr = self.realptr.getValueVoidPtr()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_8BaseData_19__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pw_10sofacython_8BaseData_19__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_8BaseData_18__getitem__(((struct __pyx_obj_10sofacython_BaseData *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_8BaseData_18__getitem__(struct __pyx_obj_10sofacython_BaseData *__pyx_v_self, PyObject *__pyx_v_key) {
  sofa::defaulttype::AbstractTypeInfo const *__pyx_v_nfo;
  void const *__pyx_v_ptr;
  PyObject *__pyx_v_rowwidth = 0;
  PyObject *__pyx_v_numrow = 0;
  PyObject *__pyx_v_py_result = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  size_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "src/pyx/basedata.pyx":124
 * 
 *         def __getitem__(self, key):
 *                 cdef const _AbstractTypeInfo* nfo=self.realptr.getValueTypeInfo()             # <<<<<<<<<<<<<<
 *                 cdef const void* ptr = self.realptr.getValueVoidPtr()
 *                 cdef rowwidth = nfo.size()
 */
  __pyx_v_nfo = __pyx_v_self->realptr->getValueTypeInfo();

  /* "src/pyx/basedata.pyx":125
 *         def __getitem__(self, key):
 *                 cdef const _AbstractTypeInfo* nfo=self.realptr.getValueTypeInfo()
 *                 cdef const void* ptr = self.realptr.getValueVoidPtr()             # <<<<<<<<<<<<<<
 *                 cdef rowwidth = nfo.size()
 *                 cdef numrow = nfo.size(ptr) / rowwidth
 */
  __pyx_v_ptr = __pyx_v_self->realptr->getValueVoidPtr();

  /* "src/pyx/basedata.pyx":126
 *                 cdef const _AbstractTypeInfo* nfo=self.realptr.getValueTypeInfo()
 *                 cdef const void* ptr = self.realptr.getValueVoidPtr()
 *                 cdef rowwidth = nfo.size()             # <<<<<<<<<<<<<<
 *                 cdef numrow = nfo.size(ptr) / rowwidth
 *                 if not isinstance(key, int):
 */
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_nfo->size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_rowwidth = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/pyx/basedata.pyx":127
 *                 cdef const void* ptr = self.realptr.getValueVoidPtr()
 *                 cdef rowwidth = nfo.size()
 *                 cdef numrow = nfo.size(ptr) / rowwidth             # <<<<<<<<<<<<<<
 *                 if not isinstance(key, int):
 *                         raise TypeError("Expecting the key to be an interger while the provided value ["+str(key)+"] seems to be of type "+str(type(key)))
 */
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_nfo->size(__pyx_v_ptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_v_rowwidth); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_numrow = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "src/pyx/basedata.pyx":128
 *                 cdef rowwidth = nfo.size()
 *                 cdef numrow = nfo.size(ptr) / rowwidth
 *                 if not isinstance(key, int):             # <<<<<<<<<<<<<<
 *                         raise TypeError("Expecting the key to be an interger while the provided value ["+str(key)+"] seems to be of type "+str(type(key)))
 *                 if key>=numrow:
 */
  __pyx_t_3 = PyInt_Check(__pyx_v_key); 
  __pyx_t_4 = ((!(__pyx_t_3 != 0)) != 0);
  if (__pyx_t_4) {

    /* "src/pyx/basedata.pyx":129
 *                 cdef numrow = nfo.size(ptr) / rowwidth
 *                 if not isinstance(key, int):
 *                         raise TypeError("Expecting the key to be an interger while the provided value ["+str(key)+"] seems to be of type "+str(type(key)))             # <<<<<<<<<<<<<<
 *                 if key>=numrow:
 *                         raise IndexError("Key ["+str(key)+"] is to big for this array of size "+str(numrow) )
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_key);
    __Pyx_GIVEREF(__pyx_v_key);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_key);
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_kp_s_Expecting_the_key_to_be_an_inter, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_seems_to_be_of_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_key)));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(__pyx_v_key)));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(__pyx_v_key)));
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "src/pyx/basedata.pyx":128
 *                 cdef rowwidth = nfo.size()
 *                 cdef numrow = nfo.size(ptr) / rowwidth
 *                 if not isinstance(key, int):             # <<<<<<<<<<<<<<
 *                         raise TypeError("Expecting the key to be an interger while the provided value ["+str(key)+"] seems to be of type "+str(type(key)))
 *                 if key>=numrow:
 */
  }

  /* "src/pyx/basedata.pyx":130
 *                 if not isinstance(key, int):
 *                         raise TypeError("Expecting the key to be an interger while the provided value ["+str(key)+"] seems to be of type "+str(type(key)))
 *                 if key>=numrow:             # <<<<<<<<<<<<<<
 *                         raise IndexError("Key ["+str(key)+"] is to big for this array of size "+str(numrow) )
 * 
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_key, __pyx_v_numrow, Py_GE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "src/pyx/basedata.pyx":131
 *                         raise TypeError("Expecting the key to be an interger while the provided value ["+str(key)+"] seems to be of type "+str(type(key)))
 *                 if key>=numrow:
 *                         raise IndexError("Key ["+str(key)+"] is to big for this array of size "+str(numrow) )             # <<<<<<<<<<<<<<
 * 
 *                 py_result = []
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_key);
    __Pyx_GIVEREF(__pyx_v_key);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_key);
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_kp_s_Key, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_is_to_big_for_this_array_of_siz); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_numrow);
    __Pyx_GIVEREF(__pyx_v_numrow);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_numrow);
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "src/pyx/basedata.pyx":130
 *                 if not isinstance(key, int):
 *                         raise TypeError("Expecting the key to be an interger while the provided value ["+str(key)+"] seems to be of type "+str(type(key)))
 *                 if key>=numrow:             # <<<<<<<<<<<<<<
 *                         raise IndexError("Key ["+str(key)+"] is to big for this array of size "+str(numrow) )
 * 
 */
  }

  /* "src/pyx/basedata.pyx":133
 *                         raise IndexError("Key ["+str(key)+"] is to big for this array of size "+str(numrow) )
 * 
 *                 py_result = []             # <<<<<<<<<<<<<<
 *                 for i in range(0, rowwidth):
 *                         if nfo.Scalar():
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_py_result = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/pyx/basedata.pyx":134
 * 
 *                 py_result = []
 *                 for i in range(0, rowwidth):             # <<<<<<<<<<<<<<
 *                         if nfo.Scalar():
 *                                 py_result.append(nfo.getScalarValue(self.realptr.getValueVoidPtr(), key*rowwidth+i))
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_int_0);
  __Pyx_INCREF(__pyx_v_rowwidth);
  __Pyx_GIVEREF(__pyx_v_rowwidth);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_rowwidth);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[4]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "src/pyx/basedata.pyx":135
 *                 py_result = []
 *                 for i in range(0, rowwidth):
 *                         if nfo.Scalar():             # <<<<<<<<<<<<<<
 *                                 py_result.append(nfo.getScalarValue(self.realptr.getValueVoidPtr(), key*rowwidth+i))
 *                         if nfo.Integer():
 */
    __pyx_t_4 = (__pyx_v_nfo->Scalar() != 0);
    if (__pyx_t_4) {

      /* "src/pyx/basedata.pyx":136
 *                 for i in range(0, rowwidth):
 *                         if nfo.Scalar():
 *                                 py_result.append(nfo.getScalarValue(self.realptr.getValueVoidPtr(), key*rowwidth+i))             # <<<<<<<<<<<<<<
 *                         if nfo.Integer():
 *                                 py_result.append(nfo.getIntegerValue(self.realptr.getValueVoidPtr(), key*rowwidth+i))
 */
      __pyx_t_1 = PyNumber_Multiply(__pyx_v_key, __pyx_v_rowwidth); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = PyNumber_Add(__pyx_t_1, __pyx_v_i); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_5); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyFloat_FromDouble(__pyx_v_nfo->getScalarValue(__pyx_v_self->realptr->getValueVoidPtr(), __pyx_t_8)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_py_result, __pyx_t_5); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "src/pyx/basedata.pyx":135
 *                 py_result = []
 *                 for i in range(0, rowwidth):
 *                         if nfo.Scalar():             # <<<<<<<<<<<<<<
 *                                 py_result.append(nfo.getScalarValue(self.realptr.getValueVoidPtr(), key*rowwidth+i))
 *                         if nfo.Integer():
 */
    }

    /* "src/pyx/basedata.pyx":137
 *                         if nfo.Scalar():
 *                                 py_result.append(nfo.getScalarValue(self.realptr.getValueVoidPtr(), key*rowwidth+i))
 *                         if nfo.Integer():             # <<<<<<<<<<<<<<
 *                                 py_result.append(nfo.getIntegerValue(self.realptr.getValueVoidPtr(), key*rowwidth+i))
 *                         if nfo.Text():
 */
    __pyx_t_4 = (__pyx_v_nfo->Integer() != 0);
    if (__pyx_t_4) {

      /* "src/pyx/basedata.pyx":138
 *                                 py_result.append(nfo.getScalarValue(self.realptr.getValueVoidPtr(), key*rowwidth+i))
 *                         if nfo.Integer():
 *                                 py_result.append(nfo.getIntegerValue(self.realptr.getValueVoidPtr(), key*rowwidth+i))             # <<<<<<<<<<<<<<
 *                         if nfo.Text():
 *                                 py_result.append(nfo.getTextValue(self.realptr.getValueVoidPtr(), key*rowwidth+i))
 */
      __pyx_t_5 = PyNumber_Multiply(__pyx_v_key, __pyx_v_rowwidth); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = PyNumber_Add(__pyx_t_5, __pyx_v_i); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyInt_From_PY_LONG_LONG(__pyx_v_nfo->getIntegerValue(__pyx_v_self->realptr->getValueVoidPtr(), __pyx_t_8)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_py_result, __pyx_t_1); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "src/pyx/basedata.pyx":137
 *                         if nfo.Scalar():
 *                                 py_result.append(nfo.getScalarValue(self.realptr.getValueVoidPtr(), key*rowwidth+i))
 *                         if nfo.Integer():             # <<<<<<<<<<<<<<
 *                                 py_result.append(nfo.getIntegerValue(self.realptr.getValueVoidPtr(), key*rowwidth+i))
 *                         if nfo.Text():
 */
    }

    /* "src/pyx/basedata.pyx":139
 *                         if nfo.Integer():
 *                                 py_result.append(nfo.getIntegerValue(self.realptr.getValueVoidPtr(), key*rowwidth+i))
 *                         if nfo.Text():             # <<<<<<<<<<<<<<
 *                                 py_result.append(nfo.getTextValue(self.realptr.getValueVoidPtr(), key*rowwidth+i))
 * 
 */
    __pyx_t_4 = (__pyx_v_nfo->Text() != 0);
    if (__pyx_t_4) {

      /* "src/pyx/basedata.pyx":140
 *                                 py_result.append(nfo.getIntegerValue(self.realptr.getValueVoidPtr(), key*rowwidth+i))
 *                         if nfo.Text():
 *                                 py_result.append(nfo.getTextValue(self.realptr.getValueVoidPtr(), key*rowwidth+i))             # <<<<<<<<<<<<<<
 * 
 *                 if nfo.Container():
 */
      __pyx_t_1 = PyNumber_Multiply(__pyx_v_key, __pyx_v_rowwidth); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = PyNumber_Add(__pyx_t_1, __pyx_v_i); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_8 = __Pyx_PyInt_As_size_t(__pyx_t_5); if (unlikely((__pyx_t_8 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_nfo->getTextValue(__pyx_v_self->realptr->getValueVoidPtr(), __pyx_t_8)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_py_result, __pyx_t_5); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "src/pyx/basedata.pyx":139
 *                         if nfo.Integer():
 *                                 py_result.append(nfo.getIntegerValue(self.realptr.getValueVoidPtr(), key*rowwidth+i))
 *                         if nfo.Text():             # <<<<<<<<<<<<<<
 *                                 py_result.append(nfo.getTextValue(self.realptr.getValueVoidPtr(), key*rowwidth+i))
 * 
 */
    }

    /* "src/pyx/basedata.pyx":134
 * 
 *                 py_result = []
 *                 for i in range(0, rowwidth):             # <<<<<<<<<<<<<<
 *                         if nfo.Scalar():
 *                                 py_result.append(nfo.getScalarValue(self.realptr.getValueVoidPtr(), key*rowwidth+i))
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/pyx/basedata.pyx":142
 *                                 py_result.append(nfo.getTextValue(self.realptr.getValueVoidPtr(), key*rowwidth+i))
 * 
 *                 if nfo.Container():             # <<<<<<<<<<<<<<
 *                         return py_result
 *                 return py_result[0]
 */
  __pyx_t_4 = (__pyx_v_nfo->Container() != 0);
  if (__pyx_t_4) {

    /* "src/pyx/basedata.pyx":143
 * 
 *                 if nfo.Container():
 *                         return py_result             # <<<<<<<<<<<<<<
 *                 return py_result[0]
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_py_result);
    __pyx_r = __pyx_v_py_result;
    goto __pyx_L0;

    /* "src/pyx/basedata.pyx":142
 *                                 py_result.append(nfo.getTextValue(self.realptr.getValueVoidPtr(), key*rowwidth+i))
 * 
 *                 if nfo.Container():             # <<<<<<<<<<<<<<
 *                         return py_result
 *                 return py_result[0]
 */
  }

  /* "src/pyx/basedata.pyx":144
 *                 if nfo.Container():
 *                         return py_result
 *                 return py_result[0]             # <<<<<<<<<<<<<<
 * 
 *         def __setitem__(self, key, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_py_result, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pyx/basedata.pyx":123
 *                 return nfo.size(ptr)/nfo.size()
 * 
 *         def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *                 cdef const _AbstractTypeInfo* nfo=self.realptr.getValueTypeInfo()
 *                 cdef const void* ptr = self.realptr.getValueVoidPtr()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("sofacython.BaseData.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_rowwidth);
  __Pyx_XDECREF(__pyx_v_numrow);
  __Pyx_XDECREF(__pyx_v_py_result);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/basedata.pyx":146
 *                 return py_result[0]
 * 
 *         def __setitem__(self, key, value):             # <<<<<<<<<<<<<<
 *                 cdef const _AbstractTypeInfo* nfo=self.realptr.getValueTypeInfo()
 *                 cdef void* ptr = self.realptr.beginEditVoidPtr()
 */

/* Python wrapper */
static int __pyx_pw_10sofacython_8BaseData_21__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10sofacython_8BaseData_21__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_8BaseData_20__setitem__(((struct __pyx_obj_10sofacython_BaseData *)__pyx_v_self), ((PyObject *)__pyx_v_key), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10sofacython_8BaseData_20__setitem__(struct __pyx_obj_10sofacython_BaseData *__pyx_v_self, PyObject *__pyx_v_key, PyObject *__pyx_v_value) {
  sofa::defaulttype::AbstractTypeInfo const *__pyx_v_nfo;
  void *__pyx_v_ptr;
  PyObject *__pyx_v_rowwidth = 0;
  PyObject *__pyx_v_numrow = 0;
  PyObject *__pyx_v_i = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  std::string __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  double __pyx_t_10;
  PY_LONG_LONG __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "src/pyx/basedata.pyx":147
 * 
 *         def __setitem__(self, key, value):
 *                 cdef const _AbstractTypeInfo* nfo=self.realptr.getValueTypeInfo()             # <<<<<<<<<<<<<<
 *                 cdef void* ptr = self.realptr.beginEditVoidPtr()
 *                 cdef rowwidth = nfo.size()
 */
  __pyx_v_nfo = __pyx_v_self->realptr->getValueTypeInfo();

  /* "src/pyx/basedata.pyx":148
 *         def __setitem__(self, key, value):
 *                 cdef const _AbstractTypeInfo* nfo=self.realptr.getValueTypeInfo()
 *                 cdef void* ptr = self.realptr.beginEditVoidPtr()             # <<<<<<<<<<<<<<
 *                 cdef rowwidth = nfo.size()
 *                 cdef numrow = nfo.size(ptr) / rowwidth
 */
  __pyx_v_ptr = __pyx_v_self->realptr->beginEditVoidPtr();

  /* "src/pyx/basedata.pyx":149
 *                 cdef const _AbstractTypeInfo* nfo=self.realptr.getValueTypeInfo()
 *                 cdef void* ptr = self.realptr.beginEditVoidPtr()
 *                 cdef rowwidth = nfo.size()             # <<<<<<<<<<<<<<
 *                 cdef numrow = nfo.size(ptr) / rowwidth
 *                 if not isinstance(key, int):
 */
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_nfo->size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_rowwidth = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "src/pyx/basedata.pyx":150
 *                 cdef void* ptr = self.realptr.beginEditVoidPtr()
 *                 cdef rowwidth = nfo.size()
 *                 cdef numrow = nfo.size(ptr) / rowwidth             # <<<<<<<<<<<<<<
 *                 if not isinstance(key, int):
 *                         self.realptr.endEditVoidPtr()
 */
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_nfo->size(__pyx_v_ptr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_v_rowwidth); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_numrow = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "src/pyx/basedata.pyx":151
 *                 cdef rowwidth = nfo.size()
 *                 cdef numrow = nfo.size(ptr) / rowwidth
 *                 if not isinstance(key, int):             # <<<<<<<<<<<<<<
 *                         self.realptr.endEditVoidPtr()
 *                         raise TypeError("Expecting the key to be an interger while the provided value ["+str(key)+"] seems to be of type "+str(type(key)))
 */
  __pyx_t_3 = PyInt_Check(__pyx_v_key); 
  __pyx_t_4 = ((!(__pyx_t_3 != 0)) != 0);
  if (__pyx_t_4) {

    /* "src/pyx/basedata.pyx":152
 *                 cdef numrow = nfo.size(ptr) / rowwidth
 *                 if not isinstance(key, int):
 *                         self.realptr.endEditVoidPtr()             # <<<<<<<<<<<<<<
 *                         raise TypeError("Expecting the key to be an interger while the provided value ["+str(key)+"] seems to be of type "+str(type(key)))
 *                 if key>=numrow:
 */
    __pyx_v_self->realptr->endEditVoidPtr();

    /* "src/pyx/basedata.pyx":153
 *                 if not isinstance(key, int):
 *                         self.realptr.endEditVoidPtr()
 *                         raise TypeError("Expecting the key to be an interger while the provided value ["+str(key)+"] seems to be of type "+str(type(key)))             # <<<<<<<<<<<<<<
 *                 if key>=numrow:
 *                         self.realptr.endEditVoidPtr()
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_key);
    __Pyx_GIVEREF(__pyx_v_key);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_key);
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_kp_s_Expecting_the_key_to_be_an_inter, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_seems_to_be_of_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_key)));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(__pyx_v_key)));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(__pyx_v_key)));
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "src/pyx/basedata.pyx":151
 *                 cdef rowwidth = nfo.size()
 *                 cdef numrow = nfo.size(ptr) / rowwidth
 *                 if not isinstance(key, int):             # <<<<<<<<<<<<<<
 *                         self.realptr.endEditVoidPtr()
 *                         raise TypeError("Expecting the key to be an interger while the provided value ["+str(key)+"] seems to be of type "+str(type(key)))
 */
  }

  /* "src/pyx/basedata.pyx":154
 *                         self.realptr.endEditVoidPtr()
 *                         raise TypeError("Expecting the key to be an interger while the provided value ["+str(key)+"] seems to be of type "+str(type(key)))
 *                 if key>=numrow:             # <<<<<<<<<<<<<<
 *                         self.realptr.endEditVoidPtr()
 *                         raise IndexError("Key ["+str(key)+"] is to big for this array of size "+str(rowwidth) )
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_key, __pyx_v_numrow, Py_GE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "src/pyx/basedata.pyx":155
 *                         raise TypeError("Expecting the key to be an interger while the provided value ["+str(key)+"] seems to be of type "+str(type(key)))
 *                 if key>=numrow:
 *                         self.realptr.endEditVoidPtr()             # <<<<<<<<<<<<<<
 *                         raise IndexError("Key ["+str(key)+"] is to big for this array of size "+str(rowwidth) )
 * 
 */
    __pyx_v_self->realptr->endEditVoidPtr();

    /* "src/pyx/basedata.pyx":156
 *                 if key>=numrow:
 *                         self.realptr.endEditVoidPtr()
 *                         raise IndexError("Key ["+str(key)+"] is to big for this array of size "+str(rowwidth) )             # <<<<<<<<<<<<<<
 * 
 *                 if nfo.Text():
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_key);
    __Pyx_GIVEREF(__pyx_v_key);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_key);
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_kp_s_Key, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_is_to_big_for_this_array_of_siz); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_rowwidth);
    __Pyx_GIVEREF(__pyx_v_rowwidth);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_rowwidth);
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "src/pyx/basedata.pyx":154
 *                         self.realptr.endEditVoidPtr()
 *                         raise TypeError("Expecting the key to be an interger while the provided value ["+str(key)+"] seems to be of type "+str(type(key)))
 *                 if key>=numrow:             # <<<<<<<<<<<<<<
 *                         self.realptr.endEditVoidPtr()
 *                         raise IndexError("Key ["+str(key)+"] is to big for this array of size "+str(rowwidth) )
 */
  }

  /* "src/pyx/basedata.pyx":158
 *                         raise IndexError("Key ["+str(key)+"] is to big for this array of size "+str(rowwidth) )
 * 
 *                 if nfo.Text():             # <<<<<<<<<<<<<<
 *                         nfo.setTextValue(ptr, key, value)
 *                         self.realptr.endEditVoidPtr()
 */
  __pyx_t_4 = (__pyx_v_nfo->Text() != 0);
  if (__pyx_t_4) {

    /* "src/pyx/basedata.pyx":159
 * 
 *                 if nfo.Text():
 *                         nfo.setTextValue(ptr, key, value)             # <<<<<<<<<<<<<<
 *                         self.realptr.endEditVoidPtr()
 *                         return
 */
    __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_v_key); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_7 = __pyx_convert_string_from_py_std__in_string(__pyx_v_value); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_nfo->setTextValue(__pyx_v_ptr, __pyx_t_6, __pyx_t_7);

    /* "src/pyx/basedata.pyx":160
 *                 if nfo.Text():
 *                         nfo.setTextValue(ptr, key, value)
 *                         self.realptr.endEditVoidPtr()             # <<<<<<<<<<<<<<
 *                         return
 * 
 */
    __pyx_v_self->realptr->endEditVoidPtr();

    /* "src/pyx/basedata.pyx":161
 *                         nfo.setTextValue(ptr, key, value)
 *                         self.realptr.endEditVoidPtr()
 *                         return             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "src/pyx/basedata.pyx":158
 *                         raise IndexError("Key ["+str(key)+"] is to big for this array of size "+str(rowwidth) )
 * 
 *                 if nfo.Text():             # <<<<<<<<<<<<<<
 *                         nfo.setTextValue(ptr, key, value)
 *                         self.realptr.endEditVoidPtr()
 */
  }

  /* "src/pyx/basedata.pyx":164
 * 
 * 
 *                 if len(value) != rowwidth:             # <<<<<<<<<<<<<<
 *                         self.realptr.endEditVoidPtr()
 *                         raise IndexError("Value has a length of size ["+str(len(value))+"] which differ from the expected size "+str(rowwidth) )
 */
  __pyx_t_8 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_v_rowwidth, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "src/pyx/basedata.pyx":165
 * 
 *                 if len(value) != rowwidth:
 *                         self.realptr.endEditVoidPtr()             # <<<<<<<<<<<<<<
 *                         raise IndexError("Value has a length of size ["+str(len(value))+"] which differ from the expected size "+str(rowwidth) )
 * 
 */
    __pyx_v_self->realptr->endEditVoidPtr();

    /* "src/pyx/basedata.pyx":166
 *                 if len(value) != rowwidth:
 *                         self.realptr.endEditVoidPtr()
 *                         raise IndexError("Value has a length of size ["+str(len(value))+"] which differ from the expected size "+str(rowwidth) )             # <<<<<<<<<<<<<<
 * 
 *                 for i in range(0, rowwidth):
 */
    __pyx_t_8 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_8); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_kp_s_Value_has_a_length_of_size, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_kp_s_which_differ_from_the_expected); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_rowwidth);
    __Pyx_GIVEREF(__pyx_v_rowwidth);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_rowwidth);
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "src/pyx/basedata.pyx":164
 * 
 * 
 *                 if len(value) != rowwidth:             # <<<<<<<<<<<<<<
 *                         self.realptr.endEditVoidPtr()
 *                         raise IndexError("Value has a length of size ["+str(len(value))+"] which differ from the expected size "+str(rowwidth) )
 */
  }

  /* "src/pyx/basedata.pyx":168
 *                         raise IndexError("Value has a length of size ["+str(len(value))+"] which differ from the expected size "+str(rowwidth) )
 * 
 *                 for i in range(0, rowwidth):             # <<<<<<<<<<<<<<
 *                         if nfo.Scalar():
 *                                 nfo.setScalarValue(ptr, key*rowwidth+i, value[i])
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_int_0);
  __Pyx_INCREF(__pyx_v_rowwidth);
  __Pyx_GIVEREF(__pyx_v_rowwidth);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_rowwidth);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
    __pyx_t_2 = __pyx_t_5; __Pyx_INCREF(__pyx_t_2); __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_8 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_5); __pyx_t_8++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_5); __pyx_t_8++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_9(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[4]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "src/pyx/basedata.pyx":169
 * 
 *                 for i in range(0, rowwidth):
 *                         if nfo.Scalar():             # <<<<<<<<<<<<<<
 *                                 nfo.setScalarValue(ptr, key*rowwidth+i, value[i])
 *                         if nfo.Integer():
 */
    __pyx_t_4 = (__pyx_v_nfo->Scalar() != 0);
    if (__pyx_t_4) {

      /* "src/pyx/basedata.pyx":170
 *                 for i in range(0, rowwidth):
 *                         if nfo.Scalar():
 *                                 nfo.setScalarValue(ptr, key*rowwidth+i, value[i])             # <<<<<<<<<<<<<<
 *                         if nfo.Integer():
 *                                 nfo.setIntegerValue(ptr, key*rowwidth+i, value[i])
 */
      __pyx_t_5 = PyNumber_Multiply(__pyx_v_key, __pyx_v_rowwidth); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = PyNumber_Add(__pyx_t_5, __pyx_v_i); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyObject_GetItem(__pyx_v_value, __pyx_v_i); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_nfo->setScalarValue(__pyx_v_ptr, __pyx_t_6, __pyx_t_10);

      /* "src/pyx/basedata.pyx":169
 * 
 *                 for i in range(0, rowwidth):
 *                         if nfo.Scalar():             # <<<<<<<<<<<<<<
 *                                 nfo.setScalarValue(ptr, key*rowwidth+i, value[i])
 *                         if nfo.Integer():
 */
    }

    /* "src/pyx/basedata.pyx":171
 *                         if nfo.Scalar():
 *                                 nfo.setScalarValue(ptr, key*rowwidth+i, value[i])
 *                         if nfo.Integer():             # <<<<<<<<<<<<<<
 *                                 nfo.setIntegerValue(ptr, key*rowwidth+i, value[i])
 *                 self.realptr.endEditVoidPtr()
 */
    __pyx_t_4 = (__pyx_v_nfo->Integer() != 0);
    if (__pyx_t_4) {

      /* "src/pyx/basedata.pyx":172
 *                                 nfo.setScalarValue(ptr, key*rowwidth+i, value[i])
 *                         if nfo.Integer():
 *                                 nfo.setIntegerValue(ptr, key*rowwidth+i, value[i])             # <<<<<<<<<<<<<<
 *                 self.realptr.endEditVoidPtr()
 * 
 */
      __pyx_t_1 = PyNumber_Multiply(__pyx_v_key, __pyx_v_rowwidth); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = PyNumber_Add(__pyx_t_1, __pyx_v_i); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_6 = __Pyx_PyInt_As_size_t(__pyx_t_5); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyObject_GetItem(__pyx_v_value, __pyx_v_i); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_11 = __Pyx_PyInt_As_PY_LONG_LONG(__pyx_t_5); if (unlikely((__pyx_t_11 == (PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_nfo->setIntegerValue(__pyx_v_ptr, __pyx_t_6, __pyx_t_11);

      /* "src/pyx/basedata.pyx":171
 *                         if nfo.Scalar():
 *                                 nfo.setScalarValue(ptr, key*rowwidth+i, value[i])
 *                         if nfo.Integer():             # <<<<<<<<<<<<<<
 *                                 nfo.setIntegerValue(ptr, key*rowwidth+i, value[i])
 *                 self.realptr.endEditVoidPtr()
 */
    }

    /* "src/pyx/basedata.pyx":168
 *                         raise IndexError("Value has a length of size ["+str(len(value))+"] which differ from the expected size "+str(rowwidth) )
 * 
 *                 for i in range(0, rowwidth):             # <<<<<<<<<<<<<<
 *                         if nfo.Scalar():
 *                                 nfo.setScalarValue(ptr, key*rowwidth+i, value[i])
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "src/pyx/basedata.pyx":173
 *                         if nfo.Integer():
 *                                 nfo.setIntegerValue(ptr, key*rowwidth+i, value[i])
 *                 self.realptr.endEditVoidPtr()             # <<<<<<<<<<<<<<
 * 
 *         def __str__(self):
 */
  __pyx_v_self->realptr->endEditVoidPtr();

  /* "src/pyx/basedata.pyx":146
 *                 return py_result[0]
 * 
 *         def __setitem__(self, key, value):             # <<<<<<<<<<<<<<
 *                 cdef const _AbstractTypeInfo* nfo=self.realptr.getValueTypeInfo()
 *                 cdef void* ptr = self.realptr.beginEditVoidPtr()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("sofacython.BaseData.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_rowwidth);
  __Pyx_XDECREF(__pyx_v_numrow);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/basedata.pyx":175
 *                 self.realptr.endEditVoidPtr()
 * 
 *         def __str__(self):             # <<<<<<<<<<<<<<
 *                 return self.realptr.getValueString()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_8BaseData_23__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10sofacython_8BaseData_23__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_8BaseData_22__str__(((struct __pyx_obj_10sofacython_BaseData *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_8BaseData_22__str__(struct __pyx_obj_10sofacython_BaseData *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "src/pyx/basedata.pyx":176
 * 
 *         def __str__(self):
 *                 return self.realptr.getValueString()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->realptr->getValueString()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyx/basedata.pyx":175
 *                 self.realptr.endEditVoidPtr()
 * 
 *         def __str__(self):             # <<<<<<<<<<<<<<
 *                 return self.realptr.getValueString()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.BaseData.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/baseobject.pyx":16
 *         cdef _BaseObject* baseobjectptr
 * 
 *         def init(self):             # <<<<<<<<<<<<<<
 *                 self.baseobjectptr.init()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_10BaseObject_1init(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10sofacython_10BaseObject_1init(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_10BaseObject_init(((struct __pyx_obj_10sofacython_BaseObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_10BaseObject_init(struct __pyx_obj_10sofacython_BaseObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "src/pyx/baseobject.pyx":17
 * 
 *         def init(self):
 *                 self.baseobjectptr.init()             # <<<<<<<<<<<<<<
 * 
 *         def bwdInit(self):
 */
  __pyx_v_self->baseobjectptr->init();

  /* "src/pyx/baseobject.pyx":16
 *         cdef _BaseObject* baseobjectptr
 * 
 *         def init(self):             # <<<<<<<<<<<<<<
 *                 self.baseobjectptr.init()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/baseobject.pyx":19
 *                 self.baseobjectptr.init()
 * 
 *         def bwdInit(self):             # <<<<<<<<<<<<<<
 *                 self.baseobjectptr.bwdInit()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_10BaseObject_3bwdInit(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10sofacython_10BaseObject_3bwdInit(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bwdInit (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_10BaseObject_2bwdInit(((struct __pyx_obj_10sofacython_BaseObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_10BaseObject_2bwdInit(struct __pyx_obj_10sofacython_BaseObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bwdInit", 0);

  /* "src/pyx/baseobject.pyx":20
 * 
 *         def bwdInit(self):
 *                 self.baseobjectptr.bwdInit()             # <<<<<<<<<<<<<<
 * 
 *         def reinit(self):
 */
  __pyx_v_self->baseobjectptr->bwdInit();

  /* "src/pyx/baseobject.pyx":19
 *                 self.baseobjectptr.init()
 * 
 *         def bwdInit(self):             # <<<<<<<<<<<<<<
 *                 self.baseobjectptr.bwdInit()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/baseobject.pyx":22
 *                 self.baseobjectptr.bwdInit()
 * 
 *         def reinit(self):             # <<<<<<<<<<<<<<
 *                 self.baseobjectptr.reinit()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_10BaseObject_5reinit(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10sofacython_10BaseObject_5reinit(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reinit (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_10BaseObject_4reinit(((struct __pyx_obj_10sofacython_BaseObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_10BaseObject_4reinit(struct __pyx_obj_10sofacython_BaseObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reinit", 0);

  /* "src/pyx/baseobject.pyx":23
 * 
 *         def reinit(self):
 *                 self.baseobjectptr.reinit()             # <<<<<<<<<<<<<<
 * 
 *         def reset(self):
 */
  __pyx_v_self->baseobjectptr->reinit();

  /* "src/pyx/baseobject.pyx":22
 *                 self.baseobjectptr.bwdInit()
 * 
 *         def reinit(self):             # <<<<<<<<<<<<<<
 *                 self.baseobjectptr.reinit()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/baseobject.pyx":25
 *                 self.baseobjectptr.reinit()
 * 
 *         def reset(self):             # <<<<<<<<<<<<<<
 *                 self.baseobjectptr.reset()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_10BaseObject_7reset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10sofacython_10BaseObject_7reset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_10BaseObject_6reset(((struct __pyx_obj_10sofacython_BaseObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_10BaseObject_6reset(struct __pyx_obj_10sofacython_BaseObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset", 0);

  /* "src/pyx/baseobject.pyx":26
 * 
 *         def reset(self):
 *                 self.baseobjectptr.reset()             # <<<<<<<<<<<<<<
 * 
 *         @staticmethod
 */
  __pyx_v_self->baseobjectptr->reset();

  /* "src/pyx/baseobject.pyx":25
 *                 self.baseobjectptr.reinit()
 * 
 *         def reset(self):             # <<<<<<<<<<<<<<
 *                 self.baseobjectptr.reset()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/baseobject.pyx":29
 * 
 *         @staticmethod
 *         cdef createFrom(_BaseObject* aBaseObject):             # <<<<<<<<<<<<<<
 *                 cdef BaseObject py_obj = BaseObject.__new__(BaseObject)
 *                 py_obj.realptr = py_obj.baseobjectptr = aBaseObject
 */

static PyObject *__pyx_f_10sofacython_10BaseObject_createFrom(sofa::core::objectmodel::BaseObject *__pyx_v_aBaseObject) {
  struct __pyx_obj_10sofacython_BaseObject *__pyx_v_py_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("createFrom", 0);

  /* "src/pyx/baseobject.pyx":30
 *         @staticmethod
 *         cdef createFrom(_BaseObject* aBaseObject):
 *                 cdef BaseObject py_obj = BaseObject.__new__(BaseObject)             # <<<<<<<<<<<<<<
 *                 py_obj.realptr = py_obj.baseobjectptr = aBaseObject
 *                 return py_obj
 */
  __pyx_t_1 = __pyx_tp_new_10sofacython_BaseObject(((PyTypeObject *)__pyx_ptype_10sofacython_BaseObject), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10sofacython_BaseObject)))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_py_obj = ((struct __pyx_obj_10sofacython_BaseObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pyx/baseobject.pyx":31
 *         cdef createFrom(_BaseObject* aBaseObject):
 *                 cdef BaseObject py_obj = BaseObject.__new__(BaseObject)
 *                 py_obj.realptr = py_obj.baseobjectptr = aBaseObject             # <<<<<<<<<<<<<<
 *                 return py_obj
 * 
 */
  __pyx_v_py_obj->__pyx_base.realptr = __pyx_v_aBaseObject;
  __pyx_v_py_obj->baseobjectptr = __pyx_v_aBaseObject;

  /* "src/pyx/baseobject.pyx":32
 *                 cdef BaseObject py_obj = BaseObject.__new__(BaseObject)
 *                 py_obj.realptr = py_obj.baseobjectptr = aBaseObject
 *                 return py_obj             # <<<<<<<<<<<<<<
 * 
 *         def __init__(self, Base src not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_obj));
  __pyx_r = ((PyObject *)__pyx_v_py_obj);
  goto __pyx_L0;

  /* "src/pyx/baseobject.pyx":29
 * 
 *         @staticmethod
 *         cdef createFrom(_BaseObject* aBaseObject):             # <<<<<<<<<<<<<<
 *                 cdef BaseObject py_obj = BaseObject.__new__(BaseObject)
 *                 py_obj.realptr = py_obj.baseobjectptr = aBaseObject
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.BaseObject.createFrom", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/baseobject.pyx":34
 *                 return py_obj
 * 
 *         def __init__(self, Base src not None):             # <<<<<<<<<<<<<<
 *                 cdef BaseObject pyobj = BaseObject.__new__(BaseObject)
 *                 cdef _BaseObject* obj = dynamic_cast_baseobject_ptr(src.realptr)
 */

/* Python wrapper */
static int __pyx_pw_10sofacython_10BaseObject_9__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10sofacython_10BaseObject_9__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_10sofacython_Base *__pyx_v_src = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_src,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_src)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_src = ((struct __pyx_obj_10sofacython_Base *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[5]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sofacython.BaseObject.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_src), __pyx_ptype_10sofacython_Base, 0, "src", 0))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_10sofacython_10BaseObject_8__init__(((struct __pyx_obj_10sofacython_BaseObject *)__pyx_v_self), __pyx_v_src);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10sofacython_10BaseObject_8__init__(struct __pyx_obj_10sofacython_BaseObject *__pyx_v_self, struct __pyx_obj_10sofacython_Base *__pyx_v_src) {
  CYTHON_UNUSED struct __pyx_obj_10sofacython_BaseObject *__pyx_v_pyobj = 0;
  sofa::core::objectmodel::BaseObject *__pyx_v_obj;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  sofa::core::objectmodel::BaseObject *__pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "src/pyx/baseobject.pyx":35
 * 
 *         def __init__(self, Base src not None):
 *                 cdef BaseObject pyobj = BaseObject.__new__(BaseObject)             # <<<<<<<<<<<<<<
 *                 cdef _BaseObject* obj = dynamic_cast_baseobject_ptr(src.realptr)
 *                 if obj == NULL:
 */
  __pyx_t_1 = __pyx_tp_new_10sofacython_BaseObject(((PyTypeObject *)__pyx_ptype_10sofacython_BaseObject), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10sofacython_BaseObject)))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_pyobj = ((struct __pyx_obj_10sofacython_BaseObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pyx/baseobject.pyx":36
 *         def __init__(self, Base src not None):
 *                 cdef BaseObject pyobj = BaseObject.__new__(BaseObject)
 *                 cdef _BaseObject* obj = dynamic_cast_baseobject_ptr(src.realptr)             # <<<<<<<<<<<<<<
 *                 if obj == NULL:
 *                         raise TypeError("Unable to get a BaseObject from this Base pointer...maybe it is a BaseNode, BaseContext or something else")
 */
  __pyx_t_2 = dynamic_cast< sofa::core::objectmodel::BaseObject* >(__pyx_v_src->realptr); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_obj = __pyx_t_2;

  /* "src/pyx/baseobject.pyx":37
 *                 cdef BaseObject pyobj = BaseObject.__new__(BaseObject)
 *                 cdef _BaseObject* obj = dynamic_cast_baseobject_ptr(src.realptr)
 *                 if obj == NULL:             # <<<<<<<<<<<<<<
 *                         raise TypeError("Unable to get a BaseObject from this Base pointer...maybe it is a BaseNode, BaseContext or something else")
 *                 self.realptr = self.baseobjectptr = obj
 */
  __pyx_t_3 = ((__pyx_v_obj == NULL) != 0);
  if (__pyx_t_3) {

    /* "src/pyx/baseobject.pyx":38
 *                 cdef _BaseObject* obj = dynamic_cast_baseobject_ptr(src.realptr)
 *                 if obj == NULL:
 *                         raise TypeError("Unable to get a BaseObject from this Base pointer...maybe it is a BaseNode, BaseContext or something else")             # <<<<<<<<<<<<<<
 *                 self.realptr = self.baseobjectptr = obj
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[5]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "src/pyx/baseobject.pyx":37
 *                 cdef BaseObject pyobj = BaseObject.__new__(BaseObject)
 *                 cdef _BaseObject* obj = dynamic_cast_baseobject_ptr(src.realptr)
 *                 if obj == NULL:             # <<<<<<<<<<<<<<
 *                         raise TypeError("Unable to get a BaseObject from this Base pointer...maybe it is a BaseNode, BaseContext or something else")
 *                 self.realptr = self.baseobjectptr = obj
 */
  }

  /* "src/pyx/baseobject.pyx":39
 *                 if obj == NULL:
 *                         raise TypeError("Unable to get a BaseObject from this Base pointer...maybe it is a BaseNode, BaseContext or something else")
 *                 self.realptr = self.baseobjectptr = obj             # <<<<<<<<<<<<<<
 * 
 *         def __str__(self):
 */
  __pyx_v_self->__pyx_base.realptr = __pyx_v_obj;
  __pyx_v_self->baseobjectptr = __pyx_v_obj;

  /* "src/pyx/baseobject.pyx":34
 *                 return py_obj
 * 
 *         def __init__(self, Base src not None):             # <<<<<<<<<<<<<<
 *                 cdef BaseObject pyobj = BaseObject.__new__(BaseObject)
 *                 cdef _BaseObject* obj = dynamic_cast_baseobject_ptr(src.realptr)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.BaseObject.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pyobj);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/baseobject.pyx":41
 *                 self.realptr = self.baseobjectptr = obj
 * 
 *         def __str__(self):             # <<<<<<<<<<<<<<
 *                 return "BaseObject["+self.baseobjectptr.getClassName()+"]("+self.baseobjectptr.getName()+")"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_10BaseObject_11__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10sofacython_10BaseObject_11__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_10BaseObject_10__str__(((struct __pyx_obj_10sofacython_BaseObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_10BaseObject_10__str__(struct __pyx_obj_10sofacython_BaseObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "src/pyx/baseobject.pyx":42
 * 
 *         def __str__(self):
 *                 return "BaseObject["+self.baseobjectptr.getClassName()+"]("+self.baseobjectptr.getName()+")"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->baseobjectptr->getClassName()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_kp_s_BaseObject, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_kp_s__2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->baseobjectptr->getName()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_kp_s__3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pyx/baseobject.pyx":41
 *                 self.realptr = self.baseobjectptr = obj
 * 
 *         def __str__(self):             # <<<<<<<<<<<<<<
 *                 return "BaseObject["+self.baseobjectptr.getClassName()+"]("+self.baseobjectptr.getName()+")"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("sofacython.BaseObject.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/basenode.pyx":17
 *         cdef _BaseNode* basenodeptr
 * 
 *         def getRoot(BaseNode self):             # <<<<<<<<<<<<<<
 *                 return BaseNode.createFrom(self.basenodeptr.getRoot())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_8BaseNode_1getRoot(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10sofacython_8BaseNode_1getRoot(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getRoot (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_8BaseNode_getRoot(((struct __pyx_obj_10sofacython_BaseNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_8BaseNode_getRoot(struct __pyx_obj_10sofacython_BaseNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getRoot", 0);

  /* "src/pyx/basenode.pyx":18
 * 
 *         def getRoot(BaseNode self):
 *                 return BaseNode.createFrom(self.basenodeptr.getRoot())             # <<<<<<<<<<<<<<
 * 
 *         @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_10sofacython_8BaseNode_createFrom(__pyx_v_self->basenodeptr->getRoot()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyx/basenode.pyx":17
 *         cdef _BaseNode* basenodeptr
 * 
 *         def getRoot(BaseNode self):             # <<<<<<<<<<<<<<
 *                 return BaseNode.createFrom(self.basenodeptr.getRoot())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.BaseNode.getRoot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/basenode.pyx":21
 * 
 *         @staticmethod
 *         cdef createFrom(_BaseNode* aNode):             # <<<<<<<<<<<<<<
 *                 cdef BaseNode py_obj = Node.__new__(Node)
 *                 py_obj.realptr = py_obj.basenodeptr = aNode
 */

static PyObject *__pyx_f_10sofacython_8BaseNode_createFrom(sofa::core::objectmodel::BaseNode *__pyx_v_aNode) {
  struct __pyx_obj_10sofacython_BaseNode *__pyx_v_py_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("createFrom", 0);

  /* "src/pyx/basenode.pyx":22
 *         @staticmethod
 *         cdef createFrom(_BaseNode* aNode):
 *                 cdef BaseNode py_obj = Node.__new__(Node)             # <<<<<<<<<<<<<<
 *                 py_obj.realptr = py_obj.basenodeptr = aNode
 * 
 */
  __pyx_t_1 = __pyx_tp_new_10sofacython_Node(((PyTypeObject *)__pyx_ptype_10sofacython_Node), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10sofacython_BaseNode)))) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_py_obj = ((struct __pyx_obj_10sofacython_BaseNode *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pyx/basenode.pyx":23
 *         cdef createFrom(_BaseNode* aNode):
 *                 cdef BaseNode py_obj = Node.__new__(Node)
 *                 py_obj.realptr = py_obj.basenodeptr = aNode             # <<<<<<<<<<<<<<
 * 
 *                 return py_obj
 */
  __pyx_v_py_obj->__pyx_base.realptr = __pyx_v_aNode;
  __pyx_v_py_obj->basenodeptr = __pyx_v_aNode;

  /* "src/pyx/basenode.pyx":25
 *                 py_obj.realptr = py_obj.basenodeptr = aNode
 * 
 *                 return py_obj             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_obj));
  __pyx_r = ((PyObject *)__pyx_v_py_obj);
  goto __pyx_L0;

  /* "src/pyx/basenode.pyx":21
 * 
 *         @staticmethod
 *         cdef createFrom(_BaseNode* aNode):             # <<<<<<<<<<<<<<
 *                 cdef BaseNode py_obj = Node.__new__(Node)
 *                 py_obj.realptr = py_obj.basenodeptr = aNode
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.BaseNode.createFrom", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/basecontext.pyx":16
 * 
 *         @staticmethod
 *         cdef createFrom(_BaseContext* aContext):             # <<<<<<<<<<<<<<
 *                 cdef BaseContext py_obj = BaseContext.__new__(BaseContext)
 *                 py_obj.realptr = py_obj.basecontextptr = aContext
 */

static PyObject *__pyx_f_10sofacython_11BaseContext_createFrom(sofa::core::objectmodel::BaseContext *__pyx_v_aContext) {
  struct __pyx_obj_10sofacython_BaseContext *__pyx_v_py_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("createFrom", 0);

  /* "src/pyx/basecontext.pyx":17
 *         @staticmethod
 *         cdef createFrom(_BaseContext* aContext):
 *                 cdef BaseContext py_obj = BaseContext.__new__(BaseContext)             # <<<<<<<<<<<<<<
 *                 py_obj.realptr = py_obj.basecontextptr = aContext
 * 
 */
  __pyx_t_1 = __pyx_tp_new_10sofacython_BaseContext(((PyTypeObject *)__pyx_ptype_10sofacython_BaseContext), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10sofacython_BaseContext)))) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_py_obj = ((struct __pyx_obj_10sofacython_BaseContext *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pyx/basecontext.pyx":18
 *         cdef createFrom(_BaseContext* aContext):
 *                 cdef BaseContext py_obj = BaseContext.__new__(BaseContext)
 *                 py_obj.realptr = py_obj.basecontextptr = aContext             # <<<<<<<<<<<<<<
 * 
 *                 return py_obj
 */
  __pyx_v_py_obj->__pyx_base.realptr = __pyx_v_aContext;
  __pyx_v_py_obj->basecontextptr = __pyx_v_aContext;

  /* "src/pyx/basecontext.pyx":20
 *                 py_obj.realptr = py_obj.basecontextptr = aContext
 * 
 *                 return py_obj             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_obj));
  __pyx_r = ((PyObject *)__pyx_v_py_obj);
  goto __pyx_L0;

  /* "src/pyx/basecontext.pyx":16
 * 
 *         @staticmethod
 *         cdef createFrom(_BaseContext* aContext):             # <<<<<<<<<<<<<<
 *                 cdef BaseContext py_obj = BaseContext.__new__(BaseContext)
 *                 py_obj.realptr = py_obj.basecontextptr = aContext
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.BaseContext.createFrom", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/node.pyx":43
 *         cdef _Node* nodeptr
 * 
 *         def getContext(Node self not None):             # <<<<<<<<<<<<<<
 *                 """ Returns the context of this node """
 *                 return BaseContext.createFrom(self.nodeptr.getContext())
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_4Node_1getContext(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10sofacython_4Node_getContext[] = " Returns the context of this node ";
static PyObject *__pyx_pw_10sofacython_4Node_1getContext(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getContext (wrapper)", 0);
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "self"); {__pyx_filename = __pyx_f[8]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_r = __pyx_pf_10sofacython_4Node_getContext(((struct __pyx_obj_10sofacython_Node *)__pyx_v_self));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_4Node_getContext(struct __pyx_obj_10sofacython_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getContext", 0);

  /* "src/pyx/node.pyx":45
 *         def getContext(Node self not None):
 *                 """ Returns the context of this node """
 *                 return BaseContext.createFrom(self.nodeptr.getContext())             # <<<<<<<<<<<<<<
 * 
 *         def getRoot(Node self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_10sofacython_11BaseContext_createFrom(__pyx_v_self->nodeptr->getContext()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyx/node.pyx":43
 *         cdef _Node* nodeptr
 * 
 *         def getContext(Node self not None):             # <<<<<<<<<<<<<<
 *                 """ Returns the context of this node """
 *                 return BaseContext.createFrom(self.nodeptr.getContext())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.Node.getContext", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/node.pyx":47
 *                 return BaseContext.createFrom(self.nodeptr.getContext())
 * 
 *         def getRoot(Node self):             # <<<<<<<<<<<<<<
 *                 return Node.createFrom(<_Node*>self.nodeptr.getRoot())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_4Node_3getRoot(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10sofacython_4Node_3getRoot(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getRoot (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_4Node_2getRoot(((struct __pyx_obj_10sofacython_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_4Node_2getRoot(struct __pyx_obj_10sofacython_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getRoot", 0);

  /* "src/pyx/node.pyx":48
 * 
 *         def getRoot(Node self):
 *                 return Node.createFrom(<_Node*>self.nodeptr.getRoot())             # <<<<<<<<<<<<<<
 * 
 *         def getTreeNode(Node self not None, aName not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_10sofacython_4Node_createFrom(((sofa::simulation::Node *)__pyx_v_self->nodeptr->getRoot())); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyx/node.pyx":47
 *                 return BaseContext.createFrom(self.nodeptr.getContext())
 * 
 *         def getRoot(Node self):             # <<<<<<<<<<<<<<
 *                 return Node.createFrom(<_Node*>self.nodeptr.getRoot())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.Node.getRoot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/node.pyx":50
 *                 return Node.createFrom(<_Node*>self.nodeptr.getRoot())
 * 
 *         def getTreeNode(Node self not None, aName not None):             # <<<<<<<<<<<<<<
 *                 """ Get a descendant node given its name"""
 *                 assert isinstance(aName, (str)), 'arg aName has a wrong type. string is expected instead of '+str(type(aName))
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_4Node_5getTreeNode(PyObject *__pyx_v_self, PyObject *__pyx_v_aName); /*proto*/
static char __pyx_doc_10sofacython_4Node_4getTreeNode[] = " Get a descendant node given its name";
static PyObject *__pyx_pw_10sofacython_4Node_5getTreeNode(PyObject *__pyx_v_self, PyObject *__pyx_v_aName) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getTreeNode (wrapper)", 0);
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "self"); {__pyx_filename = __pyx_f[8]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_aName) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "aName"); {__pyx_filename = __pyx_f[8]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_r = __pyx_pf_10sofacython_4Node_4getTreeNode(((struct __pyx_obj_10sofacython_Node *)__pyx_v_self), ((PyObject *)__pyx_v_aName));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_4Node_4getTreeNode(struct __pyx_obj_10sofacython_Node *__pyx_v_self, PyObject *__pyx_v_aName) {
  sofa::simulation::Node *__pyx_v_n;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getTreeNode", 0);

  /* "src/pyx/node.pyx":52
 *         def getTreeNode(Node self not None, aName not None):
 *                 """ Get a descendant node given its name"""
 *                 assert isinstance(aName, (str)), 'arg aName has a wrong type. string is expected instead of '+str(type(aName))             # <<<<<<<<<<<<<<
 * 
 *                 cdef _Node* n=self.nodeptr.getTreeNode(aName)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyString_Check(__pyx_v_aName); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_aName)));
      __Pyx_GIVEREF(((PyObject *)Py_TYPE(__pyx_v_aName)));
      PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(__pyx_v_aName)));
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_kp_s_arg_aName_has_a_wrong_type_strin, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_Pack(1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      PyErr_SetObject(PyExc_AssertionError, __pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[8]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "src/pyx/node.pyx":54
 *                 assert isinstance(aName, (str)), 'arg aName has a wrong type. string is expected instead of '+str(type(aName))
 * 
 *                 cdef _Node* n=self.nodeptr.getTreeNode(aName)             # <<<<<<<<<<<<<<
 *                 if n != NULL:
 *                         return Node.createFrom(n)
 */
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_aName); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_n = __pyx_v_self->nodeptr->getTreeNode(__pyx_t_4);

  /* "src/pyx/node.pyx":55
 * 
 *                 cdef _Node* n=self.nodeptr.getTreeNode(aName)
 *                 if n != NULL:             # <<<<<<<<<<<<<<
 *                         return Node.createFrom(n)
 *                 return None
 */
  __pyx_t_1 = ((__pyx_v_n != NULL) != 0);
  if (__pyx_t_1) {

    /* "src/pyx/node.pyx":56
 *                 cdef _Node* n=self.nodeptr.getTreeNode(aName)
 *                 if n != NULL:
 *                         return Node.createFrom(n)             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __pyx_f_10sofacython_4Node_createFrom(__pyx_v_n); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "src/pyx/node.pyx":55
 * 
 *                 cdef _Node* n=self.nodeptr.getTreeNode(aName)
 *                 if n != NULL:             # <<<<<<<<<<<<<<
 *                         return Node.createFrom(n)
 *                 return None
 */
  }

  /* "src/pyx/node.pyx":57
 *                 if n != NULL:
 *                         return Node.createFrom(n)
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         def getChild(Node self not None, aName not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  /* "src/pyx/node.pyx":50
 *                 return Node.createFrom(<_Node*>self.nodeptr.getRoot())
 * 
 *         def getTreeNode(Node self not None, aName not None):             # <<<<<<<<<<<<<<
 *                 """ Get a descendant node given its name"""
 *                 assert isinstance(aName, (str)), 'arg aName has a wrong type. string is expected instead of '+str(type(aName))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("sofacython.Node.getTreeNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/node.pyx":59
 *                 return None
 * 
 *         def getChild(Node self not None, aName not None):             # <<<<<<<<<<<<<<
 *                 """ Get a child node given its name """
 *                 assert isinstance(aName, (str)), 'arg aName has a wrong type. string is expected instead of '+str(type(aName))
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_4Node_7getChild(PyObject *__pyx_v_self, PyObject *__pyx_v_aName); /*proto*/
static char __pyx_doc_10sofacython_4Node_6getChild[] = " Get a child node given its name ";
static PyObject *__pyx_pw_10sofacython_4Node_7getChild(PyObject *__pyx_v_self, PyObject *__pyx_v_aName) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getChild (wrapper)", 0);
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "self"); {__pyx_filename = __pyx_f[8]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_aName) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "aName"); {__pyx_filename = __pyx_f[8]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_r = __pyx_pf_10sofacython_4Node_6getChild(((struct __pyx_obj_10sofacython_Node *)__pyx_v_self), ((PyObject *)__pyx_v_aName));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_4Node_6getChild(struct __pyx_obj_10sofacython_Node *__pyx_v_self, PyObject *__pyx_v_aName) {
  sofa::simulation::Node *__pyx_v_n;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getChild", 0);

  /* "src/pyx/node.pyx":61
 *         def getChild(Node self not None, aName not None):
 *                 """ Get a child node given its name """
 *                 assert isinstance(aName, (str)), 'arg aName has a wrong type. string is expected instead of '+str(type(aName))             # <<<<<<<<<<<<<<
 * 
 *                 cdef _Node* n=self.nodeptr.getChild(aName)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyString_Check(__pyx_v_aName); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_aName)));
      __Pyx_GIVEREF(((PyObject *)Py_TYPE(__pyx_v_aName)));
      PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(__pyx_v_aName)));
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_kp_s_arg_aName_has_a_wrong_type_strin, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_Pack(1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      PyErr_SetObject(PyExc_AssertionError, __pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[8]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "src/pyx/node.pyx":63
 *                 assert isinstance(aName, (str)), 'arg aName has a wrong type. string is expected instead of '+str(type(aName))
 * 
 *                 cdef _Node* n=self.nodeptr.getChild(aName)             # <<<<<<<<<<<<<<
 *                 if n != NULL:
 *                         return Node.createFrom(n)
 */
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_aName); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_n = __pyx_v_self->nodeptr->getChild(__pyx_t_4);

  /* "src/pyx/node.pyx":64
 * 
 *                 cdef _Node* n=self.nodeptr.getChild(aName)
 *                 if n != NULL:             # <<<<<<<<<<<<<<
 *                         return Node.createFrom(n)
 *                 return None
 */
  __pyx_t_1 = ((__pyx_v_n != NULL) != 0);
  if (__pyx_t_1) {

    /* "src/pyx/node.pyx":65
 *                 cdef _Node* n=self.nodeptr.getChild(aName)
 *                 if n != NULL:
 *                         return Node.createFrom(n)             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __pyx_f_10sofacython_4Node_createFrom(__pyx_v_n); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "src/pyx/node.pyx":64
 * 
 *                 cdef _Node* n=self.nodeptr.getChild(aName)
 *                 if n != NULL:             # <<<<<<<<<<<<<<
 *                         return Node.createFrom(n)
 *                 return None
 */
  }

  /* "src/pyx/node.pyx":66
 *                 if n != NULL:
 *                         return Node.createFrom(n)
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         def getObject(Node self not None, aName not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  /* "src/pyx/node.pyx":59
 *                 return None
 * 
 *         def getChild(Node self not None, aName not None):             # <<<<<<<<<<<<<<
 *                 """ Get a child node given its name """
 *                 assert isinstance(aName, (str)), 'arg aName has a wrong type. string is expected instead of '+str(type(aName))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("sofacython.Node.getChild", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/node.pyx":68
 *                 return None
 * 
 *         def getObject(Node self not None, aName not None):             # <<<<<<<<<<<<<<
 *                 """ Get an object attached to the current node given its name """
 *                 assert isinstance(aName, (str)), 'arg aName has a wrong type. string is expected instead of '+str(type(aName))
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_4Node_9getObject(PyObject *__pyx_v_self, PyObject *__pyx_v_aName); /*proto*/
static char __pyx_doc_10sofacython_4Node_8getObject[] = " Get an object attached to the current node given its name ";
static PyObject *__pyx_pw_10sofacython_4Node_9getObject(PyObject *__pyx_v_self, PyObject *__pyx_v_aName) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getObject (wrapper)", 0);
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "self"); {__pyx_filename = __pyx_f[8]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_aName) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "aName"); {__pyx_filename = __pyx_f[8]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_r = __pyx_pf_10sofacython_4Node_8getObject(((struct __pyx_obj_10sofacython_Node *)__pyx_v_self), ((PyObject *)__pyx_v_aName));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_4Node_8getObject(struct __pyx_obj_10sofacython_Node *__pyx_v_self, PyObject *__pyx_v_aName) {
  sofa::core::objectmodel::BaseObject *__pyx_v_n;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getObject", 0);

  /* "src/pyx/node.pyx":70
 *         def getObject(Node self not None, aName not None):
 *                 """ Get an object attached to the current node given its name """
 *                 assert isinstance(aName, (str)), 'arg aName has a wrong type. string is expected instead of '+str(type(aName))             # <<<<<<<<<<<<<<
 * 
 *                 cdef _BaseObject* n=self.nodeptr.getObject(aName)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyString_Check(__pyx_v_aName); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_aName)));
      __Pyx_GIVEREF(((PyObject *)Py_TYPE(__pyx_v_aName)));
      PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(__pyx_v_aName)));
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_kp_s_arg_aName_has_a_wrong_type_strin, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_Pack(1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      PyErr_SetObject(PyExc_AssertionError, __pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[8]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "src/pyx/node.pyx":72
 *                 assert isinstance(aName, (str)), 'arg aName has a wrong type. string is expected instead of '+str(type(aName))
 * 
 *                 cdef _BaseObject* n=self.nodeptr.getObject(aName)             # <<<<<<<<<<<<<<
 *                 if n != NULL:
 *                         return BaseObject.createFrom(n)
 */
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_aName); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_n = __pyx_v_self->nodeptr->getObject(__pyx_t_4);

  /* "src/pyx/node.pyx":73
 * 
 *                 cdef _BaseObject* n=self.nodeptr.getObject(aName)
 *                 if n != NULL:             # <<<<<<<<<<<<<<
 *                         return BaseObject.createFrom(n)
 *                 return None
 */
  __pyx_t_1 = ((__pyx_v_n != NULL) != 0);
  if (__pyx_t_1) {

    /* "src/pyx/node.pyx":74
 *                 cdef _BaseObject* n=self.nodeptr.getObject(aName)
 *                 if n != NULL:
 *                         return BaseObject.createFrom(n)             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __pyx_f_10sofacython_10BaseObject_createFrom(__pyx_v_n); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "src/pyx/node.pyx":73
 * 
 *                 cdef _BaseObject* n=self.nodeptr.getObject(aName)
 *                 if n != NULL:             # <<<<<<<<<<<<<<
 *                         return BaseObject.createFrom(n)
 *                 return None
 */
  }

  /* "src/pyx/node.pyx":75
 *                 if n != NULL:
 *                         return BaseObject.createFrom(n)
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         def createChild(Node self not None, aName not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  /* "src/pyx/node.pyx":68
 *                 return None
 * 
 *         def getObject(Node self not None, aName not None):             # <<<<<<<<<<<<<<
 *                 """ Get an object attached to the current node given its name """
 *                 assert isinstance(aName, (str)), 'arg aName has a wrong type. string is expected instead of '+str(type(aName))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("sofacython.Node.getObject", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/node.pyx":77
 *                 return None
 * 
 *         def createChild(Node self not None, aName not None):             # <<<<<<<<<<<<<<
 *                 """ Create, add, then return the new child of this Node """
 *                 assert isinstance(aName, (str)), 'arg aName has a wrong type. string is expected instead of '+str(type(aName))
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_4Node_11createChild(PyObject *__pyx_v_self, PyObject *__pyx_v_aName); /*proto*/
static char __pyx_doc_10sofacython_4Node_10createChild[] = " Create, add, then return the new child of this Node ";
static PyObject *__pyx_pw_10sofacython_4Node_11createChild(PyObject *__pyx_v_self, PyObject *__pyx_v_aName) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("createChild (wrapper)", 0);
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "self"); {__pyx_filename = __pyx_f[8]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_aName) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "aName"); {__pyx_filename = __pyx_f[8]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_r = __pyx_pf_10sofacython_4Node_10createChild(((struct __pyx_obj_10sofacython_Node *)__pyx_v_self), ((PyObject *)__pyx_v_aName));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_4Node_10createChild(struct __pyx_obj_10sofacython_Node *__pyx_v_self, PyObject *__pyx_v_aName) {
  sofa::simulation::Node::SPtr __pyx_v_n;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("createChild", 0);

  /* "src/pyx/node.pyx":79
 *         def createChild(Node self not None, aName not None):
 *                 """ Create, add, then return the new child of this Node """
 *                 assert isinstance(aName, (str)), 'arg aName has a wrong type. string is expected instead of '+str(type(aName))             # <<<<<<<<<<<<<<
 * 
 *                 cdef _NodeSPtr n=self.nodeptr.createChild(aName)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyString_Check(__pyx_v_aName); 
    if (unlikely(!(__pyx_t_1 != 0))) {
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_aName)));
      __Pyx_GIVEREF(((PyObject *)Py_TYPE(__pyx_v_aName)));
      PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(__pyx_v_aName)));
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_kp_s_arg_aName_has_a_wrong_type_strin, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_Pack(1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      PyErr_SetObject(PyExc_AssertionError, __pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[8]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "src/pyx/node.pyx":81
 *                 assert isinstance(aName, (str)), 'arg aName has a wrong type. string is expected instead of '+str(type(aName))
 * 
 *                 cdef _NodeSPtr n=self.nodeptr.createChild(aName)             # <<<<<<<<<<<<<<
 *                 if n.get() != NULL:
 *                         return Node.createFrom(n.get())
 */
  __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_aName); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_n = __pyx_v_self->nodeptr->createChild(__pyx_t_4);

  /* "src/pyx/node.pyx":82
 * 
 *                 cdef _NodeSPtr n=self.nodeptr.createChild(aName)
 *                 if n.get() != NULL:             # <<<<<<<<<<<<<<
 *                         return Node.createFrom(n.get())
 *                 return None
 */
  __pyx_t_1 = ((__pyx_v_n.get() != NULL) != 0);
  if (__pyx_t_1) {

    /* "src/pyx/node.pyx":83
 *                 cdef _NodeSPtr n=self.nodeptr.createChild(aName)
 *                 if n.get() != NULL:
 *                         return Node.createFrom(n.get())             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __pyx_f_10sofacython_4Node_createFrom(__pyx_v_n.get()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "src/pyx/node.pyx":82
 * 
 *                 cdef _NodeSPtr n=self.nodeptr.createChild(aName)
 *                 if n.get() != NULL:             # <<<<<<<<<<<<<<
 *                         return Node.createFrom(n.get())
 *                 return None
 */
  }

  /* "src/pyx/node.pyx":84
 *                 if n.get() != NULL:
 *                         return Node.createFrom(n.get())
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         def createObject(Node self not None, aType not None, **kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  /* "src/pyx/node.pyx":77
 *                 return None
 * 
 *         def createChild(Node self not None, aName not None):             # <<<<<<<<<<<<<<
 *                 """ Create, add, then return the new child of this Node """
 *                 assert isinstance(aName, (str)), 'arg aName has a wrong type. string is expected instead of '+str(type(aName))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("sofacython.Node.createChild", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/node.pyx":86
 *                 return None
 * 
 *         def createObject(Node self not None, aType not None, **kwargs):             # <<<<<<<<<<<<<<
 *                 """ Create and add a new object to the current node """
 *                 desc = BaseObjectDescription(aType, aType)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_4Node_13createObject(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10sofacython_4Node_12createObject[] = " Create and add a new object to the current node ";
static PyObject *__pyx_pw_10sofacython_4Node_13createObject(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_aType = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("createObject (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_aType,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_aType)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "createObject") < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_aType = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("createObject", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[8]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("sofacython.Node.createObject", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "self"); {__pyx_filename = __pyx_f[8]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  if (unlikely(((PyObject *)__pyx_v_aType) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "aType"); {__pyx_filename = __pyx_f[8]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_r = __pyx_pf_10sofacython_4Node_12createObject(((struct __pyx_obj_10sofacython_Node *)__pyx_v_self), __pyx_v_aType, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_4Node_12createObject(struct __pyx_obj_10sofacython_Node *__pyx_v_self, PyObject *__pyx_v_aType, PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_10sofacython_BaseObjectDescription *__pyx_v_desc = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("createObject", 0);

  /* "src/pyx/node.pyx":88
 *         def createObject(Node self not None, aType not None, **kwargs):
 *                 """ Create and add a new object to the current node """
 *                 desc = BaseObjectDescription(aType, aType)             # <<<<<<<<<<<<<<
 *                 if kwargs is not None:
 *                         for key, value in kwargs.iteritems():
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_aType);
  __Pyx_GIVEREF(__pyx_v_aType);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_aType);
  __Pyx_INCREF(__pyx_v_aType);
  __Pyx_GIVEREF(__pyx_v_aType);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_aType);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_10sofacython_BaseObjectDescription), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_desc = ((struct __pyx_obj_10sofacython_BaseObjectDescription *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "src/pyx/node.pyx":89
 *                 """ Create and add a new object to the current node """
 *                 desc = BaseObjectDescription(aType, aType)
 *                 if kwargs is not None:             # <<<<<<<<<<<<<<
 *                         for key, value in kwargs.iteritems():
 *                                 desc.setAttribute(key, value)
 */
  __pyx_t_3 = (__pyx_v_kwargs != ((PyObject*)Py_None));
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "src/pyx/node.pyx":90
 *                 desc = BaseObjectDescription(aType, aType)
 *                 if kwargs is not None:
 *                         for key, value in kwargs.iteritems():             # <<<<<<<<<<<<<<
 *                                 desc.setAttribute(key, value)
 *                 return ObjectFactory.createObject(self.getContext(), desc)
 */
    __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_dict_iterator(__pyx_v_kwargs, 1, __pyx_n_s_iteritems, (&__pyx_t_6), (&__pyx_t_7)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_1;
    __pyx_t_1 = 0;
    while (1) {
      __pyx_t_9 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_6, &__pyx_t_5, &__pyx_t_1, &__pyx_t_8, NULL, __pyx_t_7);
      if (unlikely(__pyx_t_9 == 0)) break;
      if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "src/pyx/node.pyx":91
 *                 if kwargs is not None:
 *                         for key, value in kwargs.iteritems():
 *                                 desc.setAttribute(key, value)             # <<<<<<<<<<<<<<
 *                 return ObjectFactory.createObject(self.getContext(), desc)
 * 
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_desc), __pyx_n_s_setAttribute); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = NULL;
      __pyx_t_11 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_11 = 1;
        }
      }
      __pyx_t_12 = PyTuple_New(2+__pyx_t_11); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_12);
      if (__pyx_t_10) {
        __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_10); __pyx_t_10 = NULL;
      }
      __Pyx_INCREF(__pyx_v_key);
      __Pyx_GIVEREF(__pyx_v_key);
      PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_11, __pyx_v_key);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_11, __pyx_v_value);
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_12, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "src/pyx/node.pyx":89
 *                 """ Create and add a new object to the current node """
 *                 desc = BaseObjectDescription(aType, aType)
 *                 if kwargs is not None:             # <<<<<<<<<<<<<<
 *                         for key, value in kwargs.iteritems():
 *                                 desc.setAttribute(key, value)
 */
  }

  /* "src/pyx/node.pyx":92
 *                         for key, value in kwargs.iteritems():
 *                                 desc.setAttribute(key, value)
 *                 return ObjectFactory.createObject(self.getContext(), desc)             # <<<<<<<<<<<<<<
 * 
 *         @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_10sofacython_ObjectFactory), __pyx_n_s_createObject); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getContext); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_10 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_12))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_12);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_12, function);
    }
  }
  if (__pyx_t_10) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_10); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_12); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_6 = 1;
    }
  }
  __pyx_t_10 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  if (__pyx_t_12) {
    __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_12); __pyx_t_12 = NULL;
  }
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_6, __pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_desc));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_desc));
  PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_6, ((PyObject *)__pyx_v_desc));
  __pyx_t_1 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_10, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pyx/node.pyx":86
 *                 return None
 * 
 *         def createObject(Node self not None, aType not None, **kwargs):             # <<<<<<<<<<<<<<
 *                 """ Create and add a new object to the current node """
 *                 desc = BaseObjectDescription(aType, aType)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("sofacython.Node.createObject", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_desc);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/node.pyx":95
 * 
 *         @staticmethod
 *         cdef createFrom(_Node* aNode):             # <<<<<<<<<<<<<<
 *                 cdef Node py_obj = Node.__new__(Node)
 *                 py_obj.nodeptr = aNode
 */

static PyObject *__pyx_f_10sofacython_4Node_createFrom(sofa::simulation::Node *__pyx_v_aNode) {
  struct __pyx_obj_10sofacython_Node *__pyx_v_py_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("createFrom", 0);

  /* "src/pyx/node.pyx":96
 *         @staticmethod
 *         cdef createFrom(_Node* aNode):
 *                 cdef Node py_obj = Node.__new__(Node)             # <<<<<<<<<<<<<<
 *                 py_obj.nodeptr = aNode
 *                 py_obj.basenodeptr = aNode
 */
  __pyx_t_1 = __pyx_tp_new_10sofacython_Node(((PyTypeObject *)__pyx_ptype_10sofacython_Node), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10sofacython_Node)))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_py_obj = ((struct __pyx_obj_10sofacython_Node *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pyx/node.pyx":97
 *         cdef createFrom(_Node* aNode):
 *                 cdef Node py_obj = Node.__new__(Node)
 *                 py_obj.nodeptr = aNode             # <<<<<<<<<<<<<<
 *                 py_obj.basenodeptr = aNode
 *                 py_obj.realptr = aNode
 */
  __pyx_v_py_obj->nodeptr = __pyx_v_aNode;

  /* "src/pyx/node.pyx":98
 *                 cdef Node py_obj = Node.__new__(Node)
 *                 py_obj.nodeptr = aNode
 *                 py_obj.basenodeptr = aNode             # <<<<<<<<<<<<<<
 *                 py_obj.realptr = aNode
 *                 return py_obj
 */
  __pyx_v_py_obj->__pyx_base.basenodeptr = __pyx_v_aNode;

  /* "src/pyx/node.pyx":99
 *                 py_obj.nodeptr = aNode
 *                 py_obj.basenodeptr = aNode
 *                 py_obj.realptr = aNode             # <<<<<<<<<<<<<<
 *                 return py_obj
 * 
 */
  __pyx_v_py_obj->__pyx_base.__pyx_base.realptr = __pyx_v_aNode;

  /* "src/pyx/node.pyx":100
 *                 py_obj.basenodeptr = aNode
 *                 py_obj.realptr = aNode
 *                 return py_obj             # <<<<<<<<<<<<<<
 * 
 *         def __str__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_obj));
  __pyx_r = ((PyObject *)__pyx_v_py_obj);
  goto __pyx_L0;

  /* "src/pyx/node.pyx":95
 * 
 *         @staticmethod
 *         cdef createFrom(_Node* aNode):             # <<<<<<<<<<<<<<
 *                 cdef Node py_obj = Node.__new__(Node)
 *                 py_obj.nodeptr = aNode
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.Node.createFrom", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/node.pyx":102
 *                 return py_obj
 * 
 *         def __str__(self):             # <<<<<<<<<<<<<<
 *                 return "Node["+self.nodeptr.getClassName()+"]("+self.nodeptr.getName()+")"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_4Node_15__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10sofacython_4Node_15__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_4Node_14__str__(((struct __pyx_obj_10sofacython_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_4Node_14__str__(struct __pyx_obj_10sofacython_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "src/pyx/node.pyx":103
 * 
 *         def __str__(self):
 *                 return "Node["+self.nodeptr.getClassName()+"]("+self.nodeptr.getName()+")"             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->nodeptr->getClassName()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_kp_s_Node, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_kp_s__2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->nodeptr->getName()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_kp_s__3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "src/pyx/node.pyx":102
 *                 return py_obj
 * 
 *         def __str__(self):             # <<<<<<<<<<<<<<
 *                 return "Node["+self.nodeptr.getClassName()+"]("+self.nodeptr.getName()+")"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("sofacython.Node.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/simulation.pyx":12
 * 
 *         @staticmethod
 *         def getRoot():             # <<<<<<<<<<<<<<
 *                 """Returns the root node of the current simulation."""
 *                 return Node.createFrom(_Simulation_GetRoot().get())
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_10Simulation_1getRoot(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10sofacython_10Simulation_getRoot[] = "Returns the root node of the current simulation.";
static PyMethodDef __pyx_mdef_10sofacython_10Simulation_1getRoot = {"getRoot", (PyCFunction)__pyx_pw_10sofacython_10Simulation_1getRoot, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10sofacython_10Simulation_getRoot};
static PyObject *__pyx_pw_10sofacython_10Simulation_1getRoot(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getRoot (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("getRoot", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getRoot", 0))) return NULL;
  __pyx_r = __pyx_pf_10sofacython_10Simulation_getRoot();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_10Simulation_getRoot() {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getRoot", 0);

  /* "src/pyx/simulation.pyx":14
 *         def getRoot():
 *                 """Returns the root node of the current simulation."""
 *                 return Node.createFrom(_Simulation_GetRoot().get())             # <<<<<<<<<<<<<<
 * 
 *         @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_10sofacython_4Node_createFrom(sofa::simulation::Simulation::GetRoot().get()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyx/simulation.pyx":12
 * 
 *         @staticmethod
 *         def getRoot():             # <<<<<<<<<<<<<<
 *                 """Returns the root node of the current simulation."""
 *                 return Node.createFrom(_Simulation_GetRoot().get())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.Simulation.getRoot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/simulation.pyx":17
 * 
 *         @staticmethod
 *         def init(Node node not None):             # <<<<<<<<<<<<<<
 *                 """Initialize the scene graph starting from the provided root node
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_10Simulation_3init(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10sofacython_10Simulation_2init[] = "Initialize the scene graph starting from the provided root node\n                        \n                   Example of use:\n                        Simulation.init( Simulation.getRoot() )  \n                ";
static PyMethodDef __pyx_mdef_10sofacython_10Simulation_3init = {"init", (PyCFunction)__pyx_pw_10sofacython_10Simulation_3init, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10sofacython_10Simulation_2init};
static PyObject *__pyx_pw_10sofacython_10Simulation_3init(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_10sofacython_Node *__pyx_v_node = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_node,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_node)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "init") < 0)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_node = ((struct __pyx_obj_10sofacython_Node *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("init", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[9]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sofacython.Simulation.init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_node), __pyx_ptype_10sofacython_Node, 0, "node", 0))) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_10sofacython_10Simulation_2init(__pyx_v_node);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_10Simulation_2init(struct __pyx_obj_10sofacython_Node *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init", 0);

  /* "src/pyx/simulation.pyx":23
 *                         Simulation.init( Simulation.getRoot() )
 *                 """
 *                 _theSimulation.get().init(node.nodeptr)             # <<<<<<<<<<<<<<
 * 
 *         @staticmethod
 */
  sofa::simulation::Simulation::theSimulation.get()->init(__pyx_v_node->nodeptr);

  /* "src/pyx/simulation.pyx":17
 * 
 *         @staticmethod
 *         def init(Node node not None):             # <<<<<<<<<<<<<<
 *                 """Initialize the scene graph starting from the provided root node
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/simulation.pyx":26
 * 
 *         @staticmethod
 *         def initNode(Node node not None):             # <<<<<<<<<<<<<<
 *                 """Initialize the node without its context
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_10Simulation_5initNode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10sofacython_10Simulation_4initNode[] = "Initialize the node without its context\n                        \n                   Example of use:\n                        Simulation.init( Simulation.getTreeNode(\"ATreeNode\") )  \n                ";
static PyMethodDef __pyx_mdef_10sofacython_10Simulation_5initNode = {"initNode", (PyCFunction)__pyx_pw_10sofacython_10Simulation_5initNode, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10sofacython_10Simulation_4initNode};
static PyObject *__pyx_pw_10sofacython_10Simulation_5initNode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_10sofacython_Node *__pyx_v_node = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initNode (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_node,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_node)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initNode") < 0)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_node = ((struct __pyx_obj_10sofacython_Node *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initNode", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[9]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sofacython.Simulation.initNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_node), __pyx_ptype_10sofacython_Node, 0, "node", 0))) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_10sofacython_10Simulation_4initNode(__pyx_v_node);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_10Simulation_4initNode(struct __pyx_obj_10sofacython_Node *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initNode", 0);

  /* "src/pyx/simulation.pyx":32
 *                         Simulation.init( Simulation.getTreeNode("ATreeNode") )
 *                 """
 *                 _theSimulation.get().initNode(node.nodeptr)             # <<<<<<<<<<<<<<
 * 
 *         @staticmethod
 */
  sofa::simulation::Simulation::theSimulation.get()->initNode(__pyx_v_node->nodeptr);

  /* "src/pyx/simulation.pyx":26
 * 
 *         @staticmethod
 *         def initNode(Node node not None):             # <<<<<<<<<<<<<<
 *                 """Initialize the node without its context
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/simulation.pyx":35
 * 
 *         @staticmethod
 *         def animate(Node node not None, float dt=0.0):             # <<<<<<<<<<<<<<
 *                 """Do one simulation step. The duration of the simulated step
 *                    is given in dt. If dt is 0, the dt parameter in the graph
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_10Simulation_7animate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10sofacython_10Simulation_6animate[] = "Do one simulation step. The duration of the simulated step \n                   is given in dt. If dt is 0, the dt parameter in the graph \n                   will be used.\n                        \n                   Example of use:\n                        Simulation.animate( Simulation.getRoot(), 0.1 )  \n                ";
static PyMethodDef __pyx_mdef_10sofacython_10Simulation_7animate = {"animate", (PyCFunction)__pyx_pw_10sofacython_10Simulation_7animate, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10sofacython_10Simulation_6animate};
static PyObject *__pyx_pw_10sofacython_10Simulation_7animate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_10sofacython_Node *__pyx_v_node = 0;
  float __pyx_v_dt;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("animate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_node,&__pyx_n_s_dt,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_node)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dt);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "animate") < 0)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_node = ((struct __pyx_obj_10sofacython_Node *)values[0]);
    if (values[1]) {
      __pyx_v_dt = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_dt == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_dt = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("animate", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[9]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sofacython.Simulation.animate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_node), __pyx_ptype_10sofacython_Node, 0, "node", 0))) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_10sofacython_10Simulation_6animate(__pyx_v_node, __pyx_v_dt);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_10Simulation_6animate(struct __pyx_obj_10sofacython_Node *__pyx_v_node, float __pyx_v_dt) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("animate", 0);

  /* "src/pyx/simulation.pyx":43
 *                         Simulation.animate( Simulation.getRoot(), 0.1 )
 *                 """
 *                 _theSimulation.get().animate(node.nodeptr, dt)             # <<<<<<<<<<<<<<
 * 
 *         @staticmethod
 */
  sofa::simulation::Simulation::theSimulation.get()->animate(__pyx_v_node->nodeptr, __pyx_v_dt);

  /* "src/pyx/simulation.pyx":35
 * 
 *         @staticmethod
 *         def animate(Node node not None, float dt=0.0):             # <<<<<<<<<<<<<<
 *                 """Do one simulation step. The duration of the simulated step
 *                    is given in dt. If dt is 0, the dt parameter in the graph
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/simulation.pyx":46
 * 
 *         @staticmethod
 *         def reset(Node node not None):             # <<<<<<<<<<<<<<
 *                 """Reset to initial state.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_10Simulation_9reset(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10sofacython_10Simulation_8reset[] = "Reset to initial state. \n                        \n                   Example of use:\n                        Simulation.reset( Simulation.getRoot() )  \n                ";
static PyMethodDef __pyx_mdef_10sofacython_10Simulation_9reset = {"reset", (PyCFunction)__pyx_pw_10sofacython_10Simulation_9reset, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10sofacython_10Simulation_8reset};
static PyObject *__pyx_pw_10sofacython_10Simulation_9reset(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_10sofacython_Node *__pyx_v_node = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_node,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_node)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "reset") < 0)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_node = ((struct __pyx_obj_10sofacython_Node *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("reset", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[9]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sofacython.Simulation.reset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_node), __pyx_ptype_10sofacython_Node, 0, "node", 0))) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_10sofacython_10Simulation_8reset(__pyx_v_node);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_10Simulation_8reset(struct __pyx_obj_10sofacython_Node *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset", 0);

  /* "src/pyx/simulation.pyx":52
 *                         Simulation.reset( Simulation.getRoot() )
 *                 """
 *                 _theSimulation.get().reset(node.nodeptr)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  sofa::simulation::Simulation::theSimulation.get()->reset(__pyx_v_node->nodeptr);

  /* "src/pyx/simulation.pyx":46
 * 
 *         @staticmethod
 *         def reset(Node node not None):             # <<<<<<<<<<<<<<
 *                 """Reset to initial state.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/basemechanicalstate.pyx":35
 *         cdef _BaseMechanicalState* mechanicalstateptr
 * 
 *         def __init__(self, *args):             # <<<<<<<<<<<<<<
 *                 if not args:
 *                         raise Exception("Cannot create an empty mechanical state, please use the ObjectFactory.createObject('myobject', 'MechanicalObject')) ")
 */

/* Python wrapper */
static int __pyx_pw_10sofacython_19BaseMechanicalState_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10sofacython_19BaseMechanicalState_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_10sofacython_19BaseMechanicalState___init__(((struct __pyx_obj_10sofacython_BaseMechanicalState *)__pyx_v_self), __pyx_v_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10sofacython_19BaseMechanicalState___init__(struct __pyx_obj_10sofacython_BaseMechanicalState *__pyx_v_self, PyObject *__pyx_v_args) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "src/pyx/basemechanicalstate.pyx":36
 * 
 *         def __init__(self, *args):
 *                 if not args:             # <<<<<<<<<<<<<<
 *                         raise Exception("Cannot create an empty mechanical state, please use the ObjectFactory.createObject('myobject', 'MechanicalObject')) ")
 *                 elif (len(args)==1):
 */
  __pyx_t_1 = (__pyx_v_args != Py_None) && (PyTuple_GET_SIZE(__pyx_v_args) != 0);
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "src/pyx/basemechanicalstate.pyx":37
 *         def __init__(self, *args):
 *                 if not args:
 *                         raise Exception("Cannot create an empty mechanical state, please use the ObjectFactory.createObject('myobject', 'MechanicalObject')) ")             # <<<<<<<<<<<<<<
 *                 elif (len(args)==1):
 *                         if isinstance(args[0], (Base, BaseObject)):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[10]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "src/pyx/basemechanicalstate.pyx":36
 * 
 *         def __init__(self, *args):
 *                 if not args:             # <<<<<<<<<<<<<<
 *                         raise Exception("Cannot create an empty mechanical state, please use the ObjectFactory.createObject('myobject', 'MechanicalObject')) ")
 *                 elif (len(args)==1):
 */
  }

  /* "src/pyx/basemechanicalstate.pyx":38
 *                 if not args:
 *                         raise Exception("Cannot create an empty mechanical state, please use the ObjectFactory.createObject('myobject', 'MechanicalObject')) ")
 *                 elif (len(args)==1):             # <<<<<<<<<<<<<<
 *                         if isinstance(args[0], (Base, BaseObject)):
 *                                 self.__init__1(args[0])
 */
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_t_4 == 1) != 0);
  if (__pyx_t_2) {

    /* "src/pyx/basemechanicalstate.pyx":39
 *                         raise Exception("Cannot create an empty mechanical state, please use the ObjectFactory.createObject('myobject', 'MechanicalObject')) ")
 *                 elif (len(args)==1):
 *                         if isinstance(args[0], (Base, BaseObject)):             # <<<<<<<<<<<<<<
 *                                 self.__init__1(args[0])
 *                         else:
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_TypeCheck(__pyx_t_3, __pyx_ptype_10sofacython_Base); 
    __pyx_t_5 = (__pyx_t_1 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_2 = __pyx_t_5;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_5 = __Pyx_TypeCheck(__pyx_t_3, __pyx_ptype_10sofacython_BaseObject); 
    __pyx_t_1 = (__pyx_t_5 != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L5_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "src/pyx/basemechanicalstate.pyx":40
 *                 elif (len(args)==1):
 *                         if isinstance(args[0], (Base, BaseObject)):
 *                                 self.__init__1(args[0])             # <<<<<<<<<<<<<<
 *                         else:
 *                                 raise Exception("Too much parameters")
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init__1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v_args, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      if (!__pyx_t_8) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else {
        __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "src/pyx/basemechanicalstate.pyx":39
 *                         raise Exception("Cannot create an empty mechanical state, please use the ObjectFactory.createObject('myobject', 'MechanicalObject')) ")
 *                 elif (len(args)==1):
 *                         if isinstance(args[0], (Base, BaseObject)):             # <<<<<<<<<<<<<<
 *                                 self.__init__1(args[0])
 *                         else:
 */
      goto __pyx_L4;
    }

    /* "src/pyx/basemechanicalstate.pyx":42
 *                                 self.__init__1(args[0])
 *                         else:
 *                                 raise Exception("Too much parameters")             # <<<<<<<<<<<<<<
 *                 else:
 *                         raise Exception("Too much parameters")
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[10]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L4:;

    /* "src/pyx/basemechanicalstate.pyx":38
 *                 if not args:
 *                         raise Exception("Cannot create an empty mechanical state, please use the ObjectFactory.createObject('myobject', 'MechanicalObject')) ")
 *                 elif (len(args)==1):             # <<<<<<<<<<<<<<
 *                         if isinstance(args[0], (Base, BaseObject)):
 *                                 self.__init__1(args[0])
 */
    goto __pyx_L3;
  }

  /* "src/pyx/basemechanicalstate.pyx":44
 *                                 raise Exception("Too much parameters")
 *                 else:
 *                         raise Exception("Too much parameters")             # <<<<<<<<<<<<<<
 * 
 *         def getPX(self,  i ):
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[10]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "src/pyx/basemechanicalstate.pyx":35
 *         cdef _BaseMechanicalState* mechanicalstateptr
 * 
 *         def __init__(self, *args):             # <<<<<<<<<<<<<<
 *                 if not args:
 *                         raise Exception("Cannot create an empty mechanical state, please use the ObjectFactory.createObject('myobject', 'MechanicalObject')) ")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("sofacython.BaseMechanicalState.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/basemechanicalstate.pyx":46
 *                         raise Exception("Too much parameters")
 * 
 *         def getPX(self,  i ):             # <<<<<<<<<<<<<<
 *                 """Returns the X component of the i'th position DOFS"""
 *                 assert isinstance(i, (int, long)), 'arg i wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_19BaseMechanicalState_3getPX(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static char __pyx_doc_10sofacython_19BaseMechanicalState_2getPX[] = "Returns the X component of the i'th position DOFS";
static PyObject *__pyx_pw_10sofacython_19BaseMechanicalState_3getPX(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPX (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_19BaseMechanicalState_2getPX(((struct __pyx_obj_10sofacython_BaseMechanicalState *)__pyx_v_self), ((PyObject *)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_19BaseMechanicalState_2getPX(struct __pyx_obj_10sofacython_BaseMechanicalState *__pyx_v_self, PyObject *__pyx_v_i) {
  double __pyx_v__r;
  double __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPX", 0);

  /* "src/pyx/basemechanicalstate.pyx":48
 *         def getPX(self,  i ):
 *                 """Returns the X component of the i'th position DOFS"""
 *                 assert isinstance(i, (int, long)), 'arg i wrong type'             # <<<<<<<<<<<<<<
 * 
 *                 cdef double _r = (self.mechanicalstateptr).getPX((<size_t>i))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_i); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_i); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_i_wrong_type);
      {__pyx_filename = __pyx_f[10]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "src/pyx/basemechanicalstate.pyx":50
 *                 assert isinstance(i, (int, long)), 'arg i wrong type'
 * 
 *                 cdef double _r = (self.mechanicalstateptr).getPX((<size_t>i))             # <<<<<<<<<<<<<<
 *                 py_result = <double>_r
 *                 return py_result
 */
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v__r = __pyx_v_self->mechanicalstateptr->getPX(((size_t)__pyx_t_4));

  /* "src/pyx/basemechanicalstate.pyx":51
 * 
 *                 cdef double _r = (self.mechanicalstateptr).getPX((<size_t>i))
 *                 py_result = <double>_r             # <<<<<<<<<<<<<<
 *                 return py_result
 * 
 */
  __pyx_v_py_result = ((double)__pyx_v__r);

  /* "src/pyx/basemechanicalstate.pyx":52
 *                 cdef double _r = (self.mechanicalstateptr).getPX((<size_t>i))
 *                 py_result = <double>_r
 *                 return py_result             # <<<<<<<<<<<<<<
 * 
 *         def getPY(self,  i ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_py_result); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "src/pyx/basemechanicalstate.pyx":46
 *                         raise Exception("Too much parameters")
 * 
 *         def getPX(self,  i ):             # <<<<<<<<<<<<<<
 *                 """Returns the X component of the i'th position DOFS"""
 *                 assert isinstance(i, (int, long)), 'arg i wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("sofacython.BaseMechanicalState.getPX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/basemechanicalstate.pyx":54
 *                 return py_result
 * 
 *         def getPY(self,  i ):             # <<<<<<<<<<<<<<
 *                 """Returns the Y component of the i'th position DOFS"""
 *                 assert isinstance(i, (int, long)), 'arg i wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_19BaseMechanicalState_5getPY(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static char __pyx_doc_10sofacython_19BaseMechanicalState_4getPY[] = "Returns the Y component of the i'th position DOFS";
static PyObject *__pyx_pw_10sofacython_19BaseMechanicalState_5getPY(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPY (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_19BaseMechanicalState_4getPY(((struct __pyx_obj_10sofacython_BaseMechanicalState *)__pyx_v_self), ((PyObject *)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_19BaseMechanicalState_4getPY(struct __pyx_obj_10sofacython_BaseMechanicalState *__pyx_v_self, PyObject *__pyx_v_i) {
  double __pyx_v__r;
  double __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPY", 0);

  /* "src/pyx/basemechanicalstate.pyx":56
 *         def getPY(self,  i ):
 *                 """Returns the Y component of the i'th position DOFS"""
 *                 assert isinstance(i, (int, long)), 'arg i wrong type'             # <<<<<<<<<<<<<<
 * 
 *                 cdef double _r = (self.mechanicalstateptr).getPY((<size_t>i))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_i); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_i); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_i_wrong_type);
      {__pyx_filename = __pyx_f[10]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "src/pyx/basemechanicalstate.pyx":58
 *                 assert isinstance(i, (int, long)), 'arg i wrong type'
 * 
 *                 cdef double _r = (self.mechanicalstateptr).getPY((<size_t>i))             # <<<<<<<<<<<<<<
 *                 py_result = <double>_r
 *                 return py_result
 */
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v__r = __pyx_v_self->mechanicalstateptr->getPY(((size_t)__pyx_t_4));

  /* "src/pyx/basemechanicalstate.pyx":59
 * 
 *                 cdef double _r = (self.mechanicalstateptr).getPY((<size_t>i))
 *                 py_result = <double>_r             # <<<<<<<<<<<<<<
 *                 return py_result
 * 
 */
  __pyx_v_py_result = ((double)__pyx_v__r);

  /* "src/pyx/basemechanicalstate.pyx":60
 *                 cdef double _r = (self.mechanicalstateptr).getPY((<size_t>i))
 *                 py_result = <double>_r
 *                 return py_result             # <<<<<<<<<<<<<<
 * 
 *         def getPZ(self,  i ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_py_result); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "src/pyx/basemechanicalstate.pyx":54
 *                 return py_result
 * 
 *         def getPY(self,  i ):             # <<<<<<<<<<<<<<
 *                 """Returns the Y component of the i'th position DOFS"""
 *                 assert isinstance(i, (int, long)), 'arg i wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("sofacython.BaseMechanicalState.getPY", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/basemechanicalstate.pyx":62
 *                 return py_result
 * 
 *         def getPZ(self,  i ):             # <<<<<<<<<<<<<<
 *                 """Returns the Z component of the i'th position DOFS"""
 *                 assert isinstance(i, (int, long)), 'arg i wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_19BaseMechanicalState_7getPZ(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static char __pyx_doc_10sofacython_19BaseMechanicalState_6getPZ[] = "Returns the Z component of the i'th position DOFS";
static PyObject *__pyx_pw_10sofacython_19BaseMechanicalState_7getPZ(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPZ (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_19BaseMechanicalState_6getPZ(((struct __pyx_obj_10sofacython_BaseMechanicalState *)__pyx_v_self), ((PyObject *)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_19BaseMechanicalState_6getPZ(struct __pyx_obj_10sofacython_BaseMechanicalState *__pyx_v_self, PyObject *__pyx_v_i) {
  double __pyx_v__r;
  double __pyx_v_py_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPZ", 0);

  /* "src/pyx/basemechanicalstate.pyx":64
 *         def getPZ(self,  i ):
 *                 """Returns the Z component of the i'th position DOFS"""
 *                 assert isinstance(i, (int, long)), 'arg i wrong type'             # <<<<<<<<<<<<<<
 * 
 *                 cdef double _r = (self.mechanicalstateptr).getPZ((<size_t>i))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = PyInt_Check(__pyx_v_i); 
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = PyLong_Check(__pyx_v_i); 
    __pyx_t_2 = (__pyx_t_3 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_i_wrong_type);
      {__pyx_filename = __pyx_f[10]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "src/pyx/basemechanicalstate.pyx":66
 *                 assert isinstance(i, (int, long)), 'arg i wrong type'
 * 
 *                 cdef double _r = (self.mechanicalstateptr).getPZ((<size_t>i))             # <<<<<<<<<<<<<<
 *                 py_result = <double>_r
 *                 return py_result
 */
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_v_i); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v__r = __pyx_v_self->mechanicalstateptr->getPZ(((size_t)__pyx_t_4));

  /* "src/pyx/basemechanicalstate.pyx":67
 * 
 *                 cdef double _r = (self.mechanicalstateptr).getPZ((<size_t>i))
 *                 py_result = <double>_r             # <<<<<<<<<<<<<<
 *                 return py_result
 * 
 */
  __pyx_v_py_result = ((double)__pyx_v__r);

  /* "src/pyx/basemechanicalstate.pyx":68
 *                 cdef double _r = (self.mechanicalstateptr).getPZ((<size_t>i))
 *                 py_result = <double>_r
 *                 return py_result             # <<<<<<<<<<<<<<
 * 
 *         def applyScale(self, double sx , double sy , double sz ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_py_result); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "src/pyx/basemechanicalstate.pyx":62
 *                 return py_result
 * 
 *         def getPZ(self,  i ):             # <<<<<<<<<<<<<<
 *                 """Returns the Z component of the i'th position DOFS"""
 *                 assert isinstance(i, (int, long)), 'arg i wrong type'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("sofacython.BaseMechanicalState.getPZ", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/basemechanicalstate.pyx":70
 *                 return py_result
 * 
 *         def applyScale(self, double sx , double sy , double sz ):             # <<<<<<<<<<<<<<
 *                 assert isinstance(sx, float), 'arg sx wrong type'
 *                 assert isinstance(sy, float), 'arg sy wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_19BaseMechanicalState_9applyScale(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10sofacython_19BaseMechanicalState_9applyScale(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_sx;
  double __pyx_v_sy;
  double __pyx_v_sz;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("applyScale (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sx,&__pyx_n_s_sy,&__pyx_n_s_sz,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sx)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("applyScale", 1, 3, 3, 1); {__pyx_filename = __pyx_f[10]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("applyScale", 1, 3, 3, 2); {__pyx_filename = __pyx_f[10]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "applyScale") < 0)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_sx = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_sx == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_sy = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_sy == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_sz = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_sz == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("applyScale", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[10]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sofacython.BaseMechanicalState.applyScale", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10sofacython_19BaseMechanicalState_8applyScale(((struct __pyx_obj_10sofacython_BaseMechanicalState *)__pyx_v_self), __pyx_v_sx, __pyx_v_sy, __pyx_v_sz);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_19BaseMechanicalState_8applyScale(struct __pyx_obj_10sofacython_BaseMechanicalState *__pyx_v_self, double __pyx_v_sx, double __pyx_v_sy, double __pyx_v_sz) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("applyScale", 0);

  /* "src/pyx/basemechanicalstate.pyx":71
 * 
 *         def applyScale(self, double sx , double sy , double sz ):
 *                 assert isinstance(sx, float), 'arg sx wrong type'             # <<<<<<<<<<<<<<
 *                 assert isinstance(sy, float), 'arg sy wrong type'
 *                 assert isinstance(sz, float), 'arg sz wrong type'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_sx); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_sx_wrong_type);
      {__pyx_filename = __pyx_f[10]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "src/pyx/basemechanicalstate.pyx":72
 *         def applyScale(self, double sx , double sy , double sz ):
 *                 assert isinstance(sx, float), 'arg sx wrong type'
 *                 assert isinstance(sy, float), 'arg sy wrong type'             # <<<<<<<<<<<<<<
 *                 assert isinstance(sz, float), 'arg sz wrong type'
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_sy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_sy_wrong_type);
      {__pyx_filename = __pyx_f[10]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "src/pyx/basemechanicalstate.pyx":73
 *                 assert isinstance(sx, float), 'arg sx wrong type'
 *                 assert isinstance(sy, float), 'arg sy wrong type'
 *                 assert isinstance(sz, float), 'arg sz wrong type'             # <<<<<<<<<<<<<<
 * 
 *                 self.mechanicalstateptr.applyScale((<double>sx), (<double>sy), (<double>sz))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_sz); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_sz_wrong_type);
      {__pyx_filename = __pyx_f[10]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "src/pyx/basemechanicalstate.pyx":75
 *                 assert isinstance(sz, float), 'arg sz wrong type'
 * 
 *                 self.mechanicalstateptr.applyScale((<double>sx), (<double>sy), (<double>sz))             # <<<<<<<<<<<<<<
 * 
 *         def applyTranslation(self, double sx , double sy , double sz ):
 */
  __pyx_v_self->mechanicalstateptr->applyScale(((double)__pyx_v_sx), ((double)__pyx_v_sy), ((double)__pyx_v_sz));

  /* "src/pyx/basemechanicalstate.pyx":70
 *                 return py_result
 * 
 *         def applyScale(self, double sx , double sy , double sz ):             # <<<<<<<<<<<<<<
 *                 assert isinstance(sx, float), 'arg sx wrong type'
 *                 assert isinstance(sy, float), 'arg sy wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.BaseMechanicalState.applyScale", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/basemechanicalstate.pyx":77
 *                 self.mechanicalstateptr.applyScale((<double>sx), (<double>sy), (<double>sz))
 * 
 *         def applyTranslation(self, double sx , double sy , double sz ):             # <<<<<<<<<<<<<<
 *                 assert isinstance(sx, float), 'arg sx wrong type'
 *                 assert isinstance(sy, float), 'arg sy wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_19BaseMechanicalState_11applyTranslation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10sofacython_19BaseMechanicalState_11applyTranslation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_sx;
  double __pyx_v_sy;
  double __pyx_v_sz;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("applyTranslation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sx,&__pyx_n_s_sy,&__pyx_n_s_sz,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sx)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("applyTranslation", 1, 3, 3, 1); {__pyx_filename = __pyx_f[10]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("applyTranslation", 1, 3, 3, 2); {__pyx_filename = __pyx_f[10]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "applyTranslation") < 0)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_sx = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_sx == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_sy = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_sy == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_sz = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_sz == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("applyTranslation", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[10]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sofacython.BaseMechanicalState.applyTranslation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10sofacython_19BaseMechanicalState_10applyTranslation(((struct __pyx_obj_10sofacython_BaseMechanicalState *)__pyx_v_self), __pyx_v_sx, __pyx_v_sy, __pyx_v_sz);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_19BaseMechanicalState_10applyTranslation(struct __pyx_obj_10sofacython_BaseMechanicalState *__pyx_v_self, double __pyx_v_sx, double __pyx_v_sy, double __pyx_v_sz) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("applyTranslation", 0);

  /* "src/pyx/basemechanicalstate.pyx":78
 * 
 *         def applyTranslation(self, double sx , double sy , double sz ):
 *                 assert isinstance(sx, float), 'arg sx wrong type'             # <<<<<<<<<<<<<<
 *                 assert isinstance(sy, float), 'arg sy wrong type'
 *                 assert isinstance(sz, float), 'arg sz wrong type'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_sx); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_sx_wrong_type);
      {__pyx_filename = __pyx_f[10]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "src/pyx/basemechanicalstate.pyx":79
 *         def applyTranslation(self, double sx , double sy , double sz ):
 *                 assert isinstance(sx, float), 'arg sx wrong type'
 *                 assert isinstance(sy, float), 'arg sy wrong type'             # <<<<<<<<<<<<<<
 *                 assert isinstance(sz, float), 'arg sz wrong type'
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_sy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_sy_wrong_type);
      {__pyx_filename = __pyx_f[10]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "src/pyx/basemechanicalstate.pyx":80
 *                 assert isinstance(sx, float), 'arg sx wrong type'
 *                 assert isinstance(sy, float), 'arg sy wrong type'
 *                 assert isinstance(sz, float), 'arg sz wrong type'             # <<<<<<<<<<<<<<
 * 
 *                 self.mechanicalstateptr.applyTranslation((<double>sx), (<double>sy), (<double>sz))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_sz); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_sz_wrong_type);
      {__pyx_filename = __pyx_f[10]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "src/pyx/basemechanicalstate.pyx":82
 *                 assert isinstance(sz, float), 'arg sz wrong type'
 * 
 *                 self.mechanicalstateptr.applyTranslation((<double>sx), (<double>sy), (<double>sz))             # <<<<<<<<<<<<<<
 * 
 *         def applyRotation(self, double sx , double sy , double sz ):
 */
  __pyx_v_self->mechanicalstateptr->applyTranslation(((double)__pyx_v_sx), ((double)__pyx_v_sy), ((double)__pyx_v_sz));

  /* "src/pyx/basemechanicalstate.pyx":77
 *                 self.mechanicalstateptr.applyScale((<double>sx), (<double>sy), (<double>sz))
 * 
 *         def applyTranslation(self, double sx , double sy , double sz ):             # <<<<<<<<<<<<<<
 *                 assert isinstance(sx, float), 'arg sx wrong type'
 *                 assert isinstance(sy, float), 'arg sy wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.BaseMechanicalState.applyTranslation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/basemechanicalstate.pyx":84
 *                 self.mechanicalstateptr.applyTranslation((<double>sx), (<double>sy), (<double>sz))
 * 
 *         def applyRotation(self, double sx , double sy , double sz ):             # <<<<<<<<<<<<<<
 *                 assert isinstance(sx, float), 'arg sx wrong type'
 *                 assert isinstance(sy, float), 'arg sy wrong type'
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_19BaseMechanicalState_13applyRotation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_10sofacython_19BaseMechanicalState_13applyRotation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_sx;
  double __pyx_v_sy;
  double __pyx_v_sz;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("applyRotation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sx,&__pyx_n_s_sy,&__pyx_n_s_sz,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sx)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("applyRotation", 1, 3, 3, 1); {__pyx_filename = __pyx_f[10]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("applyRotation", 1, 3, 3, 2); {__pyx_filename = __pyx_f[10]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "applyRotation") < 0)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_sx = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_sx == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_sy = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_sy == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_sz = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_sz == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("applyRotation", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[10]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("sofacython.BaseMechanicalState.applyRotation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10sofacython_19BaseMechanicalState_12applyRotation(((struct __pyx_obj_10sofacython_BaseMechanicalState *)__pyx_v_self), __pyx_v_sx, __pyx_v_sy, __pyx_v_sz);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_19BaseMechanicalState_12applyRotation(struct __pyx_obj_10sofacython_BaseMechanicalState *__pyx_v_self, double __pyx_v_sx, double __pyx_v_sy, double __pyx_v_sz) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("applyRotation", 0);

  /* "src/pyx/basemechanicalstate.pyx":85
 * 
 *         def applyRotation(self, double sx , double sy , double sz ):
 *                 assert isinstance(sx, float), 'arg sx wrong type'             # <<<<<<<<<<<<<<
 *                 assert isinstance(sy, float), 'arg sy wrong type'
 *                 assert isinstance(sz, float), 'arg sz wrong type'
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_sx); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_sx_wrong_type);
      {__pyx_filename = __pyx_f[10]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "src/pyx/basemechanicalstate.pyx":86
 *         def applyRotation(self, double sx , double sy , double sz ):
 *                 assert isinstance(sx, float), 'arg sx wrong type'
 *                 assert isinstance(sy, float), 'arg sy wrong type'             # <<<<<<<<<<<<<<
 *                 assert isinstance(sz, float), 'arg sz wrong type'
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_sy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_sy_wrong_type);
      {__pyx_filename = __pyx_f[10]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "src/pyx/basemechanicalstate.pyx":87
 *                 assert isinstance(sx, float), 'arg sx wrong type'
 *                 assert isinstance(sy, float), 'arg sy wrong type'
 *                 assert isinstance(sz, float), 'arg sz wrong type'             # <<<<<<<<<<<<<<
 * 
 *                 self.mechanicalstateptr.applyRotation((<double>sx), (<double>sy), (<double>sz))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_sz); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyFloat_Check(__pyx_t_1); 
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!(__pyx_t_2 != 0))) {
      PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_arg_sz_wrong_type);
      {__pyx_filename = __pyx_f[10]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif

  /* "src/pyx/basemechanicalstate.pyx":89
 *                 assert isinstance(sz, float), 'arg sz wrong type'
 * 
 *                 self.mechanicalstateptr.applyRotation((<double>sx), (<double>sy), (<double>sz))             # <<<<<<<<<<<<<<
 * 
 *         def resize(BaseMechanicalState self not None, size_t aNewSize):
 */
  __pyx_v_self->mechanicalstateptr->applyRotation(((double)__pyx_v_sx), ((double)__pyx_v_sy), ((double)__pyx_v_sz));

  /* "src/pyx/basemechanicalstate.pyx":84
 *                 self.mechanicalstateptr.applyTranslation((<double>sx), (<double>sy), (<double>sz))
 * 
 *         def applyRotation(self, double sx , double sy , double sz ):             # <<<<<<<<<<<<<<
 *                 assert isinstance(sx, float), 'arg sx wrong type'
 *                 assert isinstance(sy, float), 'arg sy wrong type'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.BaseMechanicalState.applyRotation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/basemechanicalstate.pyx":91
 *                 self.mechanicalstateptr.applyRotation((<double>sx), (<double>sy), (<double>sz))
 * 
 *         def resize(BaseMechanicalState self not None, size_t aNewSize):             # <<<<<<<<<<<<<<
 *                 self.mechanicalstateptr.resize(aNewSize)
 *                 return self.mechanicalstateptr.getSize()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_19BaseMechanicalState_15resize(PyObject *__pyx_v_self, PyObject *__pyx_arg_aNewSize); /*proto*/
static PyObject *__pyx_pw_10sofacython_19BaseMechanicalState_15resize(PyObject *__pyx_v_self, PyObject *__pyx_arg_aNewSize) {
  size_t __pyx_v_aNewSize;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resize (wrapper)", 0);
  assert(__pyx_arg_aNewSize); {
    __pyx_v_aNewSize = __Pyx_PyInt_As_size_t(__pyx_arg_aNewSize); if (unlikely((__pyx_v_aNewSize == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("sofacython.BaseMechanicalState.resize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(((PyObject *)__pyx_v_self) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "self"); {__pyx_filename = __pyx_f[10]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_r = __pyx_pf_10sofacython_19BaseMechanicalState_14resize(((struct __pyx_obj_10sofacython_BaseMechanicalState *)__pyx_v_self), ((size_t)__pyx_v_aNewSize));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_19BaseMechanicalState_14resize(struct __pyx_obj_10sofacython_BaseMechanicalState *__pyx_v_self, size_t __pyx_v_aNewSize) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("resize", 0);

  /* "src/pyx/basemechanicalstate.pyx":92
 * 
 *         def resize(BaseMechanicalState self not None, size_t aNewSize):
 *                 self.mechanicalstateptr.resize(aNewSize)             # <<<<<<<<<<<<<<
 *                 return self.mechanicalstateptr.getSize()
 * 
 */
  __pyx_v_self->mechanicalstateptr->resize(__pyx_v_aNewSize);

  /* "src/pyx/basemechanicalstate.pyx":93
 *         def resize(BaseMechanicalState self not None, size_t aNewSize):
 *                 self.mechanicalstateptr.resize(aNewSize)
 *                 return self.mechanicalstateptr.getSize()             # <<<<<<<<<<<<<<
 * 
 *         def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->mechanicalstateptr->getSize()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "src/pyx/basemechanicalstate.pyx":91
 *                 self.mechanicalstateptr.applyRotation((<double>sx), (<double>sy), (<double>sz))
 * 
 *         def resize(BaseMechanicalState self not None, size_t aNewSize):             # <<<<<<<<<<<<<<
 *                 self.mechanicalstateptr.resize(aNewSize)
 *                 return self.mechanicalstateptr.getSize()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.BaseMechanicalState.resize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/basemechanicalstate.pyx":95
 *                 return self.mechanicalstateptr.getSize()
 * 
 *         def __len__(self):             # <<<<<<<<<<<<<<
 *                 return self.mechanicalstateptr.getSize()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_10sofacython_19BaseMechanicalState_17__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_10sofacython_19BaseMechanicalState_17__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10sofacython_19BaseMechanicalState_16__len__(((struct __pyx_obj_10sofacython_BaseMechanicalState *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_10sofacython_19BaseMechanicalState_16__len__(struct __pyx_obj_10sofacython_BaseMechanicalState *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "src/pyx/basemechanicalstate.pyx":96
 * 
 *         def __len__(self):
 *                 return self.mechanicalstateptr.getSize()             # <<<<<<<<<<<<<<
 * 
 *         @staticmethod
 */
  __pyx_r = __pyx_v_self->mechanicalstateptr->getSize();
  goto __pyx_L0;

  /* "src/pyx/basemechanicalstate.pyx":95
 *                 return self.mechanicalstateptr.getSize()
 * 
 *         def __len__(self):             # <<<<<<<<<<<<<<
 *                 return self.mechanicalstateptr.getSize()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/basemechanicalstate.pyx":99
 * 
 *         @staticmethod
 *         cdef createFrom(_BaseMechanicalState* aptr):             # <<<<<<<<<<<<<<
 *                 cdef BaseMechanicalState py_obj = BaseMechanicalState.__new__(BaseMechanicalState)
 *                 py_obj.realptr = py_obj.baseobjectptr = py_obj.mechanicalstateptr = aptr
 */

static PyObject *__pyx_f_10sofacython_19BaseMechanicalState_createFrom(sofa::core::behavior::BaseMechanicalState *__pyx_v_aptr) {
  struct __pyx_obj_10sofacython_BaseMechanicalState *__pyx_v_py_obj = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("createFrom", 0);

  /* "src/pyx/basemechanicalstate.pyx":100
 *         @staticmethod
 *         cdef createFrom(_BaseMechanicalState* aptr):
 *                 cdef BaseMechanicalState py_obj = BaseMechanicalState.__new__(BaseMechanicalState)             # <<<<<<<<<<<<<<
 *                 py_obj.realptr = py_obj.baseobjectptr = py_obj.mechanicalstateptr = aptr
 *                 return py_obj
 */
  __pyx_t_1 = __pyx_tp_new_10sofacython_BaseMechanicalState(((PyTypeObject *)__pyx_ptype_10sofacython_BaseMechanicalState), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10sofacython_BaseMechanicalState)))) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_py_obj = ((struct __pyx_obj_10sofacython_BaseMechanicalState *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "src/pyx/basemechanicalstate.pyx":101
 *         cdef createFrom(_BaseMechanicalState* aptr):
 *                 cdef BaseMechanicalState py_obj = BaseMechanicalState.__new__(BaseMechanicalState)
 *                 py_obj.realptr = py_obj.baseobjectptr = py_obj.mechanicalstateptr = aptr             # <<<<<<<<<<<<<<
 *                 return py_obj
 * 
 */
  __pyx_v_py_obj->__pyx_base.__pyx_base.realptr = __pyx_v_aptr;
  __pyx_v_py_obj->__pyx_base.baseobjectptr = __pyx_v_aptr;
  __pyx_v_py_obj->mechanicalstateptr = __pyx_v_aptr;

  /* "src/pyx/basemechanicalstate.pyx":102
 *                 cdef BaseMechanicalState py_obj = BaseMechanicalState.__new__(BaseMechanicalState)
 *                 py_obj.realptr = py_obj.baseobjectptr = py_obj.mechanicalstateptr = aptr
 *                 return py_obj             # <<<<<<<<<<<<<<
 * 
 *         cdef _BaseMechanicalState* getRawPointer(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_py_obj));
  __pyx_r = ((PyObject *)__pyx_v_py_obj);
  goto __pyx_L0;

  /* "src/pyx/basemechanicalstate.pyx":99
 * 
 *         @staticmethod
 *         cdef createFrom(_BaseMechanicalState* aptr):             # <<<<<<<<<<<<<<
 *                 cdef BaseMechanicalState py_obj = BaseMechanicalState.__new__(BaseMechanicalState)
 *                 py_obj.realptr = py_obj.baseobjectptr = py_obj.mechanicalstateptr = aptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("sofacython.BaseMechanicalState.createFrom", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_py_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/basemechanicalstate.pyx":104
 *                 return py_obj
 * 
 *         cdef _BaseMechanicalState* getRawPointer(self):             # <<<<<<<<<<<<<<
 *                 return self.mechanicalstateptr
 * 
 */

static sofa::core::behavior::BaseMechanicalState *__pyx_f_10sofacython_19BaseMechanicalState_getRawPointer(struct __pyx_obj_10sofacython_BaseMechanicalState *__pyx_v_self) {
  sofa::core::behavior::BaseMechanicalState *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getRawPointer", 0);

  /* "src/pyx/basemechanicalstate.pyx":105
 * 
 *         cdef _BaseMechanicalState* getRawPointer(self):
 *                 return self.mechanicalstateptr             # <<<<<<<<<<<<<<
 * 
 *         def __init__1(self, Base aBase):
 */
  __pyx_r = __pyx_v_self->mechanicalstateptr;
  goto __pyx_L0;

  /* "src/pyx/basemechanicalstate.pyx":104
 *                 return py_obj
 * 
 *         cdef _BaseMechanicalState* getRawPointer(self):             # <<<<<<<<<<<<<<
 *                 return self.mechanicalstateptr
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "src/pyx/basemechanicalstate.pyx":107
 *                 return self.mechanicalstateptr
 * 
 *         def __init__1(self, Base aBase):             # <<<<<<<<<<<<<<
 *                 cdef _BaseMechanicalState* dc = dynamic_cast_basemechanicalobject(aBase.realptr) ;
 *                 if dc == NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10sofacython_19BaseMechanicalState_19__init__1(PyObject *__pyx_v_self, PyObject *__pyx_v_aBase); /*proto*/
static PyObject *__pyx_pw_10sofacython_19BaseMechanicalState_19__init__1(PyObject *__pyx_v_self, PyObject *__pyx_v_aBase) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__1 (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_aBase), __pyx_ptype_10sofacython_Base, 1, "aBase", 0))) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_10sofacython_19BaseMechanicalState_18__init__1(((struct __pyx_obj_10sofacython_BaseMechanicalState *)__pyx_v_self), ((struct __pyx_obj_10sofacython_Base *)__pyx_v_aBase));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10sofacython_19BaseMechanicalState_18__init__1(struct __pyx_obj_10sofacython_BaseMechanicalState *__pyx_v_self, struct __pyx_obj_10sofacython_Base *__pyx_v_aBase) {
  sofa::core::behavior::BaseMechanicalState *__pyx_v_dc;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  sofa::core::behavior::BaseMechanicalState *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__1", 0);

  /* "src/pyx/basemechanicalstate.pyx":108
 * 
 *         def __init__1(self, Base aBase):
 *                 cdef _BaseMechanicalState* dc = dynamic_cast_basemechanicalobject(aBase.realptr) ;             # <<<<<<<<<<<<<<
 *                 if dc == NULL:
 *                         raise Exception("Unable to create a BaseMechanicalState from a the provided argument")
 */
  __pyx_t_1 = dynamic_cast< sofa::core::behavior::BaseMechanicalState* >(__pyx_v_aBase->realptr); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_dc = __pyx_t_1;

  /* "src/pyx/basemechanicalstate.pyx":109
 *         def __init__1(self, Base aBase):
 *                 cdef _BaseMechanicalState* dc = dynamic_cast_basemechanicalobject(aBase.realptr) ;
 *                 if dc == NULL:             # <<<<<<<<<<<<<<
 *                         raise Exception("Unable to create a BaseMechanicalState from a the provided argument")
 *                 self.realptr = self.baseobjectptr = self.mechanicalstateptr = dc
 */
  __pyx_t_2 = ((__pyx_v_dc == NULL) != 0);
  if (__pyx_t_2) {

    /* "src/pyx/basemechanicalstate.pyx":110
 *                 cdef _BaseMechanicalState* dc = dynamic_cast_basemechanicalobject(aBase.realptr) ;
 *                 if dc == NULL:
 *                         raise Exception("Unable to create a BaseMechanicalState from a the provided argument")             # <<<<<<<<<<<<<<
 *                 self.realptr = self.baseobjectptr = self.mechanicalstateptr = dc
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_Exception, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[10]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "src/pyx/basemechanicalstate.pyx":109
 *         def __init__1(self, Base aBase):
 *                 cdef _BaseMechanicalState* dc = dynamic_cast_basemechanicalobject(aBase.realptr) ;
 *                 if dc == NULL:             # <<<<<<<<<<<<<<
 *                         raise Exception("Unable to create a BaseMechanicalState from a the provided argument")
 *                 self.realptr = self.baseobjectptr = self.mechanicalstateptr = dc
 */
  }

  /* "src/pyx/basemechanicalstate.pyx":111
 *                 if dc == NULL:
 *                         raise Exception("Unable to create a BaseMechanicalState from a the provided argument")
 *                 self.realptr = self.baseobjectptr = self.mechanicalstateptr = dc             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->__pyx_base.__pyx_base.realptr = __pyx_v_dc;
  __pyx_v_self->__pyx_base.baseobjectptr = __pyx_v_dc;
  __pyx_v_self->mechanicalstateptr = __pyx_v_dc;

  /* "src/pyx/basemechanicalstate.pyx":107
 *                 return self.mechanicalstateptr
 * 
 *         def __init__1(self, Base aBase):             # <<<<<<<<<<<<<<
 *                 cdef _BaseMechanicalState* dc = dynamic_cast_basemechanicalobject(aBase.realptr) ;
 *                 if dc == NULL:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("sofacython.BaseMechanicalState.__init__1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[11]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[11]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[11]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[11]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[11]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[11]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_10sofacython_Vec3d(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_10sofacython_Vec3d *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10sofacython_Vec3d *)o);
  new((void*)&(p->inst)) boost::shared_ptr<sofa::defaulttype::Vec3d> ();
  return o;
}

static void __pyx_tp_dealloc_10sofacython_Vec3d(PyObject *o) {
  struct __pyx_obj_10sofacython_Vec3d *p = (struct __pyx_obj_10sofacython_Vec3d *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_10sofacython_5Vec3d_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->inst);
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_10sofacython_Vec3d(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_10sofacython_Vec3d(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_10sofacython_5Vec3d_35__setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyMethodDef __pyx_methods_10sofacython_Vec3d[] = {
  {"set", (PyCFunction)__pyx_pw_10sofacython_5Vec3d_3set, METH_VARARGS|METH_KEYWORDS, 0},
  {"normalize", (PyCFunction)__pyx_pw_10sofacython_5Vec3d_9normalize, METH_NOARGS, 0},
  {"normalized", (PyCFunction)__pyx_pw_10sofacython_5Vec3d_11normalized, METH_NOARGS, 0},
  {"mulscalar", (PyCFunction)__pyx_pw_10sofacython_5Vec3d_13mulscalar, METH_O, 0},
  {"elementmul", (PyCFunction)__pyx_pw_10sofacython_5Vec3d_17elementmul, METH_O, 0},
  {"norm", (PyCFunction)__pyx_pw_10sofacython_5Vec3d_21norm, METH_NOARGS, 0},
  {"__copy__", (PyCFunction)__pyx_pw_10sofacython_5Vec3d_23__copy__, METH_NOARGS, 0},
  {"__deepcopy__", (PyCFunction)__pyx_pw_10sofacython_5Vec3d_25__deepcopy__, METH_O, 0},
  {"_init_0", (PyCFunction)__pyx_pw_10sofacython_5Vec3d_27_init_0, METH_NOARGS, 0},
  {"_init_1", (PyCFunction)__pyx_pw_10sofacython_5Vec3d_29_init_1, METH_O, 0},
  {"_init_2", (PyCFunction)__pyx_pw_10sofacython_5Vec3d_31_init_2, METH_VARARGS|METH_KEYWORDS, 0},
  {"y", (PyCFunction)__pyx_pw_10sofacython_5Vec3d_41y, METH_NOARGS, 0},
  {"x", (PyCFunction)__pyx_pw_10sofacython_5Vec3d_43x, METH_NOARGS, 0},
  {"z", (PyCFunction)__pyx_pw_10sofacython_5Vec3d_45z, METH_NOARGS, 0},
  {"xy", (PyCFunction)__pyx_pw_10sofacython_5Vec3d_47xy, METH_NOARGS, 0},
  {"xyz", (PyCFunction)__pyx_pw_10sofacython_5Vec3d_49xyz, METH_NOARGS, 0},
  {"distanceTo", (PyCFunction)__pyx_pw_10sofacython_5Vec3d_53distanceTo, METH_O, 0},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Vec3d = {
  __pyx_pw_10sofacython_5Vec3d_5__add__, /*nb_add*/
  __pyx_pw_10sofacython_5Vec3d_7__sub__, /*nb_subtract*/
  __pyx_pw_10sofacython_5Vec3d_19__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10sofacython_5Vec3d_15__div__, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Vec3d = {
  __pyx_pw_10sofacython_5Vec3d_39__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_10sofacython_Vec3d, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Vec3d = {
  __pyx_pw_10sofacython_5Vec3d_39__len__, /*mp_length*/
  __pyx_pw_10sofacython_5Vec3d_37__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_10sofacython_Vec3d, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_10sofacython_Vec3d = {
  PyVarObject_HEAD_INIT(0, 0)
  "sofacython.Vec3d", /*tp_name*/
  sizeof(struct __pyx_obj_10sofacython_Vec3d), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10sofacython_Vec3d, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Vec3d, /*tp_as_number*/
  &__pyx_tp_as_sequence_Vec3d, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Vec3d, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_10sofacython_5Vec3d_51__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  " A 3D Vector containg double values. \n        examples:\n                v1 = Vec3d()        # Create an empty vector\n                v1 = Vec3d(1,2,3)   # Create a vector with the given values\n                v1 = Vec3d([1,2,3]) # Create a vector with the values from a list\n                v2 = Vec3d(v)       #\302\240Create a copy of the provided vector\n        \n                v3 = v1 + v2         # Adds v1 and v2  \n                v3 = v1 - v2         # Subtracts v1 and v2               \n                v3[0], v3[1], v3[2]  #\302\240Returns the first component of the vector\n                v3.x(), v3.y(), v3.z()  #\302\240Returns the x,y,z component\n                v3.xy()                 #\302\240Returns a tuple containing the x,y component\n                v3.xyz()                # Returns a tuple containing the x,y,z component\n                v3.norm()               # Returns a float with  the norm of the vector \n                v3.distanceTo(v1)       #\302\240Returns the distance between v3 and v1\n                v3.set(1.0,0.0,1.0)     #\302\240Set new values to x,y,z\n                v3.normalize()          #\302\240Normalizes the current vector\n                v3.normalized()         #\302\240Returns a normalized version of the vector\n                v3 * v2                 #\302\240Returns the result of the element by element multiplication\n                v3 * 1.0                #\302\240Returns the result of the vector multiplied by a scalar\n                v3 / 1.0                #\302\240Returns the result of the vector divided by a scalar\n                len(v)                  # Returns 3...so you can use this class in for loops.\n                v3[i] = 1.0             # Set the i'th component to a given value\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10sofacython_Vec3d, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10sofacython_5Vec3d_33__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10sofacython_Vec3d, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_10sofacython_Base __pyx_vtable_10sofacython_Base;

static PyObject *__pyx_tp_new_10sofacython_Base(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_10sofacython_Base *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10sofacython_Base *)o);
  p->__pyx_vtab = __pyx_vtabptr_10sofacython_Base;
  return o;
}

static void __pyx_tp_dealloc_10sofacython_Base(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_tp_getattro_10sofacython_Base(PyObject *o, PyObject *n) {
  PyObject *v = PyObject_GenericGetAttr(o, n);
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {
    PyErr_Clear();
    v = __pyx_pw_10sofacython_4Base_17__getattr__(o, n);
  }
  return v;
}

static int __pyx_tp_setattro_10sofacython_Base(PyObject *o, PyObject *n, PyObject *v) {
  if (v) {
    return __pyx_pw_10sofacython_4Base_19__setattr__(o, n, v);
  }
  else {
    return PyObject_GenericSetAttr(o, n, 0);
  }
}

static PyMethodDef __pyx_methods_10sofacython_Base[] = {
  {"findData", (PyCFunction)__pyx_pw_10sofacython_4Base_1findData, METH_O, __pyx_doc_10sofacython_4Base_findData},
  {"getName", (PyCFunction)__pyx_pw_10sofacython_4Base_3getName, METH_NOARGS, __pyx_doc_10sofacython_4Base_2getName},
  {"getTypeName", (PyCFunction)__pyx_pw_10sofacython_4Base_7getTypeName, METH_NOARGS, 0},
  {"getClassName", (PyCFunction)__pyx_pw_10sofacython_4Base_9getClassName, METH_NOARGS, __pyx_doc_10sofacython_4Base_8getClassName},
  {"getTemplateName", (PyCFunction)__pyx_pw_10sofacython_4Base_11getTemplateName, METH_NOARGS, 0},
  {"getDataNames", (PyCFunction)__pyx_pw_10sofacython_4Base_13getDataNames, METH_NOARGS, __pyx_doc_10sofacython_4Base_12getDataNames},
  {"__getattr__", (PyCFunction)__pyx_pw_10sofacython_4Base_17__getattr__, METH_O|METH_COEXIST, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10sofacython_Base = {
  PyVarObject_HEAD_INIT(0, 0)
  "sofacython.Base", /*tp_name*/
  sizeof(struct __pyx_obj_10sofacython_Base), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10sofacython_Base, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_10sofacython_4Base_5__str__, /*tp_str*/
  __pyx_tp_getattro_10sofacython_Base, /*tp_getattro*/
  __pyx_tp_setattro_10sofacython_Base, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  " Hold a sofa Base object providing access to object's name and datafield  \n        If other functionnalites are needed you can downcast this object to\n        the other corresponding type using the constructors. If the conversion\n        is not possible a TypeError exception is risen. \n        \n        Example: \n          sel_asBase = Editor.getSelected() #\302\240return the Base object that is currently selected  \n          sel_asBaseObject = BaseObject(selection)\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_10sofacython_4Base_21__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10sofacython_Base, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10sofacython_4Base_15__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10sofacython_Base, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_10sofacython_BaseObjectDescription(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_10sofacython_BaseObjectDescription(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_10sofacython_21BaseObjectDescription_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_10sofacython_BaseObjectDescription[] = {
  {"getName", (PyCFunction)__pyx_pw_10sofacython_21BaseObjectDescription_5getName, METH_NOARGS, 0},
  {"setAttribute", (PyCFunction)__pyx_pw_10sofacython_21BaseObjectDescription_7setAttribute, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10sofacython_BaseObjectDescription = {
  PyVarObject_HEAD_INIT(0, 0)
  "sofacython.BaseObjectDescription", /*tp_name*/
  sizeof(struct __pyx_obj_10sofacython_BaseObjectDescription), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10sofacython_BaseObjectDescription, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10sofacython_BaseObjectDescription, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10sofacython_21BaseObjectDescription_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10sofacython_BaseObjectDescription, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_10sofacython_ObjectFactory(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_10sofacython_ObjectFactory(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_10sofacython_ObjectFactory[] = {
  {"createObject", (PyCFunction)__pyx_pw_10sofacython_13ObjectFactory_1createObject, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10sofacython_ObjectFactory = {
  PyVarObject_HEAD_INIT(0, 0)
  "sofacython.ObjectFactory", /*tp_name*/
  sizeof(struct __pyx_obj_10sofacython_ObjectFactory), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10sofacython_ObjectFactory, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "An utilitary class allowing to create object attached to a specific location of the scene graph\n        \n           Examples:\n                r = Simulation.getRoot()\n                d = BaseObjectDescription(\"object name\", \"MechanicalObject\") \n                c = ObjectFactory.createObject(r, d) \n                print(\"Object of type : \"+str(c.getClassname())+\" and name: \"+str(c.getName())\n        ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10sofacython_ObjectFactory, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10sofacython_ObjectFactory, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_10sofacython_BaseData(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_10sofacython_BaseData(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_10sofacython_BaseData(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_10sofacython_BaseData(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_10sofacython_8BaseData_21__setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyMethodDef __pyx_methods_10sofacython_BaseData[] = {
  {"getName", (PyCFunction)__pyx_pw_10sofacython_8BaseData_1getName, METH_NOARGS, 0},
  {"getValueString", (PyCFunction)__pyx_pw_10sofacython_8BaseData_3getValueString, METH_NOARGS, __pyx_doc_10sofacython_8BaseData_2getValueString},
  {"getValueTypeString", (PyCFunction)__pyx_pw_10sofacython_8BaseData_5getValueTypeString, METH_NOARGS, __pyx_doc_10sofacython_8BaseData_4getValueTypeString},
  {"dim", (PyCFunction)__pyx_pw_10sofacython_8BaseData_7dim, METH_NOARGS, __pyx_doc_10sofacython_8BaseData_6dim},
  {"setSize", (PyCFunction)__pyx_pw_10sofacython_8BaseData_9setSize, METH_O, __pyx_doc_10sofacython_8BaseData_8setSize},
  {"append", (PyCFunction)__pyx_pw_10sofacython_8BaseData_11append, METH_O, __pyx_doc_10sofacython_8BaseData_10append},
  {"setPersistent", (PyCFunction)__pyx_pw_10sofacython_8BaseData_13setPersistent, METH_O, __pyx_doc_10sofacython_8BaseData_12setPersistent},
  {"isPersistent", (PyCFunction)__pyx_pw_10sofacython_8BaseData_15isPersistent, METH_NOARGS, __pyx_doc_10sofacython_8BaseData_14isPersistent},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_BaseData = {
  __pyx_pw_10sofacython_8BaseData_17__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_10sofacython_BaseData, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_BaseData = {
  __pyx_pw_10sofacython_8BaseData_17__len__, /*mp_length*/
  __pyx_pw_10sofacython_8BaseData_19__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_10sofacython_BaseData, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_10sofacython_BaseData = {
  PyVarObject_HEAD_INIT(0, 0)
  "sofacython.BaseData", /*tp_name*/
  sizeof(struct __pyx_obj_10sofacython_BaseData), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10sofacython_BaseData, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_BaseData, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_BaseData, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_10sofacython_8BaseData_23__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  " A BaseData exposes the component data fields.\n        \n            Examples:\n                aData=Simulation.getRoot().findData(\"gravity\")\n                aData.getName()\n                aData.getValueString()\n                aData.getValueTypeString()\n                aData.dim()                     # returns a tuple with the dimension of the datafield\n                str(aData)\n                len(aData)\n                aData.append([1,2,3])\n                aData[0] = [1,2,3]              #\302\240To change the value at index 0 \n        ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10sofacython_BaseData, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10sofacython_BaseData, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_10sofacython_BaseObject __pyx_vtable_10sofacython_BaseObject;

static PyObject *__pyx_tp_new_10sofacython_BaseObject(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10sofacython_BaseObject *p;
  PyObject *o = __pyx_tp_new_10sofacython_Base(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10sofacython_BaseObject *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10sofacython_Base*)__pyx_vtabptr_10sofacython_BaseObject;
  return o;
}

static PyMethodDef __pyx_methods_10sofacython_BaseObject[] = {
  {"init", (PyCFunction)__pyx_pw_10sofacython_10BaseObject_1init, METH_NOARGS, 0},
  {"bwdInit", (PyCFunction)__pyx_pw_10sofacython_10BaseObject_3bwdInit, METH_NOARGS, 0},
  {"reinit", (PyCFunction)__pyx_pw_10sofacython_10BaseObject_5reinit, METH_NOARGS, 0},
  {"reset", (PyCFunction)__pyx_pw_10sofacython_10BaseObject_7reset, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10sofacython_BaseObject = {
  PyVarObject_HEAD_INIT(0, 0)
  "sofacython.BaseObject", /*tp_name*/
  sizeof(struct __pyx_obj_10sofacython_BaseObject), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10sofacython_Base, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_10sofacython_10BaseObject_11__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "All sofa components implementing specific simulation behaviors are named 'objects' and \n           inherits from the BaseObject class. \n        ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10sofacython_BaseObject, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10sofacython_10BaseObject_9__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10sofacython_BaseObject, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_10sofacython_BaseNode __pyx_vtable_10sofacython_BaseNode;

static PyObject *__pyx_tp_new_10sofacython_BaseNode(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10sofacython_BaseNode *p;
  PyObject *o = __pyx_tp_new_10sofacython_Base(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10sofacython_BaseNode *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10sofacython_Base*)__pyx_vtabptr_10sofacython_BaseNode;
  return o;
}

static PyMethodDef __pyx_methods_10sofacython_BaseNode[] = {
  {"getRoot", (PyCFunction)__pyx_pw_10sofacython_8BaseNode_1getRoot, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10sofacython_BaseNode = {
  PyVarObject_HEAD_INIT(0, 0)
  "sofacython.BaseNode", /*tp_name*/
  sizeof(struct __pyx_obj_10sofacython_BaseNode), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10sofacython_Base, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10sofacython_4Base_5__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  " A Node is a class defining the main scene data structure of a simulation.\n            It defined hierarchical relations between elements. Each node can have parent and child nodes \n            (potentially defining a tree), as well as attached objects (the leaves of the tree).\n        ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10sofacython_BaseNode, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10sofacython_4Base_15__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_10sofacython_BaseNode, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_10sofacython_BaseContext __pyx_vtable_10sofacython_BaseContext;

static PyObject *__pyx_tp_new_10sofacython_BaseContext(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10sofacython_BaseContext *p;
  PyObject *o = __pyx_tp_new_10sofacython_Base(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10sofacython_BaseContext *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10sofacython_Base*)__pyx_vtabptr_10sofacython_BaseContext;
  return o;
}

static PyTypeObject __pyx_type_10sofacython_BaseContext = {
  PyVarObject_HEAD_INIT(0, 0)
  "sofacython.BaseContext", /*tp_name*/
  sizeof(struct __pyx_obj_10sofacython_BaseContext), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10sofacython_Base, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10sofacython_4Base_5__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "A Context contains values or pointers to variables and parameters shared\n           by a group of objects, typically refering to the same simulated body.\n           Derived classes can defined simple isolated contexts or more powerful\n           hierarchical representations (scene-graphs), in which case the context also\n           implements the BaseNode interface.\n           ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10sofacython_4Base_15__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_10sofacython_BaseContext, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_10sofacython_Node __pyx_vtable_10sofacython_Node;

static PyObject *__pyx_tp_new_10sofacython_Node(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10sofacython_Node *p;
  PyObject *o = __pyx_tp_new_10sofacython_BaseNode(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10sofacython_Node *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10sofacython_Base*)__pyx_vtabptr_10sofacython_Node;
  return o;
}

static PyMethodDef __pyx_methods_10sofacython_Node[] = {
  {"getContext", (PyCFunction)__pyx_pw_10sofacython_4Node_1getContext, METH_NOARGS, __pyx_doc_10sofacython_4Node_getContext},
  {"getRoot", (PyCFunction)__pyx_pw_10sofacython_4Node_3getRoot, METH_NOARGS, 0},
  {"getTreeNode", (PyCFunction)__pyx_pw_10sofacython_4Node_5getTreeNode, METH_O, __pyx_doc_10sofacython_4Node_4getTreeNode},
  {"getChild", (PyCFunction)__pyx_pw_10sofacython_4Node_7getChild, METH_O, __pyx_doc_10sofacython_4Node_6getChild},
  {"getObject", (PyCFunction)__pyx_pw_10sofacython_4Node_9getObject, METH_O, __pyx_doc_10sofacython_4Node_8getObject},
  {"createChild", (PyCFunction)__pyx_pw_10sofacython_4Node_11createChild, METH_O, __pyx_doc_10sofacython_4Node_10createChild},
  {"createObject", (PyCFunction)__pyx_pw_10sofacython_4Node_13createObject, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10sofacython_4Node_12createObject},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10sofacython_Node = {
  PyVarObject_HEAD_INIT(0, 0)
  "sofacython.Node", /*tp_name*/
  sizeof(struct __pyx_obj_10sofacython_Node), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10sofacython_Base, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_10sofacython_4Node_15__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  " A Node is a class defining the main scene data structure of a simulation.\n            It defined hierarchical relations between elements. Each node can have parent and child nodes \n            (potentially defining a tree), as well as attached objects (the leaves of the tree).\n            \n            Examples:\n                \n                n = Simulation.getRoot()\n\n                Node: \n                        n.getContext()\n                        n.getTreeNode(\"childname\")\n                        n.getChild(\"childname\") \n                        n.getObject(\"objectname\")\n                        n.createChild(\"newchildname\")\n                        str(n)\n                \n                BaseNode:\n                        n.getRoot() \n                        \n                Base:\n                        n.findData(\"gravity\")\n                        n.getName()  \n                        n.getTypeName()\n                        n.getClassName()\n                        n.getTemplateName()\n                        n.gravity             #\302\240To acccess a data field\n                        n.gravity[0] = [1,2,3]             #\302\240change a data field values  \n                        \n                        n1 == n2                 #\302\240To check if two pythons object are pointing to the same C object.  \n        ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10sofacython_Node, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10sofacython_4Base_15__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_10sofacython_Node, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_10sofacython_Simulation(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_10sofacython_Simulation(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_10sofacython_Simulation[] = {
  {"getRoot", (PyCFunction)__pyx_pw_10sofacython_10Simulation_1getRoot, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10sofacython_10Simulation_getRoot},
  {"init", (PyCFunction)__pyx_pw_10sofacython_10Simulation_3init, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10sofacython_10Simulation_2init},
  {"initNode", (PyCFunction)__pyx_pw_10sofacython_10Simulation_5initNode, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10sofacython_10Simulation_4initNode},
  {"animate", (PyCFunction)__pyx_pw_10sofacython_10Simulation_7animate, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10sofacython_10Simulation_6animate},
  {"reset", (PyCFunction)__pyx_pw_10sofacython_10Simulation_9reset, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10sofacython_10Simulation_8reset},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10sofacython_Simulation = {
  PyVarObject_HEAD_INIT(0, 0)
  "sofacython.Simulation", /*tp_name*/
  sizeof(struct __pyx_obj_10sofacython_Simulation), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10sofacython_Simulation, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  " Main controller of the scene.\n            Defines how the scene is inited at the beginning, and updated at each time step.\n            Derives from Base in order to use smart pointers and model the parameters as Datas, \n            which makes their edition easy in the GUI.\n        ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10sofacython_Simulation, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10sofacython_Simulation, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_10sofacython_BaseMechanicalState __pyx_vtable_10sofacython_BaseMechanicalState;

static PyObject *__pyx_tp_new_10sofacython_BaseMechanicalState(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10sofacython_BaseMechanicalState *p;
  PyObject *o = __pyx_tp_new_10sofacython_BaseObject(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10sofacython_BaseMechanicalState *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10sofacython_Base*)__pyx_vtabptr_10sofacython_BaseMechanicalState;
  return o;
}

static PyMethodDef __pyx_methods_10sofacython_BaseMechanicalState[] = {
  {"getPX", (PyCFunction)__pyx_pw_10sofacython_19BaseMechanicalState_3getPX, METH_O, __pyx_doc_10sofacython_19BaseMechanicalState_2getPX},
  {"getPY", (PyCFunction)__pyx_pw_10sofacython_19BaseMechanicalState_5getPY, METH_O, __pyx_doc_10sofacython_19BaseMechanicalState_4getPY},
  {"getPZ", (PyCFunction)__pyx_pw_10sofacython_19BaseMechanicalState_7getPZ, METH_O, __pyx_doc_10sofacython_19BaseMechanicalState_6getPZ},
  {"applyScale", (PyCFunction)__pyx_pw_10sofacython_19BaseMechanicalState_9applyScale, METH_VARARGS|METH_KEYWORDS, 0},
  {"applyTranslation", (PyCFunction)__pyx_pw_10sofacython_19BaseMechanicalState_11applyTranslation, METH_VARARGS|METH_KEYWORDS, 0},
  {"applyRotation", (PyCFunction)__pyx_pw_10sofacython_19BaseMechanicalState_13applyRotation, METH_VARARGS|METH_KEYWORDS, 0},
  {"resize", (PyCFunction)__pyx_pw_10sofacython_19BaseMechanicalState_15resize, METH_O, 0},
  {"__init__1", (PyCFunction)__pyx_pw_10sofacython_19BaseMechanicalState_19__init__1, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_BaseMechanicalState = {
  __pyx_pw_10sofacython_19BaseMechanicalState_17__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_BaseMechanicalState = {
  __pyx_pw_10sofacython_19BaseMechanicalState_17__len__, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_10sofacython_BaseMechanicalState = {
  PyVarObject_HEAD_INIT(0, 0)
  "sofacython.BaseMechanicalState", /*tp_name*/
  sizeof(struct __pyx_obj_10sofacython_BaseMechanicalState), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10sofacython_Base, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_BaseMechanicalState, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_BaseMechanicalState, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10sofacython_10BaseObject_11__str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "In Sofa a BaseMechanicalState is a component that stores the mechanical DOFs.\n           The BaseMechanicalState inherits from BaseObject (and thus Base) and it is possible to downcast a \n           BaseObject (resp. a Base) to as BaseMechanicalState.\n           \n                Example to downcast from a BaseObject to a BaseMechanicalState:\n                        aBm = BaseMechanicalState(aBaseObject) \n        \n                Example to create such an object from the Simulation:\n                        r = Simulation.getRoot()\n                        o = BaseMechanicalState(r.createObject(\"MechanicalObject\", name=\"MyMechanicalObject\"))\n                        \n                Examples of method availables (not showing the in-herited ones):           \n                        len(o)\n                        o.getPX(int i)\n                        o.getPY(int i)\n                        o.getPZ(int i)\n                        o.applyRotation(rx,ry,rz)\n                        o.applyScale(sx, sy, sz)\n                        o.applyTranslation(tx,ty,tz)                        \n                                        \n                To iterate on the DOFs you can do: \n                        for i in range(0, len(o)):\n                                o.getPX(i)\n        ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10sofacython_BaseMechanicalState, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10sofacython_19BaseMechanicalState_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10sofacython_BaseMechanicalState, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "sofacython",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_2_2f_2_2f_2_2f, __pyx_k_2_2f_2_2f_2_2f, sizeof(__pyx_k_2_2f_2_2f_2_2f), 0, 0, 1, 0},
  {&__pyx_n_s_AttributeError, __pyx_k_AttributeError, sizeof(__pyx_k_AttributeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Base, __pyx_k_Base, sizeof(__pyx_k_Base), 0, 0, 1, 0},
  {&__pyx_kp_s_BaseObject, __pyx_k_BaseObject, sizeof(__pyx_k_BaseObject), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_create_an_empty_mechanica, __pyx_k_Cannot_create_an_empty_mechanica, sizeof(__pyx_k_Cannot_create_an_empty_mechanica), 0, 0, 1, 0},
  {&__pyx_kp_s_Division_by_zero, __pyx_k_Division_by_zero, sizeof(__pyx_k_Division_by_zero), 0, 0, 1, 0},
  {&__pyx_n_s_Exception, __pyx_k_Exception, sizeof(__pyx_k_Exception), 0, 0, 1, 1},
  {&__pyx_kp_s_Expecting_the_key_to_be_an_inter, __pyx_k_Expecting_the_key_to_be_an_inter, sizeof(__pyx_k_Expecting_the_key_to_be_an_inter), 0, 0, 1, 0},
  {&__pyx_kp_s_Index, __pyx_k_Index, sizeof(__pyx_k_Index), 0, 0, 1, 0},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_s_Index_is_too_big_for_this_vector, __pyx_k_Index_is_too_big_for_this_vector, sizeof(__pyx_k_Index_is_too_big_for_this_vector), 0, 0, 1, 0},
  {&__pyx_kp_s_Key, __pyx_k_Key, sizeof(__pyx_k_Key), 0, 0, 1, 0},
  {&__pyx_kp_s_Node, __pyx_k_Node, sizeof(__pyx_k_Node), 0, 0, 1, 0},
  {&__pyx_n_s_NotImplemented, __pyx_k_NotImplemented, sizeof(__pyx_k_NotImplemented), 0, 0, 1, 1},
  {&__pyx_kp_s_This_DataField_is_not_a_containe, __pyx_k_This_DataField_is_not_a_containe, sizeof(__pyx_k_This_DataField_is_not_a_containe), 0, 0, 1, 0},
  {&__pyx_kp_s_Too_much_parameters, __pyx_k_Too_much_parameters, sizeof(__pyx_k_Too_much_parameters), 0, 0, 1, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unable_to_create_a_BaseMechanica, __pyx_k_Unable_to_create_a_BaseMechanica, sizeof(__pyx_k_Unable_to_create_a_BaseMechanica), 0, 0, 1, 0},
  {&__pyx_kp_s_Unable_to_create_an_object_of_ty, __pyx_k_Unable_to_create_an_object_of_ty, sizeof(__pyx_k_Unable_to_create_an_object_of_ty), 0, 0, 1, 0},
  {&__pyx_kp_s_Unable_to_get_a_BaseObject_from, __pyx_k_Unable_to_get_a_BaseObject_from, sizeof(__pyx_k_Unable_to_get_a_BaseObject_from), 0, 0, 1, 0},
  {&__pyx_kp_s_Value_has_a_length_of_size, __pyx_k_Value_has_a_length_of_size, sizeof(__pyx_k_Value_has_a_length_of_size), 0, 0, 1, 0},
  {&__pyx_kp_s__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 0, 1, 0},
  {&__pyx_kp_s__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 0, 1, 0},
  {&__pyx_kp_s__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 0, 1, 0},
  {&__pyx_n_s_aContext, __pyx_k_aContext, sizeof(__pyx_k_aContext), 0, 0, 1, 1},
  {&__pyx_n_s_aDesc, __pyx_k_aDesc, sizeof(__pyx_k_aDesc), 0, 0, 1, 1},
  {&__pyx_n_s_aName, __pyx_k_aName, sizeof(__pyx_k_aName), 0, 0, 1, 1},
  {&__pyx_n_s_aType, __pyx_k_aType, sizeof(__pyx_k_aType), 0, 0, 1, 1},
  {&__pyx_n_s_aValue, __pyx_k_aValue, sizeof(__pyx_k_aValue), 0, 0, 1, 1},
  {&__pyx_n_s_animate, __pyx_k_animate, sizeof(__pyx_k_animate), 0, 0, 1, 1},
  {&__pyx_kp_s_arg_aName_has_a_wrong_type_strin, __pyx_k_arg_aName_has_a_wrong_type_strin, sizeof(__pyx_k_arg_aName_has_a_wrong_type_strin), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_aType_has_a_wrong_type_strin, __pyx_k_arg_aType_has_a_wrong_type_strin, sizeof(__pyx_k_arg_aType_has_a_wrong_type_strin), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_i_wrong_type, __pyx_k_arg_i_wrong_type, sizeof(__pyx_k_arg_i_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_in_0_wrong_type, __pyx_k_arg_in_0_wrong_type, sizeof(__pyx_k_arg_in_0_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_in_1_wrong_type, __pyx_k_arg_in_1_wrong_type, sizeof(__pyx_k_arg_in_1_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_in_2_wrong_type, __pyx_k_arg_in_2_wrong_type, sizeof(__pyx_k_arg_in_2_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_index_has_a_wrong_type_int_i, __pyx_k_arg_index_has_a_wrong_type_int_i, sizeof(__pyx_k_arg_index_has_a_wrong_type_int_i), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_sx_wrong_type, __pyx_k_arg_sx_wrong_type, sizeof(__pyx_k_arg_sx_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_sy_wrong_type, __pyx_k_arg_sy_wrong_type, sizeof(__pyx_k_arg_sy_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_sz_wrong_type, __pyx_k_arg_sz_wrong_type, sizeof(__pyx_k_arg_sz_wrong_type), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_value_has_a_wrong_type_int_o, __pyx_k_arg_value_has_a_wrong_type_int_o, sizeof(__pyx_k_arg_value_has_a_wrong_type_int_o), 0, 0, 1, 0},
  {&__pyx_kp_s_arg_value_has_a_wrong_type_int_o_2, __pyx_k_arg_value_has_a_wrong_type_int_o_2, sizeof(__pyx_k_arg_value_has_a_wrong_type_int_o_2), 0, 0, 1, 0},
  {&__pyx_kp_s_can_not_handle_type_of_s, __pyx_k_can_not_handle_type_of_s, sizeof(__pyx_k_can_not_handle_type_of_s), 0, 0, 1, 0},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_createObject, __pyx_k_createObject, sizeof(__pyx_k_createObject), 0, 0, 1, 1},
  {&__pyx_n_s_dt, __pyx_k_dt, sizeof(__pyx_k_dt), 0, 0, 1, 1},
  {&__pyx_n_s_elementmul, __pyx_k_elementmul, sizeof(__pyx_k_elementmul), 0, 0, 1, 1},
  {&__pyx_n_s_findData, __pyx_k_findData, sizeof(__pyx_k_findData), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_getContext, __pyx_k_getContext, sizeof(__pyx_k_getContext), 0, 0, 1, 1},
  {&__pyx_n_s_getName, __pyx_k_getName, sizeof(__pyx_k_getName), 0, 0, 1, 1},
  {&__pyx_n_s_getRoot, __pyx_k_getRoot, sizeof(__pyx_k_getRoot), 0, 0, 1, 1},
  {&__pyx_kp_s_has_no_attribute, __pyx_k_has_no_attribute, sizeof(__pyx_k_has_no_attribute), 0, 0, 1, 0},
  {&__pyx_kp_s_home_dmarchal_projects_2015_DEF, __pyx_k_home_dmarchal_projects_2015_DEF, sizeof(__pyx_k_home_dmarchal_projects_2015_DEF), 0, 0, 1, 0},
  {&__pyx_kp_s_home_dmarchal_projects_2015_DEF_2, __pyx_k_home_dmarchal_projects_2015_DEF_2, sizeof(__pyx_k_home_dmarchal_projects_2015_DEF_2), 0, 0, 1, 0},
  {&__pyx_n_s_in_0, __pyx_k_in_0, sizeof(__pyx_k_in_0), 0, 0, 1, 1},
  {&__pyx_n_s_in_1, __pyx_k_in_1, sizeof(__pyx_k_in_1), 0, 0, 1, 1},
  {&__pyx_n_s_in_2, __pyx_k_in_2, sizeof(__pyx_k_in_2), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_initNode, __pyx_k_initNode, sizeof(__pyx_k_initNode), 0, 0, 1, 1},
  {&__pyx_n_s_init_0, __pyx_k_init_0, sizeof(__pyx_k_init_0), 0, 0, 1, 1},
  {&__pyx_n_s_init_1, __pyx_k_init_1, sizeof(__pyx_k_init_1), 0, 0, 1, 1},
  {&__pyx_n_s_init_2, __pyx_k_init_2, sizeof(__pyx_k_init_2), 0, 0, 1, 1},
  {&__pyx_n_s_init__1, __pyx_k_init__1, sizeof(__pyx_k_init__1), 0, 0, 1, 1},
  {&__pyx_kp_s_is_invalid_as_it_should_lie_in, __pyx_k_is_invalid_as_it_should_lie_in, sizeof(__pyx_k_is_invalid_as_it_should_lie_in), 0, 0, 1, 0},
  {&__pyx_kp_s_is_to_big_for_this_array_of_siz, __pyx_k_is_to_big_for_this_array_of_siz, sizeof(__pyx_k_is_to_big_for_this_array_of_siz), 0, 0, 1, 0},
  {&__pyx_n_s_iteritems, __pyx_k_iteritems, sizeof(__pyx_k_iteritems), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_mulscalar, __pyx_k_mulscalar, sizeof(__pyx_k_mulscalar), 0, 0, 1, 1},
  {&__pyx_n_s_node, __pyx_k_node, sizeof(__pyx_k_node), 0, 0, 1, 1},
  {&__pyx_n_s_norm, __pyx_k_norm, sizeof(__pyx_k_norm), 0, 0, 1, 1},
  {&__pyx_n_s_normalize, __pyx_k_normalize, sizeof(__pyx_k_normalize), 0, 0, 1, 1},
  {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reset, __pyx_k_reset, sizeof(__pyx_k_reset), 0, 0, 1, 1},
  {&__pyx_kp_s_seems_to_be_of_type, __pyx_k_seems_to_be_of_type, sizeof(__pyx_k_seems_to_be_of_type), 0, 0, 1, 0},
  {&__pyx_n_s_setAttribute, __pyx_k_setAttribute, sizeof(__pyx_k_setAttribute), 0, 0, 1, 1},
  {&__pyx_kp_s_setattr___has_no_attribute, __pyx_k_setattr___has_no_attribute, sizeof(__pyx_k_setattr___has_no_attribute), 0, 0, 1, 0},
  {&__pyx_kp_s_size_should_be_of_integer_type, __pyx_k_size_should_be_of_integer_type, sizeof(__pyx_k_size_should_be_of_integer_type), 0, 0, 1, 0},
  {&__pyx_n_s_sofacython, __pyx_k_sofacython, sizeof(__pyx_k_sofacython), 0, 0, 1, 1},
  {&__pyx_n_s_src, __pyx_k_src, sizeof(__pyx_k_src), 0, 0, 1, 1},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_n_s_sx, __pyx_k_sx, sizeof(__pyx_k_sx), 0, 0, 1, 1},
  {&__pyx_n_s_sy, __pyx_k_sy, sizeof(__pyx_k_sy), 0, 0, 1, 1},
  {&__pyx_n_s_sz, __pyx_k_sz, sizeof(__pyx_k_sz), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_kp_s_which_differ_from_the_expected, __pyx_k_which_differ_from_the_expected, sizeof(__pyx_k_which_differ_from_the_expected), 0, 0, 1, 0},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_Exception = __Pyx_GetBuiltinName(__pyx_n_s_Exception); if (!__pyx_builtin_Exception) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_AttributeError = __Pyx_GetBuiltinName(__pyx_n_s_AttributeError); if (!__pyx_builtin_AttributeError) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_NotImplemented = __Pyx_GetBuiltinName(__pyx_n_s_NotImplemented); if (!__pyx_builtin_NotImplemented) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "src/pyx/vec3d.pyx":138
 *         assert isinstance(in_0, (int, long)), 'arg in_0 wrong type'
 *         if in_0 >= 3 or in_0 < 0:
 *                 raise Exception("Index is too big for this vector of size 3")             # <<<<<<<<<<<<<<
 * 
 *         cdef long _idx = (<int>in_0)
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_Index_is_too_big_for_this_vector); if (unlikely(!__pyx_tuple_)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "src/pyx/basedata.pyx":93
 *                         return
 *                 self.realptr.endEditVoidPtr()
 *                 raise TypeError("This DataField is not a container or it cannot be resized.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_This_DataField_is_not_a_containe); if (unlikely(!__pyx_tuple__5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "src/pyx/baseobject.pyx":38
 *                 cdef _BaseObject* obj = dynamic_cast_baseobject_ptr(src.realptr)
 *                 if obj == NULL:
 *                         raise TypeError("Unable to get a BaseObject from this Base pointer...maybe it is a BaseNode, BaseContext or something else")             # <<<<<<<<<<<<<<
 *                 self.realptr = self.baseobjectptr = obj
 * 
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_get_a_BaseObject_from); if (unlikely(!__pyx_tuple__6)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "src/pyx/basemechanicalstate.pyx":37
 *         def __init__(self, *args):
 *                 if not args:
 *                         raise Exception("Cannot create an empty mechanical state, please use the ObjectFactory.createObject('myobject', 'MechanicalObject')) ")             # <<<<<<<<<<<<<<
 *                 elif (len(args)==1):
 *                         if isinstance(args[0], (Base, BaseObject)):
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_Cannot_create_an_empty_mechanica); if (unlikely(!__pyx_tuple__7)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "src/pyx/basemechanicalstate.pyx":42
 *                                 self.__init__1(args[0])
 *                         else:
 *                                 raise Exception("Too much parameters")             # <<<<<<<<<<<<<<
 *                 else:
 *                         raise Exception("Too much parameters")
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_Too_much_parameters); if (unlikely(!__pyx_tuple__8)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "src/pyx/basemechanicalstate.pyx":44
 *                                 raise Exception("Too much parameters")
 *                 else:
 *                         raise Exception("Too much parameters")             # <<<<<<<<<<<<<<
 * 
 *         def getPX(self,  i ):
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_Too_much_parameters); if (unlikely(!__pyx_tuple__9)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "src/pyx/basemechanicalstate.pyx":110
 *                 cdef _BaseMechanicalState* dc = dynamic_cast_basemechanicalobject(aBase.realptr) ;
 *                 if dc == NULL:
 *                         raise Exception("Unable to create a BaseMechanicalState from a the provided argument")             # <<<<<<<<<<<<<<
 *                 self.realptr = self.baseobjectptr = self.mechanicalstateptr = dc
 * 
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_create_a_BaseMechanica); if (unlikely(!__pyx_tuple__10)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "src/pyx/objectfactory.pyx":20
 * 
 *         @staticmethod
 *         def createObject(BaseContext aContext not None, BaseObjectDescription aDesc not None ):             # <<<<<<<<<<<<<<
 *                 cdef _BaseObjectSPtr p = _CreateObject(aContext.basecontextptr, aDesc.baseobjectdescriptionptr)
 *                 if p.get() == NULL :
 */
  __pyx_tuple__11 = PyTuple_Pack(3, __pyx_n_s_aContext, __pyx_n_s_aDesc, __pyx_n_s_p); if (unlikely(!__pyx_tuple__11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_dmarchal_projects_2015_DEF, __pyx_n_s_createObject, 20, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "src/pyx/simulation.pyx":12
 * 
 *         @staticmethod
 *         def getRoot():             # <<<<<<<<<<<<<<
 *                 """Returns the root node of the current simulation."""
 *                 return Node.createFrom(_Simulation_GetRoot().get())
 */
  __pyx_codeobj__13 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_dmarchal_projects_2015_DEF_2, __pyx_n_s_getRoot, 12, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__13)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "src/pyx/simulation.pyx":17
 * 
 *         @staticmethod
 *         def init(Node node not None):             # <<<<<<<<<<<<<<
 *                 """Initialize the scene graph starting from the provided root node
 * 
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_n_s_node); if (unlikely(!__pyx_tuple__14)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);
  __pyx_codeobj__15 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_dmarchal_projects_2015_DEF_2, __pyx_n_s_init, 17, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__15)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "src/pyx/simulation.pyx":26
 * 
 *         @staticmethod
 *         def initNode(Node node not None):             # <<<<<<<<<<<<<<
 *                 """Initialize the node without its context
 * 
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_n_s_node); if (unlikely(!__pyx_tuple__16)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);
  __pyx_codeobj__17 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__16, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_dmarchal_projects_2015_DEF_2, __pyx_n_s_initNode, 26, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__17)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "src/pyx/simulation.pyx":35
 * 
 *         @staticmethod
 *         def animate(Node node not None, float dt=0.0):             # <<<<<<<<<<<<<<
 *                 """Do one simulation step. The duration of the simulated step
 *                    is given in dt. If dt is 0, the dt parameter in the graph
 */
  __pyx_tuple__18 = PyTuple_Pack(2, __pyx_n_s_node, __pyx_n_s_dt); if (unlikely(!__pyx_tuple__18)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);
  __pyx_codeobj__19 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_dmarchal_projects_2015_DEF_2, __pyx_n_s_animate, 35, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__19)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "src/pyx/simulation.pyx":46
 * 
 *         @staticmethod
 *         def reset(Node node not None):             # <<<<<<<<<<<<<<
 *                 """Reset to initial state.
 * 
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_n_s_node); if (unlikely(!__pyx_tuple__20)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__20, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_dmarchal_projects_2015_DEF_2, __pyx_n_s_reset, 46, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initsofacython(void); /*proto*/
PyMODINIT_FUNC initsofacython(void)
#else
PyMODINIT_FUNC PyInit_sofacython(void); /*proto*/
PyMODINIT_FUNC PyInit_sofacython(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_sofacython(void)", 0);
  if (__Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("sofacython", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_sofacython) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "sofacython")) {
      if (unlikely(PyDict_SetItemString(modules, "sofacython", __pyx_m) < 0)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_10sofacython_Vec3d) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_10sofacython_Vec3d.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Vec3d", (PyObject *)&__pyx_type_10sofacython_Vec3d) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_10sofacython_Vec3d = &__pyx_type_10sofacython_Vec3d;
  __pyx_vtabptr_10sofacython_Base = &__pyx_vtable_10sofacython_Base;
  __pyx_vtable_10sofacython_Base.createFrom = (PyObject *(*)(sofa::core::objectmodel::Base *))__pyx_f_10sofacython_4Base_createFrom;
  if (PyType_Ready(&__pyx_type_10sofacython_Base) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_10sofacython_Base.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_10sofacython_Base.tp_dict, __pyx_vtabptr_10sofacython_Base) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "Base", (PyObject *)&__pyx_type_10sofacython_Base) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_10sofacython_Base = &__pyx_type_10sofacython_Base;
  if (PyType_Ready(&__pyx_type_10sofacython_BaseObjectDescription) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_10sofacython_BaseObjectDescription.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "BaseObjectDescription", (PyObject *)&__pyx_type_10sofacython_BaseObjectDescription) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_10sofacython_BaseObjectDescription = &__pyx_type_10sofacython_BaseObjectDescription;
  if (PyType_Ready(&__pyx_type_10sofacython_ObjectFactory) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_10sofacython_ObjectFactory.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "ObjectFactory", (PyObject *)&__pyx_type_10sofacython_ObjectFactory) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_10sofacython_ObjectFactory = &__pyx_type_10sofacython_ObjectFactory;
  if (PyType_Ready(&__pyx_type_10sofacython_BaseData) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_10sofacython_BaseData.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "BaseData", (PyObject *)&__pyx_type_10sofacython_BaseData) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_10sofacython_BaseData = &__pyx_type_10sofacython_BaseData;
  __pyx_vtabptr_10sofacython_BaseObject = &__pyx_vtable_10sofacython_BaseObject;
  __pyx_vtable_10sofacython_BaseObject.__pyx_base = *__pyx_vtabptr_10sofacython_Base;
  __pyx_vtable_10sofacython_BaseObject.__pyx_base.createFrom = (PyObject *(*)(sofa::core::objectmodel::Base *))__pyx_f_10sofacython_10BaseObject_createFrom;
  __pyx_type_10sofacython_BaseObject.tp_base = __pyx_ptype_10sofacython_Base;
  if (PyType_Ready(&__pyx_type_10sofacython_BaseObject) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_10sofacython_BaseObject.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_10sofacython_BaseObject.tp_dict, __pyx_vtabptr_10sofacython_BaseObject) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "BaseObject", (PyObject *)&__pyx_type_10sofacython_BaseObject) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_10sofacython_BaseObject = &__pyx_type_10sofacython_BaseObject;
  __pyx_vtabptr_10sofacython_BaseNode = &__pyx_vtable_10sofacython_BaseNode;
  __pyx_vtable_10sofacython_BaseNode.__pyx_base = *__pyx_vtabptr_10sofacython_Base;
  __pyx_vtable_10sofacython_BaseNode.__pyx_base.createFrom = (PyObject *(*)(sofa::core::objectmodel::Base *))__pyx_f_10sofacython_8BaseNode_createFrom;
  __pyx_type_10sofacython_BaseNode.tp_base = __pyx_ptype_10sofacython_Base;
  if (PyType_Ready(&__pyx_type_10sofacython_BaseNode) < 0) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_10sofacython_BaseNode.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_10sofacython_BaseNode.tp_dict, __pyx_vtabptr_10sofacython_BaseNode) < 0) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "BaseNode", (PyObject *)&__pyx_type_10sofacython_BaseNode) < 0) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_10sofacython_BaseNode = &__pyx_type_10sofacython_BaseNode;
  __pyx_vtabptr_10sofacython_BaseContext = &__pyx_vtable_10sofacython_BaseContext;
  __pyx_vtable_10sofacython_BaseContext.__pyx_base = *__pyx_vtabptr_10sofacython_Base;
  __pyx_vtable_10sofacython_BaseContext.__pyx_base.createFrom = (PyObject *(*)(sofa::core::objectmodel::Base *))__pyx_f_10sofacython_11BaseContext_createFrom;
  __pyx_type_10sofacython_BaseContext.tp_base = __pyx_ptype_10sofacython_Base;
  if (PyType_Ready(&__pyx_type_10sofacython_BaseContext) < 0) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_10sofacython_BaseContext.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_10sofacython_BaseContext.tp_dict, __pyx_vtabptr_10sofacython_BaseContext) < 0) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "BaseContext", (PyObject *)&__pyx_type_10sofacython_BaseContext) < 0) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_10sofacython_BaseContext = &__pyx_type_10sofacython_BaseContext;
  __pyx_vtabptr_10sofacython_Node = &__pyx_vtable_10sofacython_Node;
  __pyx_vtable_10sofacython_Node.__pyx_base = *__pyx_vtabptr_10sofacython_BaseNode;
  __pyx_vtable_10sofacython_Node.__pyx_base.__pyx_base.createFrom = (PyObject *(*)(sofa::core::objectmodel::Base *))__pyx_f_10sofacython_4Node_createFrom;
  __pyx_type_10sofacython_Node.tp_base = __pyx_ptype_10sofacython_BaseNode;
  if (PyType_Ready(&__pyx_type_10sofacython_Node) < 0) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_10sofacython_Node.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_10sofacython_Node.tp_dict, __pyx_vtabptr_10sofacython_Node) < 0) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "Node", (PyObject *)&__pyx_type_10sofacython_Node) < 0) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_10sofacython_Node = &__pyx_type_10sofacython_Node;
  if (PyType_Ready(&__pyx_type_10sofacython_Simulation) < 0) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_10sofacython_Simulation.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Simulation", (PyObject *)&__pyx_type_10sofacython_Simulation) < 0) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_10sofacython_Simulation = &__pyx_type_10sofacython_Simulation;
  __pyx_vtabptr_10sofacython_BaseMechanicalState = &__pyx_vtable_10sofacython_BaseMechanicalState;
  __pyx_vtable_10sofacython_BaseMechanicalState.__pyx_base = *__pyx_vtabptr_10sofacython_BaseObject;
  __pyx_vtable_10sofacython_BaseMechanicalState.__pyx_base.__pyx_base.createFrom = (PyObject *(*)(sofa::core::objectmodel::Base *))__pyx_f_10sofacython_19BaseMechanicalState_createFrom;
  __pyx_vtable_10sofacython_BaseMechanicalState.getRawPointer = (sofa::core::behavior::BaseMechanicalState *(*)(struct __pyx_obj_10sofacython_BaseMechanicalState *))__pyx_f_10sofacython_19BaseMechanicalState_getRawPointer;
  __pyx_type_10sofacython_BaseMechanicalState.tp_base = __pyx_ptype_10sofacython_BaseObject;
  if (PyType_Ready(&__pyx_type_10sofacython_BaseMechanicalState) < 0) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_10sofacython_BaseMechanicalState.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_10sofacython_BaseMechanicalState.tp_dict, __pyx_vtabptr_10sofacython_BaseMechanicalState) < 0) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "BaseMechanicalState", (PyObject *)&__pyx_type_10sofacython_BaseMechanicalState) < 0) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_10sofacython_BaseMechanicalState = &__pyx_type_10sofacython_BaseMechanicalState;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif

  /* "src/pyx/objectfactory.pyx":20
 * 
 *         @staticmethod
 *         def createObject(BaseContext aContext not None, BaseObjectDescription aDesc not None ):             # <<<<<<<<<<<<<<
 *                 cdef _BaseObjectSPtr p = _CreateObject(aContext.basecontextptr, aDesc.baseobjectdescriptionptr)
 *                 if p.get() == NULL :
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_10sofacython_13ObjectFactory_1createObject, NULL, __pyx_n_s_sofacython); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "src/pyx/objectfactory.pyx":19
 *         """
 * 
 *         @staticmethod             # <<<<<<<<<<<<<<
 *         def createObject(BaseContext aContext not None, BaseObjectDescription aDesc not None ):
 *                 cdef _BaseObjectSPtr p = _CreateObject(aContext.basecontextptr, aDesc.baseobjectdescriptionptr)
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10sofacython_ObjectFactory->tp_dict, __pyx_n_s_createObject, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10sofacython_ObjectFactory);

  /* "src/pyx/objectfactory.pyx":20
 * 
 *         @staticmethod
 *         def createObject(BaseContext aContext not None, BaseObjectDescription aDesc not None ):             # <<<<<<<<<<<<<<
 *                 cdef _BaseObjectSPtr p = _CreateObject(aContext.basecontextptr, aDesc.baseobjectdescriptionptr)
 *                 if p.get() == NULL :
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_10sofacython_ObjectFactory, __pyx_n_s_createObject); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "src/pyx/objectfactory.pyx":19
 *         """
 * 
 *         @staticmethod             # <<<<<<<<<<<<<<
 *         def createObject(BaseContext aContext not None, BaseObjectDescription aDesc not None ):
 *                 cdef _BaseObjectSPtr p = _CreateObject(aContext.basecontextptr, aDesc.baseobjectdescriptionptr)
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10sofacython_ObjectFactory->tp_dict, __pyx_n_s_createObject, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10sofacython_ObjectFactory);

  /* "src/pyx/simulation.pyx":12
 * 
 *         @staticmethod
 *         def getRoot():             # <<<<<<<<<<<<<<
 *                 """Returns the root node of the current simulation."""
 *                 return Node.createFrom(_Simulation_GetRoot().get())
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_10sofacython_10Simulation_1getRoot, NULL, __pyx_n_s_sofacython); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "src/pyx/simulation.pyx":11
 *         """
 * 
 *         @staticmethod             # <<<<<<<<<<<<<<
 *         def getRoot():
 *                 """Returns the root node of the current simulation."""
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10sofacython_Simulation->tp_dict, __pyx_n_s_getRoot, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10sofacython_Simulation);

  /* "src/pyx/simulation.pyx":12
 * 
 *         @staticmethod
 *         def getRoot():             # <<<<<<<<<<<<<<
 *                 """Returns the root node of the current simulation."""
 *                 return Node.createFrom(_Simulation_GetRoot().get())
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_10sofacython_Simulation, __pyx_n_s_getRoot); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "src/pyx/simulation.pyx":11
 *         """
 * 
 *         @staticmethod             # <<<<<<<<<<<<<<
 *         def getRoot():
 *                 """Returns the root node of the current simulation."""
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10sofacython_Simulation->tp_dict, __pyx_n_s_getRoot, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10sofacython_Simulation);

  /* "src/pyx/simulation.pyx":17
 * 
 *         @staticmethod
 *         def init(Node node not None):             # <<<<<<<<<<<<<<
 *                 """Initialize the scene graph starting from the provided root node
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_10sofacython_10Simulation_3init, NULL, __pyx_n_s_sofacython); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "src/pyx/simulation.pyx":16
 *                 return Node.createFrom(_Simulation_GetRoot().get())
 * 
 *         @staticmethod             # <<<<<<<<<<<<<<
 *         def init(Node node not None):
 *                 """Initialize the scene graph starting from the provided root node
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10sofacython_Simulation->tp_dict, __pyx_n_s_init, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10sofacython_Simulation);

  /* "src/pyx/simulation.pyx":17
 * 
 *         @staticmethod
 *         def init(Node node not None):             # <<<<<<<<<<<<<<
 *                 """Initialize the scene graph starting from the provided root node
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_10sofacython_Simulation, __pyx_n_s_init); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "src/pyx/simulation.pyx":16
 *                 return Node.createFrom(_Simulation_GetRoot().get())
 * 
 *         @staticmethod             # <<<<<<<<<<<<<<
 *         def init(Node node not None):
 *                 """Initialize the scene graph starting from the provided root node
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10sofacython_Simulation->tp_dict, __pyx_n_s_init, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10sofacython_Simulation);

  /* "src/pyx/simulation.pyx":26
 * 
 *         @staticmethod
 *         def initNode(Node node not None):             # <<<<<<<<<<<<<<
 *                 """Initialize the node without its context
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_10sofacython_10Simulation_5initNode, NULL, __pyx_n_s_sofacython); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "src/pyx/simulation.pyx":25
 *                 _theSimulation.get().init(node.nodeptr)
 * 
 *         @staticmethod             # <<<<<<<<<<<<<<
 *         def initNode(Node node not None):
 *                 """Initialize the node without its context
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10sofacython_Simulation->tp_dict, __pyx_n_s_initNode, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10sofacython_Simulation);

  /* "src/pyx/simulation.pyx":26
 * 
 *         @staticmethod
 *         def initNode(Node node not None):             # <<<<<<<<<<<<<<
 *                 """Initialize the node without its context
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_10sofacython_Simulation, __pyx_n_s_initNode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "src/pyx/simulation.pyx":25
 *                 _theSimulation.get().init(node.nodeptr)
 * 
 *         @staticmethod             # <<<<<<<<<<<<<<
 *         def initNode(Node node not None):
 *                 """Initialize the node without its context
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10sofacython_Simulation->tp_dict, __pyx_n_s_initNode, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10sofacython_Simulation);

  /* "src/pyx/simulation.pyx":35
 * 
 *         @staticmethod
 *         def animate(Node node not None, float dt=0.0):             # <<<<<<<<<<<<<<
 *                 """Do one simulation step. The duration of the simulated step
 *                    is given in dt. If dt is 0, the dt parameter in the graph
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_10sofacython_10Simulation_7animate, NULL, __pyx_n_s_sofacython); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "src/pyx/simulation.pyx":34
 *                 _theSimulation.get().initNode(node.nodeptr)
 * 
 *         @staticmethod             # <<<<<<<<<<<<<<
 *         def animate(Node node not None, float dt=0.0):
 *                 """Do one simulation step. The duration of the simulated step
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10sofacython_Simulation->tp_dict, __pyx_n_s_animate, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10sofacython_Simulation);

  /* "src/pyx/simulation.pyx":35
 * 
 *         @staticmethod
 *         def animate(Node node not None, float dt=0.0):             # <<<<<<<<<<<<<<
 *                 """Do one simulation step. The duration of the simulated step
 *                    is given in dt. If dt is 0, the dt parameter in the graph
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_10sofacython_Simulation, __pyx_n_s_animate); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "src/pyx/simulation.pyx":34
 *                 _theSimulation.get().initNode(node.nodeptr)
 * 
 *         @staticmethod             # <<<<<<<<<<<<<<
 *         def animate(Node node not None, float dt=0.0):
 *                 """Do one simulation step. The duration of the simulated step
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10sofacython_Simulation->tp_dict, __pyx_n_s_animate, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10sofacython_Simulation);

  /* "src/pyx/simulation.pyx":46
 * 
 *         @staticmethod
 *         def reset(Node node not None):             # <<<<<<<<<<<<<<
 *                 """Reset to initial state.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_10sofacython_10Simulation_9reset, NULL, __pyx_n_s_sofacython); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "src/pyx/simulation.pyx":45
 *                 _theSimulation.get().animate(node.nodeptr, dt)
 * 
 *         @staticmethod             # <<<<<<<<<<<<<<
 *         def reset(Node node not None):
 *                 """Reset to initial state.
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10sofacython_Simulation->tp_dict, __pyx_n_s_reset, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10sofacython_Simulation);

  /* "src/pyx/simulation.pyx":46
 * 
 *         @staticmethod
 *         def reset(Node node not None):             # <<<<<<<<<<<<<<
 *                 """Reset to initial state.
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_10sofacython_Simulation, __pyx_n_s_reset); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "src/pyx/simulation.pyx":45
 *                 _theSimulation.get().animate(node.nodeptr, dt)
 * 
 *         @staticmethod             # <<<<<<<<<<<<<<
 *         def reset(Node node not None):
 *                 """Reset to initial state.
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10sofacython_Simulation->tp_dict, __pyx_n_s_reset, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10sofacython_Simulation);

  /* "sofacython.pyx":1
 * # -*- coding: UTF8 -*-             # <<<<<<<<<<<<<<
 * from cython.operator cimport dereference as deref, preincrement as inc, address as address
 * include "vec3d.pyx"
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init sofacython", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init sofacython");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o))) {
#else
    if (is_list || PySequence_Check(o)) {
#endif
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) {
            Py_RETURN_TRUE;
        } else {
            Py_RETURN_FALSE;
        }
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                #if PyLong_SHIFT < 30 && PyLong_SHIFT != 15
                default: return PyLong_Type.tp_richcompare(op1, op2, Py_EQ);
                #else
                default: Py_RETURN_FALSE;
                #endif
            }
        }
            if (a == b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            if ((double)a == (double)b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    return PyObject_RichCompare(op1, op2, Py_EQ);
}
#endif

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *function = PyMethod_GET_FUNCTION(method);
            result = __Pyx_PyObject_CallOneArg(function, self);
            Py_DECREF(method);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                             int is_tuple, int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    if (!is_tuple && unlikely(!PyTuple_Check(tuple))) {
        iternextfunc iternext;
        iter = PyObject_GetIter(tuple);
        if (unlikely(!iter)) goto bad;
        if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
        iternext = Py_TYPE(iter)->tp_iternext;
        value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
        value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
        if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
        Py_DECREF(iter);
    } else {
        if (!has_known_size && unlikely(PyTuple_GET_SIZE(tuple) != 2)) {
            __Pyx_UnpackTupleError(tuple, 2);
            goto bad;
        }
#if CYTHON_COMPILING_IN_PYPY
        value1 = PySequence_ITEM(tuple, 0);
        if (unlikely(!value1)) goto bad;
        value2 = PySequence_ITEM(tuple, 1);
        if (unlikely(!value2)) goto bad;
#else
        value1 = PyTuple_GET_ITEM(tuple, 0);
        value2 = PyTuple_GET_ITEM(tuple, 1);
        Py_INCREF(value1);
        Py_INCREF(value2);
#endif
        if (decref_tuple) { Py_DECREF(tuple); }
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
#if !CYTHON_COMPILING_IN_PYPY
    if (is_dict) {
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
    }
#endif
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result)
        result = __Pyx_GetModuleGlobalName(name);
    return result;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_PY_LONG_LONG(PY_LONG_LONG value) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG) -1, const_zero = (PY_LONG_LONG) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(PY_LONG_LONG) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(PY_LONG_LONG) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(PY_LONG_LONG) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(PY_LONG_LONG),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_As_PY_LONG_LONG(PyObject *x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG) -1, const_zero = (PY_LONG_LONG) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(PY_LONG_LONG) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (PY_LONG_LONG) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (PY_LONG_LONG) 0;
                case  1: __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, digit, digits[0])
                case 2:
                    if (8 * sizeof(PY_LONG_LONG) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) >= 2 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((((PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(PY_LONG_LONG) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) >= 3 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((((((PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(PY_LONG_LONG) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) >= 4 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((((((((PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (PY_LONG_LONG) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(PY_LONG_LONG) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(PY_LONG_LONG, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(PY_LONG_LONG, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (PY_LONG_LONG) 0;
                case -1: __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(PY_LONG_LONG,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(PY_LONG_LONG) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((PY_LONG_LONG)-1)*(((((PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(PY_LONG_LONG) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) ((((((PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((PY_LONG_LONG)-1)*(((((((PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(PY_LONG_LONG) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) ((((((((PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((PY_LONG_LONG)-1)*(((((((((PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(PY_LONG_LONG) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) ((((((((((PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(PY_LONG_LONG) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(PY_LONG_LONG, long, PyLong_AsLong(x))
            } else if (sizeof(PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(PY_LONG_LONG, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            PY_LONG_LONG val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (PY_LONG_LONG) -1;
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (PY_LONG_LONG) -1;
        val = __Pyx_PyInt_As_PY_LONG_LONG(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to PY_LONG_LONG");
    return (PY_LONG_LONG) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to PY_LONG_LONG");
    return (PY_LONG_LONG) -1;
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
