#!/usr/bin/env python
# -*- coding: utf-8 -*-

import Sofa
import SofaPython as sp
import os

# This scene illustrates the basic functionality of the "PythonScriptDataEngine" (PSDE). First a small introduction the PSDE is given, then the scene itself is explained.
#
# The PSDE  works similar to a function block in Simulink or comparable software. The user can define a block (a PSDE) declaring its Inputs, Outputs (I/Os)
# and its behavior using Python alone. It has some similarities with the "PythonScriptController" (PSC). The two main differences are:
# - PSDE-objects are not triggered by events (not conceptually at least). Rather, the functionality should be implemented in the update() function of the associated script,
#   which is called once per simulation frame. (This implementation might change in the future to "on-demand" calling of update() only when an Output is read and the Inputs to the PSDE have changed)
# - I/Os can be added directly to the object inside the parse() function of the PSDE-object. Linking using the '@'-syntax also works. Therefore, the PSDE-object behaves like any other object
#   that has I/Os (or Data in general). Inside the script these newly defined I/Os can be accessed as members of the object, providing an easy syntax. Regarding the creation of the I/Os the 
#   types for the Data (Inputs and Outputs) are automatically derived in the linking process, if it is feasible. More comments about this are provided in the code.
# 
# The line: model.createObject('PythonScriptDataEngine', name='PSDE', filename="__file__", classname="PyAverageEngine")
# creates a PSDE-object with the name 'PSDE' and associates the class "PyAverageEngine" to it. Inside the script there are three functions that the user can implement by the user parse(),init() and update():
# - parse() is called when the SOFA factory instantiates the PSDE-object and creates its I/Os. I/O-creation should be done here, especially for linked Data.
# - init() is called once, when the graph is initialized. Can be used to set initial values, etc.
# - update() is called once in every frame.
#
# The scene is very basic and just shows how the PSDE is created with an associated Python script and how I/Os can be created. The PSDE takes the points of a mesh and calculates the mean coordinates. Then, this 
# value is passed to a "TransformEngine", that moves the mesh to these coordinates. The functionality can be inspected by looking at the properties (Inputs, Outputs) of the PSDE-object in the scene-graph.
#

path = 'mesh/'

class PyAverageEngine(Sofa.PythonScriptDataEngine):

    args = { "positions": sp.initData("positions", datatype="vector<Vec3d>", help="[Required] Input set of positions to average"),
             "test": sp.initData("test", default="42", datatype="int", help="[Optional] input parameter")
    }

    @sp.ParseInputs
    def parse(self, arg):
        self.addNewOutput('average', help="Average coordinate of the input point cloud")
        
    def init(self):
	pass
    
    def update(self):
        value = [0, 0, 0]
        for pos in self.positions:
            value[0] += pos[0]
            value[1] += pos[1]
            value[2] += pos[2]
        value[0] /= len(self.positions)
        value[1] /= len(self.positions)
        value[2] /= len(self.positions)
        self.cleanDirty()
        self.average = [-value[0],-value[1],-value[2]]
        pass


def createScene(rootNode):
        rootNode.createObject("MeshVTKLoader", name="loader", filename=path+'liver.vtk')
        rootNode.createObject('PythonScriptDataEngine', name='PSDE', filename=__file__, classname="PyAverageEngine", positions="@loader.position")
        rootNode.createObject('TransformEngine', name='TE', input_position="@loader.position", translation="@PSDE.average")
        rootNode.createObject('OglModel', name="visu", position="@TE.output_position", triangles="@loader.triangles", color="1 0 0 1")
