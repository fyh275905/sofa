################################################
# YOU SHOULD NOT NEED TO MODIFY ANYTHING BELOW #
################################################

# Auto-detect SOFA_DIR if not specified
isEmpty(SOFA_DIR) {
  win32 {
    SOFA_DIR = $$system(echo %CD%)
  }
  else:macx {
    SOFA_DIR = $$(PWD)
  }
  else {
    SOFA_DIR = $$system(pwd)
  }
}

DLLDESTDIR = $$SOFA_DIR/bin

# Auto-detect Qt 4.x
# The QT variable was introduced in Qt 4
!isEmpty(QT): DEFINES += SOFA_QT4

!include( sofa-local.cfg ) {
  # Copy sofa-default.cfg to sofa-local.cfg and modify it to change local options
  include( sofa-default.cfg )
}

!contains(DEFINES, SOFA_DEV): message("WARNING: SOFA_DEV not defined, in-development code will be disabled!")

CONFIG -= qt

# QT4: for subdirs projects, parallel makes support
CONFIG += ordered

contains(DEFINES, SOFA_QT4) {
  # qmake 4.x supports this syntax
  win32:!build_pass {
    # Force release mode when generating visual studio solutions
    CONFIGDEBUG = release
  } else:contains (CONFIG, debug, debug|release) {
    CONFIGDEBUG = debug
  } else {
#  contains (CONFIG, release, debug|release) {
    CONFIGDEBUG = release
  }
}
else {
  contains (CONFIG, debug) {
    CONFIGDEBUG = debug
  }
  contains (CONFIG, release) {
    CONFIGDEBUG = release
  }
}
contains (QMAKE_CXXFLAGS, -pg) {
  CONFIGDEBUG *= profile
}


win32{
	CONFIG -= flat # preserve directory structure in files lists

	# No support for DLL yet
	CONFIGLIBRARIES=staticlib

	#CONFIGLIBRARIES=dll
	#MSVCPROJ_LIBOPTIONS=/IMPLIB:$(TargetDir)$(TargetName).lib

	# release libs have no suffix
	LIBSUFFIX=
	
	contains (CONFIGDEBUG, debug) {
		LIBSUFFIX = d
	}

	# Config for Visual C++ 7
	win32-msvc.net{
		CONFIGPROJECT=console vc7 thread
		contains (CONFIGDEBUG, debug) {
			LIBSDIRECTORY=win32/DebugVC7
			QMAKE_LFLAGS += /NODEFAULTLIB:libcd /NODEFAULTLIB:MSVCRT	
		}
		contains (CONFIGDEBUG, release) {
			LIBSDIRECTORY=win32/ReleaseVC7
			QMAKE_LFLAGS += /NODEFAULTLIB:libc /NODEFAULTLIB:MSVCRTD
		}
		QMAKE_CXXFLAGS_DEBUG = -wd4675 -wd4250 -wd4251 -wd4275 -GR -GX -MDd # -O1 -Og -Ob2 -GA -Ot -MDd # -G7 
		QMAKE_CXXFLAGS_RELEASE = -wd4675 -wd4250 -wd4251 -wd4275 -GR -GX -Ox -Og -Ob2 -GA -Ot -MD # -G7
	}
	
	# Config for Visual C++ 8
	win32-msvc2005{
		CONFIGPROJECT=console vc7 thread
		contains (CONFIGDEBUG, debug) {
			LIBSDIRECTORY=win32/DebugVC8
			QMAKE_LFLAGS += /NODEFAULTLIB:libcd /NODEFAULTLIB:MSVCRT	
		}
		contains (CONFIGDEBUG, release) {
			LIBSDIRECTORY=win32/ReleaseVC8
			QMAKE_LFLAGS += /NODEFAULTLIB:libc /NODEFAULTLIB:MSVCRTD
		}
		QMAKE_CXXFLAGS_DEBUG = -wd4996 -wd4250 -wd4251 -wd4275 -GR -EHsc -MDd  -Od -ZI -Gm /MP # -O1 -Og -Ob2 -GA -Ot -MDd # -G7
		QMAKE_CXXFLAGS_RELEASE = -wd4996 -wd4250 -wd4251 -wd4275 -GR -EHsc -Ox -Og -Ob2 -GA -Ot -MD /MP # -G7
	}

	# Config for Visual C++ 9
	win32-msvc2008{
		CONFIGPROJECT=console vc7 thread
		contains (CONFIGDEBUG, debug) {
			LIBSDIRECTORY=win32/DebugVC9
			QMAKE_LFLAGS += /NODEFAULTLIB:libcd /NODEFAULTLIB:MSVCRT	
		}
		contains (CONFIGDEBUG, release) {
			LIBSDIRECTORY=win32/ReleaseVC9
			QMAKE_LFLAGS += /NODEFAULTLIB:libc /NODEFAULTLIB:MSVCRTD
		}
		QMAKE_CXXFLAGS_DEBUG = -wd4996 -wd4250 -wd4251 -wd4275 -GR -EHsc -MDd  -Od -ZI -Gm # -O1 -Og -Ob2 -GA -Ot -MDd /MP # -G7 
		QMAKE_CXXFLAGS_RELEASE = -wd4996 -wd4250 -wd4251 -wd4275 -GR -EHsc -Ox -Og -Ob2 -GA -Ot -MD /MP # -G7
	}


	
	# Config for MinGW
	win32-g++{
		CONFIGPROJECT=console thread
		LIBSDIRECTORY=win32/gcc
	}

	INCLUDEPATH *= $$SOFA_DIR/include/win32
}
unix {
	macx {
		QMAKE_MACOSX_DEPLOYMENT_TARGET=10.5
		QMAKE_LFLAGS += -L/System/Library/Frameworks/
		
		LIBSDIRECTORY=macx

#		CONFIGLIBRARIES=staticlib 
		CONFIGLIBRARIES=dynamiclib
		QMAKE_LFLAGS_SONAME = -install_name$${LITERAL_WHITESPACE}@rpath/
		QMAKE_LFLAGS += -Wl,-rpath,@loader_path
		QMAKE_LFLAGS += -Wl,-rpath,@executable_path/../lib/macx
		QMAKE_LFLAGS += -Wl,-rpath,@executable_path/../../../../lib/macx

		contains (CONFIGDEBUG, debug) {
			LIBSUFFIX = d
		}

		BUNDLE_RESOURCES_SHADERS.path = Contents/Resources/shaders
#		BUNDLE_RESOURCES_SHADERS.files = $$SOFA_DIR/share/shaders/*
		BUNDLE_RESOURCES_SHADERS.files = $$system(ls share/shaders)
		BUNDLE_RESOURCES_SHADERS.files = $$join(BUNDLE_RESOURCES_SHADERS.files,' $$SOFA_DIR/share/shaders/','$$SOFA_DIR/share/shaders/','')
		APP_BUNDLE_DATA += BUNDLE_RESOURCES_SHADERS
		BUNDLE_RESOURCES_TEXTURES.path = Contents/Resources/textures
#		BUNDLE_RESOURCES_TEXTURES.files = $$SOFA_DIR/share/textures/*
		BUNDLE_RESOURCES_TEXTURES.files = share/textures/SOFA_logo.bmp $$system(ls share/textures/media*)
		BUNDLE_RESOURCES_TEXTURES.files = $$join(BUNDLE_RESOURCES_TEXTURES.files,' $$SOFA_DIR/','$$SOFA_DIR/','')
		APP_BUNDLE_DATA += BUNDLE_RESOURCES_TEXTURES
	}
 	
	!macx {
		LIBSDIRECTORY=linux

		# Use shared library unless we are profiling the code
		contains (CONFIGDEBUG, profile) {
			CONFIGLIBRARIES=staticlib
		}
		else {
			CONFIGLIBRARIES=dynamiclib
		}

		contains (CONFIGDEBUG, debug) {
			LIBSUFFIX = d
		}

		# Check that all symbols are resolved when building shared libraries
		#QMAKE_LFLAGS *= -Wl,--no-allow-shlib-undefined
		QMAKE_LFLAGS *= -Wl,-z,defs
	}
}



!contains (CONFIGDEBUG, debug) {
	DEFINES += NDEBUG
}

contains (CONFIGDEBUG, debug) {
	SUFFIX = d
}

contains (QMAKE_CXXFLAGS, -pg) {
	SUFFIX = $${SUFFIX}p
	LIBSUFFIX = $${LIBSUFFIX}
}

OBJECTS_DIR = OBJ/$$join(CONFIGDEBUG,,,)

CONFIGLIBRARIES+= \
                  warn_on \
                  stl \
                  rtti \
                  thread

CONFIGPROJECT += warn_on
CONFIGPROJECTGUI = $$CONFIGPROJECT
CONFIGPROJECTCMD = $$CONFIGPROJECT
CONFIGPROJECTCMD += console

INCLUDEPATH *= \
               $$SOFA_DIR/include \
               $$SOFA_DIR/framework \
               $$SOFA_DIR/modules \
               $$SOFA_DIR/applications

DEPENDPATH  *= \
               $$SOFA_DIR/framework \
               $$SOFA_DIR/modules \
               $$SOFA_DIR/applications

QMAKE_LIBDIR = $$SOFA_DIR/lib/$$LIBSDIRECTORY 

!macx: QMAKE_LIBDIR += $$SOFA_DIR/lib/$$LIBSDIRECTORY/../Common

win32-gcc: QMAKE_LIBDIR += $$SOFA_DIR/bin

# List of libs to link with

contains(DEFINES,SOFA_DEV){ # BEGIN SOFA_DEV
#SOFA_EXT_LIBS *= -lSLC$$LIBSUFFIX
} # END SOFA_DEV


win32 {
	SOFA_EXT_LIBS *= -lglut32 -lcomctl32 -lopengl32 -lglu32 -lAdvAPI32 -lUser32 -lShell32 -lGdi32 -lWSock32 -lWS2_32 -lOle32
}

unix {
	macx : SOFA_EXT_LIBS += -lpthread -framework OpenGL -framework GLUT
	!macx : SOFA_EXT_LIBS *= -L/usr/X11R6/lib -lglut -lGL -lGLU -lpthread -lX11
}

########################################################################
#  BOOST
########################################################################
contains(DEFINES,SOFA_HAVE_BOOST){
  SOFA_EXT_LIBS *= -lboost_thread
}else{
  # use miniBoost headers included in extlibs
  INCLUDEPATH *= $$SOFA_DIR/extlibs/miniBoost
}

########################################################################
#  CSPARSE
########################################################################
contains(DEFINES,SOFA_HAVE_CSPARSE){
  SOFA_EXT_LIBS *= -lcsparse$$LIBSUFFIX
  # use csparse headers included in extlibs
  INCLUDEPATH *= $$SOFA_DIR/extlibs/csparse
}

########################################################################
#  TinyXML (default parser)
########################################################################

!contains(DEFINES,SOFA_XML_PARSER_LIBXML){
  DEFINES *= SOFA_XML_PARSER_TINYXML
}

contains(DEFINES,SOFA_XML_PARSER_TINYXML){
#  DEFINES *= TIXML_USE_STL
  SOFA_EXT_LIBS += -ltinyxml$$LIBSUFFIX
  INCLUDEPATH *= $$SOFA_DIR/extlibs/tinyxml
}

########################################################################
#  LibXML
########################################################################

# If PML is active, we need to include libxml even if it is not the active parser in SOFA
!contains(DEFINES,SOFA_PML):!contains(DEFINES,SOFA_XML_PARSER_LIBXML){
}
else{
  win32 {
    SOFA_EXT_LIBS *= -llibxml2 
  }
  unix {
    # Use xml2-config if available to get options for libxml2
    QMAKE_CXXFLAGS *= $$system(xml2-config --cflags 2>/dev/null || echo '-I/usr/include/libxml2')
    SOFA_EXT_LIBS *=  $$system(xml2-config --libs 2>/dev/null || echo '-lxml2 -lz')
    # TODO: in which case the following is still necessary ?
    INCLUDEPATH *= /usr/include/libxml2
  }
}

########################################################################
#  LAPACK
########################################################################
#You need to install Lapackpp: http://sourceforge.net/projects/lapackpp/
contains(DEFINES,SOFA_HAVE_LAPACK){
  win32 {
	INCLUDEPATH *= $$SOFA_DIR/include/lapackpp-2.5.2
 	SOFA_EXT_LIBS *= -llibblas32 -lliblapack32 -llapackpp 
  }else{
	INCLUDEPATH *= /usr/local/include/lapackpp
        QMAKE_LIBDIR += /usr/local/lib
 	SOFA_EXT_LIBS *= -llapackpp -llapack -lblas 
  } 
}

########################################################################
#  LibPNG
########################################################################
contains(DEFINES,SOFA_HAVE_PNG){
	win32 {
		SOFA_EXT_LIBS *= -llibpng -lzlib
	}
	unix {
		macx : SOFA_EXT_LIBS *= -lpng -lz 
		!macx : SOFA_EXT_LIBS *= -lpng -lz 
	}
}

########################################################################
#  NewMAT
########################################################################

INCLUDEPATH *= $$SOFA_DIR/extlibs/newmat
SOFA_EXT_LIBS *=  -lnewmat$$LIBSUFFIX

########################################################################
#  METIS
########################################################################

contains(DEFINES,SOFA_HAVE_METIS){
	SOFA_EXT_LIBS *= -lmetis
}

contains (DEFINES, SOFA_DEV) { # BEGIN SOFA_DEV
contains(DEFINES,SOFA_EXTLIBS_METIS){
	DEFINES *= SOFA_HAVE_METIS
	SOFA_EXT_LIBS -= -lmetis
	SOFA_EXT_LIBS *= -lmetis$$LIBSUFFIX
	INCLUDEPATH *= $$SOFA_DIR/extlibs/metis/Lib
}
} # END SOFA_DEV

########################################################################
#  TAUCS
########################################################################

contains(DEFINES,SOFA_HAVE_TAUCS){
	SOFA_EXT_LIBS *= -ltaucs
}

contains (DEFINES, SOFA_DEV) { # BEGIN SOFA_DEV
contains(DEFINES,SOFA_EXTLIBS_TAUCS){
	DEFINES *= SOFA_HAVE_TAUCS
	SOFA_EXT_LIBS -= -ltaucs
	SOFA_EXT_LIBS *= -ltaucs$$LIBSUFFIX
	INCLUDEPATH *= $$SOFA_DIR/extlibs/taucs/src
	INCLUDEPATH *= $$SOFA_DIR/extlibs/taucs/external/COLAMD/Include
	win32 {
		INCLUDEPATH *= $$SOFA_DIR/extlibs/taucs/build/win32
	}
	unix {
		macx: INCLUDEPATH *= $$SOFA_DIR/extlibs/taucs/build/macx
		!macx: INCLUDEPATH *= $$SOFA_DIR/extlibs/taucs/build/linux
	}
}
} # END SOFA_DEV

########################################################################
#  GLEW
########################################################################
contains(DEFINES,SOFA_HAVE_GLEW){
	win32 {
		SOFA_EXT_LIBS *= -lglew32
	}
	unix {
		macx : SOFA_EXT_LIBS *= -lGLEW
		!macx : SOFA_EXT_LIBS *= -lGLEW
	}
}

########################################################################
# GLUT
########################################################################
contains (DEFINES, SOFA_GUI_GLUT) {
	SOFA_GUI_LIBS *= -lsofaguiglut$$LIBSUFFIX
}

contains (DEFINES, SOFA_DEV) { # BEGIN SOFA_DEV
########################################################################
# FLTK
########################################################################
contains (DEFINES, SOFA_GUI_FLTK) {
	SOFA_GUI_LIBS *= -lsofaguifltk$$LIBSUFFIX
	win32 {
		SOFA_EXT_LIBS *= -lfltk -lfltkgl
	}
	unix {
		SOFA_EXT_LIBS *= -lfltk_gl -lfltk
	}
}
} # END SOFA_DEV

########################################################################
# QT
########################################################################
contains (DEFINES, SOFA_GUI_QTVIEWER) {
	SOFA_GUI_LIBS *= -lsofaguiqt$$LIBSUFFIX
	macx: SOFA_GUI_EXT_LIBS += -framework QtCore -framework QtXml -framework QtSql -framework QtNetwork
	CONFIGPROJECTGUI += qt
	contains (DEFINES, SOFA_QT4) {	
	  QT += opengl qt3support
	}
	else {	
	  QT += opengl	
	}
	INCLUDEPATH += $$SOFA_DIR/extlibs/qwt
	SOFA_GUI_EXT_LIBS *= -lqwt$${LIBSUFFIX}
}

########################################################################
# QGLVIEWER
########################################################################
contains (DEFINES, SOFA_GUI_QGLVIEWER) {
	SOFA_GUI_LIBS *= -lsofaguiqt$$LIBSUFFIX
	macx: {
		SOFA_GUI_LIBS += -framework QtXml -framework QtSql -framework QtNetwork
#		INCLUDEPATH += /Library/Frameworks/QtXml.framework/Versions/4/Headers 
	}
	CONFIGPROJECTGUI += qt
	
	contains (DEFINES, SOFA_QT4) {	
	  QT += opengl qt3support
	}
	else {
	  QT += opengl	
	}
	unix:SOFA_GUI_EXT_LIBS *= -lQGLViewer$${LIBSUFFIX}
	win32:SOFA_GUI_EXT_LIBS *= -lQGLViewer2$${LIBSUFFIX}
	INCLUDEPATH += $$SOFA_DIR/extlibs/qwt $$SOFA_DIR/extlibs/libQGLViewer
	SOFA_GUI_EXT_LIBS *= -lqwt$${LIBSUFFIX}
}

########################################################################
# QTOGREVIEWER
########################################################################
contains (DEFINES, SOFA_GUI_QTOGREVIEWER) {
	SOFA_GUI_LIBS *= -lsofaguiqt$$LIBSUFFIX
	macx: {
		SOFA_GUI_EXT_LIBS += -framework Ogre -framework CoreFoundation
		INCLUDEPATH += /Library/Frameworks/Ogre.framework/Headers/
	}

	CONFIGPROJECTGUI += qt

	contains (DEFINES, SOFA_QT4) {
	  QT += opengl qt3support
	}
	else {
	  QT += opengl
	}

	win32 {
		INCLUDEPATH += $(OGRE_HOME)/include
		QMAKE_LIBDIR += $(OGRE_HOME)/lib
		LIBS += OgreMain.lib  
	}
	INCLUDEPATH += $$SOFA_DIR/extlibs/qwt
	SOFA_GUI_EXT_LIBS *= -lqwt$${LIBSUFFIX}

	unix {
		macx:  QMAKE_CXXFLAGS += -Wno-unused
		
		!macx: {
                  	 QMAKE_CXXFLAGS += $$system(pkg-config --cflags OGRE )
		  LIBS += $$system(pkg-config --libs OGRE )
                }
	}        
}

########################################################################
# PML
########################################################################
contains(DEFINES,SOFA_PML){
	INCLUDEPATH += $$SOFA_DIR/extlibs/PML
	INCLUDEPATH += $$SOFA_DIR/extlibs/PML/PhysicalProperties
	INCLUDEPATH += $$SOFA_DIR/extlibs/LML
	SOFA_EXT_LIBS *= -lphysicalmodel$$LIBSUFFIX -lload$$LIBSUFFIX
	SOFA_MODULES_LIBS *= -lsofapml$$LIBSUFFIX
}

########################################################################
# CUDA
########################################################################
contains (DEFINES, SOFA_GPU_CUDA) {
	SOFA_MODULES_LIBS *= -lsofagpucuda$$LIBSUFFIX
	SOFA_EXT_LIBS *= -lcudart
	cuda.input = CUDA_SOURCES
	QMAKE_EXTRA_UNIX_COMPILERS *= cuda
	win32 {
		INCLUDEPATH += $(CUDA_INC_PATH)
		QMAKE_LIBDIR += $(CUDA_LIB_PATH)
		SOFA_EXT_LIBS *= -lcudart
		contains(CUDA_FLAGS,--device-emulation) {
			cuda.output = $${OBJECTS_DIR}/${QMAKE_FILE_BASE}_cudaemu.obj
			cuda.clean = $${OBJECTS_DIR}/${QMAKE_FILE_BASE}_cudaemu.obj
		}
		else {
			cuda.output = $${OBJECTS_DIR}/${QMAKE_FILE_BASE}_cuda.obj
			cuda.clean = $${OBJECTS_DIR}/${QMAKE_FILE_BASE}_cuda.obj
		}
		cuda.commands = $$(CUDA_BIN_PATH)/nvcc.exe -c $$CUDA_FLAGS -Xcompiler -nologo $${join(INCLUDEPATH,'" -I "','-I "','"')} $${join(DEFINES," -D","-D",)} ${QMAKE_FILE_NAME} -o ${QMAKE_FILE_OUT}
		cuda.dependency_type = TYPE_C
	}
	unix {
		# auto-detect CUDA path
		CUDA_DIR = $${system(which nvcc | sed 's,/bin/nvcc$,,')}
		INCLUDEPATH += $${CUDA_DIR}/include
		QMAKE_LIBDIR += $${CUDA_DIR}/lib
		SOFA_EXT_LIBS *= -lcudart
		macx: QMAKE_LFLAGS += -Wl,-rpath,$${CUDA_DIR}/lib
		contains(CUDA_FLAGS,--device-emulation) {
			cuda.output = ${OBJECTS_DIR}${QMAKE_FILE_BASE}_cudaemu.obj
			cuda.clean = ${OBJECTS_DIR}${QMAKE_FILE_BASE}_cudaemu.obj
		}
		else {
			cuda.output = ${OBJECTS_DIR}${QMAKE_FILE_BASE}_cuda.obj
			cuda.clean = ${OBJECTS_DIR}${QMAKE_FILE_BASE}_cuda.obj
		}
		cuda.commands = nvcc -c $$CUDA_FLAGS -Xcompiler -fPIC,$${join(QMAKE_CXXFLAGS_RELEASE,",")}  $${join(DEFINES," -D","-D")} $(INCPATH) ${QMAKE_FILE_NAME} -o ${QMAKE_FILE_OUT}
		cuda.dependency_type = TYPE_C
		macx: cuda.commands += --host-compilation 'C'
	}
}


########################################################################
#  FLOWVR
########################################################################
contains(DEFINES,SOFA_HAVE_FLOWVR){
	FLOWVR = $(FLOWVR_PREFIX)
	QMAKE_CXXFLAGS += `pkg-config --cflags flowvr-mod flowvr-ftl flowvr-render`
	QMAKE_LDFLAGS += `pkg-config --libs flowvr-mod flowvr-ftl flowvr-render`
	QMAKE_LFLAGS_DEBUG+= `pkg-config --libs flowvr-mod flowvr-ftl flowvr-render`
	QMAKE_LFLAGS_RELEASE+= `pkg-config --libs flowvr-mod flowvr-ftl flowvr-render`
}
else {
	SOFA_EXT_LIBS += -lminiFlowVR$$LIBSUFFIX
	INCLUDEPATH *= $$SOFA_DIR/extlibs/miniFlowVR/include
	DEFINES *= MINI_FLOWVR
}

########################################################################
#  MKL
########################################################################
contains(DEFINES,SOFA_HAVE_MKL){
	INCLUDEPATH += $$SOFA_DIR/extlibs/MKL
	INCLUDEPATH += "$$MKL_PATH/include"
	QMAKE_LIBDIR += "$$MKL_PATH/ia32/lib"
	SOFA_EXT_LIBS *= -lmkl_c -lmkl_lapack -llibguide40
}

########################################################################
#  SENSABLE PHANTOM
########################################################################
contains(DEFINES,SOFA_HAVE_SENSABLE){
win32{
#  3DTOUCH_BASE = C:\Program Files\SensAble\3DTouch
  INCLUDEPATH += $(3DTOUCH_BASE)/include
  INCLUDEPATH += $(3DTOUCH_BASE)/utilities/include
  SOFA_EXT_LIBS += -lhd -lhdu -lhl
  QMAKE_LIBDIR += $(3DTOUCH_BASE)/lib/win32/
  contains (CONFIGDEBUG, debug) {
    QMAKE_LIBDIR += $(3DTOUCH_BASE)/utilities/lib/Win32/Debug/
  }
  else {
    QMAKE_LIBDIR += $(3DTOUCH_BASE)/utilities/lib/Win32/Release/
  }
}
unix{
  SOFA_EXT_LIBS += -lHL -lHD -lHLU -lHDU -lPHANToMIO
}
}

########################################################################
#  COLLADA DOM
########################################################################
contains(DEFINES,SOFA_HAVE_COLLADADOM){
	SOFA_EXT_LIBS *= -lcolladadom$$LIBSUFFIX
	#DEFINES *= DOM_INCLUDE_LIBXML DOM_DYNAMIC
	DEFINES *= DOM_DYNAMIC
	INCLUDEPATH *= $$SOFA_DIR/extlibs/colladadom/dom/include
	INCLUDEPATH *= $$SOFA_DIR/extlibs/colladadom/dom/include/1.4
	#INCLUDEPATH *= $$SOFA_DIR/extlibs/colladadom/dom/external-libs/pcre
}




########################################################################
#  OGRE 3D
########################################################################

contains( DEFINES, SOFA_GUI_QTOGREVIEWER){
	win32 {
		INCLUDEPATH += $(OGRE_HOME)/include
		QMAKE_LIBDIR += $(OGRE_HOME)/lib
		LIBS += OgreMain.lib
	}

	unix {
		macx:  QMAKE_CXXFLAGS += -Wno-unused
		
		!macx: {
                  	 QMAKE_CXXFLAGS += $$system(pkg-config --cflags OGRE )
		  LIBS += $$system(pkg-config --libs OGRE )
		  #CONFIG += link_pkgconfig
		  #PKGCONFIG += OGRE
		  #PKGCONFIG += CEGUI
		  #PKGCONFIG += OIS
                }
	}
      
}

contains(DEFINES,SOFA_DEV){ # BEGIN SOFA_DEV
########################################################################
# indexedmap
########################################################################
contains(DEFINES,SOFA_HAVE_INDEXEDMAP){
	INCLUDEPATH += $$SOFA_DIR/extlibs/indexedmap/includes
}
} # END SOFA_DEV

########################################################################

SOFA_FRAMEWORK_LIBS *= -lsofahelper$$LIBSUFFIX -lsofadefaulttype$$LIBSUFFIX -lsofacore$$LIBSUFFIX

SOFA_COMPONENTS_LIBS = -lsofacomponentmastersolver$$LIBSUFFIX
SOFA_COMPONENTS_LIBS += -lsofacomponentfem$$LIBSUFFIX
SOFA_COMPONENTS_LIBS += -lsofacomponentinteractionforcefield$$LIBSUFFIX
SOFA_COMPONENTS_LIBS += -lsofacomponentcontextobject$$LIBSUFFIX
SOFA_COMPONENTS_LIBS += -lsofacomponentbehaviormodel$$LIBSUFFIX
SOFA_COMPONENTS_LIBS += -lsofacomponentengine$$LIBSUFFIX
SOFA_COMPONENTS_LIBS += -lsofacomponentlinearsolver$$LIBSUFFIX
SOFA_COMPONENTS_LIBS += -lsofacomponentodesolver$$LIBSUFFIX
SOFA_COMPONENTS_LIBS += -lsofacomponentbase$$LIBSUFFIX
SOFA_COMPONENTS_LIBS += -lsofacomponentcontroller$$LIBSUFFIX
SOFA_COMPONENTS_LIBS += -lsofacomponentvisualmodel$$LIBSUFFIX
SOFA_COMPONENTS_LIBS += -lsofacomponentmass$$LIBSUFFIX
SOFA_COMPONENTS_LIBS += -lsofacomponentforcefield$$LIBSUFFIX
SOFA_COMPONENTS_LIBS += -lsofacomponentmapping$$LIBSUFFIX
SOFA_COMPONENTS_LIBS += -lsofacomponentconstraint$$LIBSUFFIX
SOFA_COMPONENTS_LIBS += -lsofacomponentcollision$$LIBSUFFIX
SOFA_COMPONENTS_LIBS += -lsofacomponentmisc$$LIBSUFFIX

#SOFA_MODULES_LIBS *= $$SOFA_COMPONENTS_LIBS  -lsofasimulation$$LIBSUFFIX -lsofatree$$LIBSUFFIX
SOFA_MODULES_LIBS *= $$SOFA_COMPONENTS_LIBS -lsofacomponent$$LIBSUFFIX -lsofasimulation$$LIBSUFFIX -lsofatree$$LIBSUFFIX

contains (DEFINES, SOFA_DEV) { # BEGIN SOFA_DEV
SOFA_MODULES_LIBS *= -lsofaautomatescheduler$$LIBSUFFIX
} # END SOFA_DEV

SOFA_GUI_LIBS *= -lsofagui$$LIBSUFFIX -lsofaguimain$$LIBSUFFIX

# When using staticlib, rebuild applications if a library has changed
contains(CONFIGLIBRARIES,staticlib){
contains(TEMPLATE,app){
	SLIBS = $$SOFA_FRAMEWORK_LIBS $$SOFA_MODULES_LIBS $$SOFA_GUI_LIBS
	win32 {
		win32-g++ {
			SLIBS ~= s|-l(.*)|$${SOFA_DIR}/lib/$${LIBSDIRECTORY}/lib\1.a|g
		} else {
			SLIBS ~= s|-l(.*)|$${SOFA_DIR}/lib/$${LIBSDIRECTORY}/\1.lib|g
		}
	}
	unix {
		SLIBS ~= s|-l(.*)|$${SOFA_DIR}/lib/$${LIBSDIRECTORY}/lib\1.a|g
	}
	POST_TARGETDEPS += $$SLIBS
}
}

SOFA_LIBS = $${SOFA_MODULES_LIBS} $${SOFA_MODULES_LIBS} $${SOFA_FRAMEWORK_LIBS} $${SOFA_FRAMEWORK_LIBS} $${SOFA_EXT_LIBS}

SOFA_GUI_LIBS += $${SOFA_GUI_EXT_LIBS}

# default destination 
DESTDIR = $${SOFA_DIR}/lib/$${LIBSDIRECTORY}
