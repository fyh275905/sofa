########################################################################
# SOFA Compilation Configuration
########################################################################

# Uncomment to activate internal in-development codes put inside SOFA_DEV blocks
DEFINES += SOFA_DEV


########################################################################
# Type used in SOFA: if none specified, both will be available
########################################################################

# Uncomment if you want to compile Sofa using only float
# DEFINES += SOFA_FLOAT

# Uncomment if you want to compile Sofa using only double
# DEFINES += SOFA_DOUBLE


########################################################################
# Viewers
########################################################################

# Uncomment if you want to compile Qt interface
DEFINES += SOFA_GUI_QTVIEWER

# Uncomment if you want to compile QTOgreViewer interface
# DEFINES += SOFA_GUI_QTOGREVIEWER
# Specify where the headers of Ogre are located
# OGRE_INCLUDE_PATH = /usr/include/OGRE

# Uncomment if you want to compile QGLViewer interface
# DEFINES += SOFA_GUI_QGLVIEWER

# Uncomment if you want to compile GLUT interface
DEFINES += SOFA_GUI_GLUT

contains(DEFINES,SOFA_DEV){ # BEGIN SOFA_DEV

# Uncomment if you want to compile FLTK interface
# DEFINES += SOFA_GUI_FLTK
} # END SOFA_DEV


########################################################################
# Options
########################################################################

# Uncomment if you want to use 'old-way' scene graph (visual & mechanic in the same graph)
# DEFINES += SOFA_CLASSIC_SCENE_GRAPH

# Uncomment if you want to hide the recorder from the Qt GUI to save space
# DEFINES += SOFA_GUI_QT_NO_RECORDER

# Uncomment if you want to hide the data help text from the Qt GUI to save space
# DEFINES += SOFA_GUI_QT_NO_DATA_HELP

# Uncomment if you want to use RTDSC processor cycle-counter for timing
# Note: this is the fastest and most precise method but have issues on
# multi-CPUs or with varying CPU frequencies
# DEFINES += SOFA_RDTSC

# Uncomment if you want to support moving frames when computing inertia forces in Mass
# DEFINES += SOFA_SUPPORT_MOVING_FRAMES

# Uncomment if you want to use Collada support
# DEFINES += SOFA_HAVE_COLLADADOM

!contains(DEFINES, SOFA_XML_PARSER_LIBXML){
# Uncomment if you want to have the possibility to trave the visitor execution
DEFINES += SOFA_DUMP_VISITOR_INFO
}

# Uncomment if you want to use csparse
# DEFINES += SOFA_HAVE_CSPARSE

# Uncomment if you want to disable vector access failure assertions (WIN32 Debug optimization)
# DEFINES += SOFA_NO_VECTOR_ACCESS_FAILURE

contains(DEFINES,SOFA_DEV){ # BEGIN SOFA_DEV

# Uncomment if you want to use indexedmap
# DEFINES += SOFA_HAVE_INDEXEDMAP
} # END SOFA_DEV

########################################################################
# External Libraries
########################################################################

# Uncomment if you want to use ZLIB to handle compressed files
DEFINES += SOFA_HAVE_ZLIB

# Uncomment if you want to use libPNG to read/write PNG images
DEFINES += SOFA_HAVE_PNG

# Uncomment if you want to use GLEW to handle OpenGL extensions
DEFINES += SOFA_HAVE_GLEW

# Uncomment if you want to use FlowVR / FlowVR Render for distributed computing
# DEFINES += SOFA_HAVE_FLOWVR

# Uncomment if you want to use Boost lib for multithread computing
# DEFINES += SOFA_HAVE_BOOST

# Uncomment if you want to use EIGEN2 for Matrix Solvers
# DEFINES += SOFA_HAVE_EIGEN2

# Uncomment if you want to use MKL for Matrix Solvers
# DEFINES += SOFA_HAVE_MKL
# MKL_PATH = "C:\Progra~1\Intel\MKL\9.1.027"
# Uncomment if you want to use the Parallel version of Sofa (require KAAPI http://kaapi.gforge.inria.fr/)
# DEFINES += SOFA_SMP
# Enables linking with kaapi without activating SOFA_SMP code
# DEFINES += SOFA_HAVE_KAAPI

# Uncomment if you want to use LibXML instead of built-in TinyXML
# DEFINES += SOFA_XML_PARSER_LIBXML

contains(DEFINES,SOFA_XML_PARSER_LIBXML){
# Uncomment if you want to use SofaPML to load PML and LML files
# DEFINES += SOFA_PML
}

# Uncomment if you want to use METIS
# Note that it is not bundled with SOFA and must be installed first
# DEFINES += SOFA_HAVE_METIS

contains(DEFINES,SOFA_DEV){ # BEGIN SOFA_DEV

# Uncomment if you want to use the METIS version provided in extlibs
# DEFINES += SOFA_EXTLIBS_METIS
} # END SOFA_DEV

# Uncomment if you want to use TAUCS (C library of sparse linear solvers)
# Note that it is not bundled with SOFA and must be installed first
# DEFINES += SOFA_HAVE_TAUCS

contains(DEFINES,SOFA_DEV){ # BEGIN SOFA_DEV

# Uncomment if you want to use the TAUCS version provided in extlibs
# Note that you need to activate METIS in order to use TAUCS
# DEFINES += SOFA_EXTLIBS_TAUCS
} # END SOFA_DEV

# uncomment if you wan to use TAUCS with CILK
# CILK is not include in sofa, and you need to install it see : http://supertech.lcs.mit.edu/cilk/
# DEFINES += SOFA_HAVE_CILK

# Uncomment if you want to use PARDISO (Parallel Sparse Direct Solver Project) http://www.pardiso-project.org/
# Note that it is not bundled with SOFA and must be installed first
# DEFINES += SOFA_HAVE_PARDISO
# Specify the name of the library to use and its path if necessary
# SOFA_EXT_LIBS *= -lpardiso400_GNU432_IA32
# SOFA_EXT_LIBS *= -lpardiso400_GNU430_IA64
# SOFA_EXT_LIBS *= -lpardiso400_GNU430_AMD_IA64
# For the multithreaded version you also need to activate OpenMP
# QMAKE_LFLAGS *= -fopenmp
# QMAKE_CXXFLAGS_RELEASE *= -fopenmp

# Uncomment if you want to use fishpack support
# DEFINES += SOFA_HAVE_FISHPACK
# FISHPACK_FLAGS = intel

# If you want to use BLAS/LAPACK (required by TAUCS), uncomment the correct libraries and macros depending on your system
# SOFA_EXT_LIBS *= -lblas -llapack -lf2c
# SOFA_EXT_LIBS *= -llibgoto2 -llapack -llibf2c
# DEFINES *= TAUCS_BLAS_UNDERSCORE
# DEFINES *= TAUCS_BLAS_NOUNDERSCORE

# Uncomment if you want to use muparser support
# DEFINES += MUPARSER

# Uncomment if you want to use cgal (not included, see wiki)
# DEFINES += SOFA_HAVE_CGAL

# Uncomment if you want to use opencv (not included)
# DEFINES += SOFA_HAVE_OPENCV
# SOFA_OPENCV_PATH = /usr

# Uncomment if you want to use FFMPEG
# Note that it is not bundled with SOFA and must be installed first
# DEFINES += SOFA_HAVE_FFMPEG

# Uncomment if you want to use FFMPEG version included in extlibs
# DEFINES += SOFA_EXTLIBS_FFMPEG

# Uncomment if you want to have continuous collision detection support
# DEFINES += SOFA_HAVE_DCCD

########################################################################
# GPU
########################################################################

# Uncomment if you want to compile CUDA GPU prototype (require NVIDIA CUDA SDK)
# DEFINES += SOFA_GPU_CUDA
# (sm_10 for G80, sm_11 for G92, sm_13 for GT200)
# CUDA_FLAGS += --ptxas-options=-v -arch sm_10
# this is necessary for gcc 4.4+
# CUDA_FLAGS += --compiler-options -fno-inline

# Uncomment if you want tu use gcc4.3 to compile cuda files (use if you have weak error)
# CUDA_FLAGS = --compiler-bindir=/usr/bin/gcc-4.3

# Uncomment if you want to activate double-precision support in CUDA (requires GT200+ GPU and -arch sm_13 flag)
# DEFINES += SOFA_GPU_CUDA_DOUBLE

# Uncomment if you want to activate cublas support in CUDA (requires SOFA_GPU_CUDA_DOUBLE)
# DEFINES += SOFA_GPU_CUBLAS

# Uncomment if you want to activate cudpp
# DEFINES += SOFA_GPU_CUDPP

# Uncomment if you want to compile OPENCL GPU prototype (require NVIDIA OPENCL SDK)
# DEFINES += SOFA_GPU_OPENCL

# Specify where the headers of opencl are located
# SOFA_GPU_OPENCL_DIR =  /usr/local/cuda

########################################################################
# Haptics
########################################################################

# Uncomment if you want to use Sensable Phantom
# DEFINES += SOFA_HAVE_SENSABLE

# Uncomment if you want to use Sensable Phantom with CHAI3D
# DEFINES += SOFA_HAVE_CHAI3D

# Uncomment if you want to use Xitact IHP and ITP tools
# DEFINES += SOFA_HAVE_XITACT

contains(DEFINES,SOFA_DEV){ # BEGIN SOFA_DEV

# Uncomment if you want to use ViSTA Device Drivers
# DEFINES += SOFA_HAVE_VDD

} # END SOFA_DEV

# Uncomment if you want to use ARTrack Device Drivers
# DEFINES += SOFA_HAVE_ARTRACK


# Uncomment if you want to have VRPN support
# DEFINES += SOFA_HAVE_VRPN

#Uncomment if you want to have Wiimote support in VRPN
#DEFINES += VRPN_USE_WIIUSE

########################################################################
# Plugins
########################################################################

contains(DEFINES,SOFA_DEV){ # BEGIN SOFA_DEV

# Uncomment if you want to use the plugin VulcainInSofa. 
# Note that it is not bundled with SOFA and must be installed in
# Sofa/applications/plugins.
# DEFINES += SOFA_HAVE_VULCAIN

# Uncomment if you want to use the plugin TriangularMeshRefiner. 
# DEFINES += SOFA_HAVE_TRIANGULARMESHREFINER

# Uncomment if you want to use the plugin BeamAdapter. 
# DEFINES += SOFA_HAVE_BEAMADAPTER

# Uncomment if you want to use the plugin TriangularMeshBasedHexasCutter.
# Note that you must define SOFA_GPU_CUDA to use this plugin.
# DEFINES += SOFA_HAVE_TRIANGULARMESHBASEDHEXASCUTTER

# Uncomment if you want to use the plugin VoxelLoaderByRasterization.
# Note that you must define SOFA_GPU_CUDA to use this plugin.
# DEFINES += SOFA_HAVE_VOXEL_LOADER_BY_RASTERIZATION

# Uncomment if you want to use the plugin Physical Field Modeling 
# (reaction-diffusion propagation). 
# DEFINES += SOFA_HAVE_PHYSICALFIELDMODELING

} # END SOFA_DEV

########################################################################
# Compiler options
########################################################################
win32{
# CONFIG = debug_and_release
}
unix{
# Uncomment if you want to compile the debug or release version
#CONFIG = debug
CONFIG = release

# Uncomment if you want debug symbols even in release build
# QMAKE_CXXFLAGS += -g

# Uncomment if you want to be able to profile the code using gprof
# QMAKE_CXXFLAGS *= -pg
# QMAKE_LDFLAGS *= -pg
# QMAKE_LFLAGS_DEBUG *= -pg
# QMAKE_LFLAGS_RELEASE *= -pg

# Using GCC >= 4.3, the best know optimization flags to compile SOFA are :
# QMAKE_CFLAGS_RELEASE   -= -O2 -march=i586 -mtune=generic -Wp,-D_FORTIFY_SOURCE=2 -fstack-protector --param=ssp-buffer-size=4
# QMAKE_CXXFLAGS_RELEASE -= -O2 -march=i586 -mtune=generic -Wp,-D_FORTIFY_SOURCE=2 -fstack-protector --param=ssp-buffer-size=4
# QMAKE_CFLAGS_RELEASE   *= -O3 -march=native -mtune=native -fno-math-errno -funroll-loops -mfpmath=387
# QMAKE_CXXFLAGS_RELEASE *= -O3 -march=native -mtune=native -fno-math-errno -funroll-loops -mfpmath=387
# With earlier version, native must be replaced by your specific processor architecture

# Change to use different version of the compiler
QMAKE_CC         = gcc
QMAKE_CXX        = g++
QMAKE_LINK       = g++
QMAKE_LINK_SHLIB = g++

contains(DEFINES,SOFA_DEV){ # BEGIN SOFA_DEV
# Uncomment if you want your compilation to stop at the first error 
# QMAKE_CXXFLAGS += -Wfatal-errors
}

}
