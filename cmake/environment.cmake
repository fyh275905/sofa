
# Path variables
set(SOFA_CMAKE_DIR "${CMAKE_CURRENT_LIST_DIR}" CACHE INTERNAL "Path to the Sofa cmake directory")

set(SOFA_SRC_DIR ${CMAKE_CURRENT_SOURCE_DIR} CACHE INTERNAL "Path to the Sofa source directory")
set(SOFA_BUILD_DIR ${CMAKE_CURRENT_BINARY_DIR} CACHE INTERNAL "Path to the Sofa build directory")
#message(STATUS "CMAKE_CURRENT_LIST_DIR = ${CMAKE_CURRENT_LIST_DIR}")
#message(STATUS "CMAKE_CURRENT_SOURCE_DIR = ${CMAKE_CURRENT_SOURCE_DIR}")
#message(STATUS "CMAKE_CURRENT_BINARY_DIR = ${CMAKE_CURRENT_BINARY_DIR}")
#message(STATUS "SOFA_CMAKE_DIR = ${SOFA_CMAKE_DIR}")
#message(STATUS "SOFA_SRC_DIR = ${SOFA_SRC_DIR}")
#message(STATUS "SOFA_BUILD_DIR = ${SOFA_BUILD_DIR}")

set(SOFA_BIN_DIR "${SOFA_BUILD_DIR}/bin" CACHE INTERNAL "Path to the Sofa bin directory")
if(WIN32)
    set(SOFA_INC_DIR "${SOFA_SRC_DIR}/include" CACHE INTERNAL "Path to the Sofa include directory")
endif()
set(SOFA_LIB_DIR "${SOFA_BUILD_DIR}/lib" CACHE INTERNAL "Path to the Sofa lib directory")
set(SOFA_EXTLIBS_DIR "${SOFA_SRC_DIR}/extlibs" CACHE INTERNAL "Path to the Sofa extlibs directory")
set(SOFA_SHARE_DIR "${SOFA_SRC_DIR}/share" CACHE INTERNAL "Path to the Sofa share directory")
set(SOFA_FRAMEWORK_DIR "${SOFA_SRC_DIR}/framework" CACHE INTERNAL "Path to the Sofa framework directory")
set(SOFA_MODULES_DIR "${SOFA_SRC_DIR}/modules" CACHE INTERNAL "Path to the Sofa modules directory")
set(SOFA_APPLICATIONS_DIR "${SOFA_SRC_DIR}/applications" CACHE INTERNAL "Path to the Sofa applications directory")
set(SOFA_APPLICATIONS_DEV_DIR "${SOFA_SRC_DIR}/applications-dev" CACHE INTERNAL "Path to the Sofa applications-dev directory")
set(SOFA_APPLICATIONS_PLUGINS_DIR "${SOFA_APPLICATIONS_DIR}/plugins" CACHE INTERNAL "Path to the Sofa applications plugins directory")
set(SOFA_APPLICATIONS_DEV_PLUGINS_DIR "${SOFA_APPLICATIONS_DEV_DIR}/plugins" CACHE INTERNAL "Path to the Sofa applications-dev plugins directory")
set(SOFA_APPLICATIONS_PROJECTS_DIR "${SOFA_APPLICATIONS_DIR}/projects" CACHE INTERNAL "Path to the Sofa applications projects directory")
set(SOFA_APPLICATIONS_DEV_PROJECTS_DIR "${SOFA_APPLICATIONS_DEV_DIR}/projects" CACHE INTERNAL "Path to the Sofa applications-dev projects directory")
set(SOFA_TOOLS_DIR "${SOFA_SRC_DIR}/tools" CACHE INTERNAL "Path to the Sofa tools directory")
set(SOFA_CUDA_DIR "${SOFA_APPLICATIONS_DIR}/plugins/SofaCUDA" CACHE INTERNAL "Path to the SofaCuda directory")

# CMake modules path, for our FindXXX.cmake modules
list(APPEND CMAKE_MODULE_PATH ${SOFA_CMAKE_DIR}/Modules)

# Misc
set(SOFA_VERSION_NUM "1_0" CACHE STRING "Version number for this build.")

## OS-specific
if(WIN32)
    if(CMAKE_CL_64)
        set(SOFA_LIB_OS_DIR "${SOFA_SRC_DIR}/lib/win64/" CACHE INTERNAL "Path to the Sofa os-dependent lib directory")
    else()
        set(SOFA_LIB_OS_DIR "${SOFA_SRC_DIR}/lib/win32/" CACHE INTERNAL "Path to the Sofa os-dependent lib directory")
    endif()
endif()
if(XBOX)
    set(SOFA_LIB_OS_DIR "${SOFA_SRC_DIR}/lib/xbox/Common" CACHE INTERNAL "Path to the Sofa os-dependent lib directory")
endif()
if(PS3)
    set(SOFA_LIB_OS_DIR "${SOFA_SRC_DIR}/lib/ps3/Common" CACHE INTERNAL "Path to the Sofa os-dependent lib directory")
endif()

# disable every pre-enabled modules
foreach(dependency ${GLOBAL_DEPENDENCIES})
    unset(GLOBAL_PROJECT_ENABLED_${dependency} CACHE)
endforeach()

# Clear the internal cache variables that we regenerate each time
unset(GLOBAL_DEPENDENCIES CACHE)        # dependency database
unset(GLOBAL_COMPILER_DEFINES CACHE)    #
unset(GLOBAL_INCLUDE_DIRECTORIES CACHE) #

unset(SOFA_FORCE_RECONFIGURE CACHE)
unset(SOFA_ERROR_MESSAGES CACHE)
unset(SOFA_WARNING_MESSAGES CACHE)


function(sofa_forceReconfigure)
    set(SOFA_FORCE_RECONFIGURE 1 CACHE INTERNAL "" FORCE)
endfunction()

function(sofa_logWarning message)
    set(SOFA_WARNING_MESSAGES ${SOFA_WARNING_MESSAGES} "${message}" CACHE INTERNAL "" FORCE)
    message(WARNING "\n${message}\n")
endfunction()

function(sofa_logError message)
    set(SOFA_ERROR_MESSAGES ${SOFA_ERROR_MESSAGES} "${message}" CACHE INTERNAL "" FORCE)
    message(SEND_ERROR "\n${message}\n")
endfunction()

function(sofa_printDetailedProjectsInfo)
    message(STATUS "Detailed projects information:")
    message("")
    set(projectNames ${GLOBAL_DEPENDENCIES})
    foreach(projectName ${projectNames})
        if(TARGET ${projectName})
            set(dependencies ${GLOBAL_PROJECT_DEPENDENCIES_${projectName}})
            set(defines ${GLOBAL_PROJECT_COMPILER_DEFINITIONS_${projectName}})
            message("> ${projectName}")
            if(defines)
                message("  - Compiler definitions: ${defines}")
            else()
                message("  - No compiler definitions")
            endif()
            if (dependencies)
                message("  - Dependencies:")
                foreach(dependency ${dependencies})
                    message("    > ${dependency}")
                endforeach()
            else()
                message("  - No dependencies")
            endif()
        endif()
    endforeach()
endfunction()

macro(sofa_printSummary messageList messageType)
    if(${messageList})
        message("> ${messageType}:")
        foreach(MESSAGE ${${messageList}})
            message("  - ${MESSAGE}")
        endforeach()
    endif()
endmacro()

function(sofa_printConfigurationReport)
    if(SOFA-MISC_CMAKE_VERBOSE)
        sofa_printDetailedProjectsInfo()
    endif()
    if(SOFA_ERROR_MESSAGES OR SOFA_WARNING_MESSAGES)
        message("")
        message(STATUS "Log summary:")
        sofa_printSummary(SOFA_ERROR_MESSAGES "Errors")
        sofa_printSummary(SOFA_WARNING_MESSAGES "Warnings")
    endif()
    message("")
    if(NOT SOFA_ERROR_MESSAGES AND SOFA_FORCE_RECONFIGURE)
        message(">>> The configuration has changed, you must configure the project again")
    endif()
    message("")
endfunction()
